<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FutureNotFound</title>
  
  
  <link href="https://blog.futurenotfound.top/feed.xml" rel="self"/>
  
  <link href="https://blog.futurenotfound.top/"/>
  <updated>2021-07-20T22:29:57.863Z</updated>
  <id>https://blog.futurenotfound.top/</id>
  
  <author>
    <name>maozhijie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用脚本或配置收集</title>
    <link href="https://blog.futurenotfound.top/2021/07/20/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E6%94%B6%E8%97%8F/"/>
    <id>https://blog.futurenotfound.top/2021/07/20/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E6%94%B6%E8%97%8F/</id>
    <published>2021-07-20T04:34:20.000Z</published>
    <updated>2021-07-20T22:29:57.863Z</updated>
    
    <content type="html"><![CDATA[<p>收集一下常用脚本。</p><span id="more"></span><h2 id="Gitlab-CI-gitlab-ci-yml-实现提交代码到-Git-自动创建-Tag"><a href="#Gitlab-CI-gitlab-ci-yml-实现提交代码到-Git-自动创建-Tag" class="headerlink" title="Gitlab CI .gitlab-ci.yml 实现提交代码到 Git 自动创建 Tag"></a>Gitlab CI <code>.gitlab-ci.yml</code> 实现提交代码到 Git 自动创建 Tag</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create_tag</span></span><br><span class="line"></span><br><span class="line"><span class="attr">create_tag:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">create_tag</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;liuzhuoming@testmail.com;&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;liuzhuoming&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">origin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">origin</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">--tags</span> <span class="string">-f</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">remote</span> <span class="string">set-url</span> <span class="string">origin</span> <span class="string">http://NAME:SECRET@git.xx.com/project/test-project.git</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">-l</span> <span class="string">-n</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tag_name=`date</span> <span class="string">&quot;+%Y%m%d%H%M&quot;</span><span class="string">`</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">$&#123;tag_name&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">$&#123;tag_name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Springboot-项目重启脚本"><a href="#Springboot-项目重启脚本" class="headerlink" title="Springboot 项目重启脚本"></a>Springboot 项目重启脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PROJECT_NAME=test-api</span><br><span class="line">PROJECT_VERSION=1.0-SNAPSHOT</span><br><span class="line">PROJECT_DIR=/home/lzm/project/2/</span><br><span class="line">PID=$(ps -ef | grep <span class="variable">$PROJECT_NAME</span>-*.jar | grep -v grep | awk <span class="string">&#x27;&#123; print $2 &#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$PID</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;启动服务&#x27;</span></span><br><span class="line">    nohup java -jar $PROJECT_DIR<span class="variable">$PROJECT_NAME</span>-<span class="variable">$PROJECT_VERSION</span>.jar --spring.profiles.active=dev &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;重启服务&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="built_in">kill</span> <span class="variable">$PID</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br><span class="line">    nohup java -jar $PROJECT_DIR<span class="variable">$PROJECT_NAME</span>-<span class="variable">$PROJECT_VERSION</span>.jar --spring.profiles.active=dev &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="Logback-配置压缩历史日志文件"><a href="#Logback-配置压缩历史日志文件" class="headerlink" title="Logback 配置压缩历史日志文件"></a>Logback 配置压缩历史日志文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按天生成日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;logFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此处$&#123;user.dir&#125;指的是执行启动命令的位置/工作目录，并非项目所在位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;user.dir&#125;/logs/project-name/logback.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--生成日志文件名称--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/project-name/%d&#123;yyyy-MM-dd&#125;.log.gz<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;p_file&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-服务初始化完成事件监听"><a href="#SpringBoot-服务初始化完成事件监听" class="headerlink" title="SpringBoot 服务初始化完成事件监听"></a>SpringBoot 服务初始化完成事件监听</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@Order</span></span><br><span class="line"><span class="meta">@EventListener(WebServerInitializedEvent.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterStart</span><span class="params">(WebServerInitializedEvent event)</span> </span>&#123;</span><br><span class="line">    Environment environment = event.getApplicationContext().getEnvironment();</span><br><span class="line">    String appName = environment.getProperty(<span class="string">&quot;spring.application.name&quot;</span>).toUpperCase();</span><br><span class="line">    <span class="keyword">int</span> localPort = event.getWebServer().getPort();</span><br><span class="line">    String profile = StringUtils.arrayToCommaDelimitedString(environment.getActiveProfiles());</span><br><span class="line">    log.info(<span class="string">&quot;---[&#123;&#125;]---启动完成，当前使用的端口:[&#123;&#125;]，环境变量:[&#123;&#125;]---&quot;</span>, appName, localPort, profile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Swagger-配置全局授权"><a href="#Swagger-配置全局授权" class="headerlink" title="Swagger 配置全局授权"></a>Swagger 配置全局授权</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.SecurityReference;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;local&quot;, &quot;test&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .securitySchemes(securitySchemes())</span><br><span class="line">                .securityContexts(securityContexts());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;API接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;API接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title">securitySchemes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> ApiKey(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;token&quot;</span>, <span class="string">&quot;header&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title">securityContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Lists.newArrayList(</span><br><span class="line">                SecurityContext.builder()</span><br><span class="line">                        .securityReferences(defaultAuth())</span><br><span class="line">                        .build()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[]&#123;authorizationScope&#125;;</span><br><span class="line">        <span class="keyword">return</span> Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> SecurityReference(<span class="string">&quot;token&quot;</span>, authorizationScopes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ant-匹配用户路由权限"><a href="#Ant-匹配用户路由权限" class="headerlink" title="Ant 匹配用户路由权限"></a>Ant 匹配用户路由权限</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;LoginFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不登录就可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; NOT_LOGIN_URL = List.of(</span><br><span class="line">            <span class="comment">//static</span></span><br><span class="line">            <span class="string">&quot;css/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;js/**&quot;</span>,</span><br><span class="line">            <span class="comment">//swagger</span></span><br><span class="line">            <span class="string">&quot;swagger-ui.html**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;swagger-resources**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;v2/api-docs**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;webjars/springfox-swagger-ui/**&quot;</span>,</span><br><span class="line">            <span class="comment">//other</span></span><br><span class="line">            <span class="comment">//登录</span></span><br><span class="line">            <span class="string">&quot;login/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录后无需权限配置就可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; LOGIN_URL = List.of(</span><br><span class="line">            <span class="comment">//当前登录人的菜单列表</span></span><br><span class="line">            <span class="string">&quot;menu/list&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        String url = req.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matchAny(NOT_LOGIN_URL, url)) &#123;</span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//jwt解析</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = JwtUtil.getUser(token);</span><br><span class="line">            <span class="comment">//存入线程变量</span></span><br><span class="line">            CurrentLoginUser.set(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Result result = <span class="keyword">new</span> Result();</span><br><span class="line">            result.setMsg(<span class="string">&quot;token不存在或者已过期&quot;</span>);</span><br><span class="line">            OutputStream outputStream = resp.getOutputStream();</span><br><span class="line">            outputStream.write(JsonUtil.toJSONString(result).getBytes());</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matchAny(LOGIN_URL, url)) &#123;</span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一级菜单</span></span><br><span class="line">        List&lt;MenuTree&gt; menuTreeList = ...;</span><br><span class="line">        <span class="comment">//二级菜单</span></span><br><span class="line">        List&lt;MenuTree&gt; menuTreeLevel2List = menuTreeList.stream()</span><br><span class="line">                .flatMap(menuTree -&gt; menuTree.getMenus().stream())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//三级菜单</span></span><br><span class="line">        List&lt;MenuTree&gt; menuTreeLevel3List = menuTreeLevel2List.stream()</span><br><span class="line">                .flatMap(menuTree -&gt; menuTree.getMenus().stream())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        List&lt;MenuTree&gt; allMenuTree = <span class="keyword">new</span> ArrayList&lt;&gt;(menuTreeList);</span><br><span class="line">        allMenuTree.addAll(menuTreeLevel2List);</span><br><span class="line">        allMenuTree.addAll(menuTreeLevel3List);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; allMenuServerPath = allMenuTree.stream()</span><br><span class="line">                .flatMap(menuTree -&gt; Arrays.stream(menuTree.getUrls().split(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">                .filter(StringUtils::isNotBlank)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户是否存在该路径请求权限</span></span><br><span class="line">        <span class="keyword">if</span> (!matchAny(allMenuServerPath, url)) &#123;</span><br><span class="line">            Result result = <span class="keyword">new</span> Result();</span><br><span class="line">            result.setMsg(String.format(<span class="string">&quot;该用户没有%s接口访问权限&quot;</span>, url));</span><br><span class="line">            OutputStream outputStream = resp.getOutputStream();</span><br><span class="line">            outputStream.write(JsonUtil.toJSONString(result).getBytes());</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断url请求是否配置在patterns列表中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matchAny</span><span class="params">(List&lt;String&gt; patterns, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="keyword">for</span> (String pattern : patterns) &#123;</span><br><span class="line">            <span class="keyword">if</span> (url.startsWith(<span class="string">&quot;/&quot;</span>)) url = url.substring(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (pattern.startsWith(<span class="string">&quot;/&quot;</span>)) pattern = pattern.substring(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (antPathMatcher.match(pattern, url)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;收集一下常用脚本。&lt;/p&gt;</summary>
    
    
    
    <category term="Shell" scheme="https://blog.futurenotfound.top/categories/Shell/"/>
    
    
    <category term="Shell" scheme="https://blog.futurenotfound.top/tags/Shell/"/>
    
    <category term="Gitlab" scheme="https://blog.futurenotfound.top/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>NextCloud 优化（Docker Compose 启动）</title>
    <link href="https://blog.futurenotfound.top/2021/07/18/NextCloud-%E4%BC%98%E5%8C%96%EF%BC%88Docker-Compose-%E5%90%AF%E5%8A%A8%EF%BC%89/"/>
    <id>https://blog.futurenotfound.top/2021/07/18/NextCloud-%E4%BC%98%E5%8C%96%EF%BC%88Docker-Compose-%E5%90%AF%E5%8A%A8%EF%BC%89/</id>
    <published>2021-07-18T04:04:24.000Z</published>
    <updated>2021-07-20T22:29:57.819Z</updated>
    
    <content type="html"><![CDATA[<p>NextCloud 简单优化。</p><span id="more"></span><h2 id="添加-Redis-缓存"><a href="#添加-Redis-缓存" class="headerlink" title="添加 Redis 缓存"></a>添加 Redis 缓存</h2><p>目的： 提升首页列表加载速度（手机 App 优化明显）</p><p>首先修改 docker-compose.yml 文件为（原文件来自 NextCloud 官网文档）：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">nextcloud:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--transaction-isolation=READ-COMMITTED</span> <span class="string">--binlog-format=ROW</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=nextcloud</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nextcloud</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cache</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nextcloud:/var/www/html</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_HOST=db</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./datadir:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br></pre></td></tr></table></figure><p>然后<code>docker exec -it nextcloud_app_1 bash</code>进入容器中修改<code>config/config.php</code> 文件，找到对应代码，修改为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;memcache.local&#x27;</span> =&gt; <span class="string">&#x27;\\OC\\Memcache\\APCu&#x27;</span>,</span><br><span class="line"><span class="comment">//开始修改</span></span><br><span class="line"><span class="string">&#x27;memcache.locking&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;redis&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;cache&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;port&#x27;</span> =&gt; <span class="string">&#x27;6379&#x27;</span>,</span><br><span class="line">),</span><br><span class="line"><span class="comment">//修改结束</span></span><br><span class="line"><span class="string">&#x27;apps_paths&#x27;</span> =&gt;</span><br></pre></td></tr></table></figure><p>如果提示找不到 vi 或者 nano 命令，自己<code>apt install nano</code>就好了。</p><h2 id="后台任务修改为-cron-执行"><a href="#后台任务修改为-cron-执行" class="headerlink" title="后台任务修改为 cron 执行"></a>后台任务修改为 cron 执行</h2><p>目的： 默认的页面 AJAX 执行方式效率过低，并且不打开首页就无法执行</p><p>在宿主机 root 用户下执行<code>crontab -e</code>添加 cron 语句<code>*/5 * * * * docker exec -u www-data nextcloud_app_1 php -f cron.php</code>，并在 NextCloud 设置页面-基础设置 里面修改后台执行任务方式为 CRON。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;NextCloud 简单优化。&lt;/p&gt;</summary>
    
    
    
    <category term="Tool" scheme="https://blog.futurenotfound.top/categories/Tool/"/>
    
    <category term="NextCloud" scheme="https://blog.futurenotfound.top/categories/Tool/NextCloud/"/>
    
    
    <category term="NextCloud" scheme="https://blog.futurenotfound.top/tags/NextCloud/"/>
    
    <category term="Redis" scheme="https://blog.futurenotfound.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MacOS自用软件推荐</title>
    <link href="https://blog.futurenotfound.top/2021/07/08/MacOS%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>https://blog.futurenotfound.top/2021/07/08/MacOS%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</id>
    <published>2021-07-08T05:00:13.000Z</published>
    <updated>2021-07-20T22:29:57.819Z</updated>
    
    <content type="html"><![CDATA[<p>大多为开源，免费或者买断制软件。<br><strong>订阅制收费，可恶！</strong></p><p><em>本文所提应用</em><br><em>如果没特意标注，皆为 brew 安装方式。</em><br><em>如果没特意标注，皆为完全免费或者基础功能免费。</em><br><em>如果没特意标注，皆为无广告。</em></p><span id="more"></span><h2 id="oh-my-zsh-plugins"><a href="#oh-my-zsh-plugins" class="headerlink" title="oh-my-zsh plugins"></a>oh-my-zsh plugins</h2><p>oh-my-zsh 是一个对 zsh 终端命令工具的扩展，添加了主题功能和插件功能。</p><p>官方推荐安装方式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>国内估计是无法直接访问的，可以试试 fork 到国内 gitee 替换为 gitee 链接再进行下载。</p><p>推荐一些自用插件，主题就不推荐了，越改越丑，还是<strong>默认主题</strong>最耐看。</p><p>oh-my-zsh 插件添加方式：在终端输入<code>open ~/.zshrc</code>打开 zsh 配置文件，找到<code>plugins=()</code>这一行，将插件名称按照空格分割或者换行的方式填入即可。最后记得<code>source ~/.zshrc</code>使配置生效。</p><p>插件分为 oh-my-zsh 自带和非自带，非自带需要自行安装，例如<code>brew install</code>或者自己在 github 找安装包。<strong>非自带插件名称后面会标注(*)。</strong></p><p>我自己的插件列表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">git</span><br><span class="line">rand-quote</span><br><span class="line">extract</span><br><span class="line">autojump</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>主要功能为简化 git 命令，例如 <code>git add --all</code> 可以简化为 <code>gaa</code> 等，其本质是使用 alias 对命令定义的一系列别名，完整目录可输入命令<code>cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh</code>来查看 git 插件的配置文件。</p><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><p>主要功能为简化解压命令，不管是 tar 还是 zip，都可以使用<code>x name.zip</code>或<code>x name.tar</code>来解压。</p><h3 id="autojump（-）"><a href="#autojump（-）" class="headerlink" title="autojump（*）"></a>autojump（*）</h3><p>简化 cd 操作，类似<code>cd /Users/yourname/github</code>这样的操作可以简化为<code>j github</code>来实现，似乎需要<code>history</code>中出现过的路径才有效。</p><h3 id="zsh-syntax-highlighting（-）"><a href="#zsh-syntax-highlighting（-）" class="headerlink" title="zsh-syntax-highlighting（*）"></a>zsh-syntax-highlighting（*）</h3><p>高亮命令，如果命令存在则会显示绿色，否则显示红色。命令存在与否跟安装的软件及 alias 有关。</p><h3 id="zsh-autosuggestions（-）"><a href="#zsh-autosuggestions（-）" class="headerlink" title="zsh-autosuggestions（*）"></a>zsh-autosuggestions（*）</h3><p>命令补全建议，会根据<code>history</code>来匹配你当前输入的命令，如果匹配则会将剩余部分以灰色显示，需要补全只需要按一下键盘右键即可。如果有多个匹配结果，会显示最后执行的命令。</p><h3 id="rand-quote（-）"><a href="#rand-quote（-）" class="headerlink" title="rand-quote（*）"></a>rand-quote（*）</h3><p>娱乐功能，输入<code>quote</code> 可以显示一条名言（英文）。可以配置在 zsh 的配置文件中，使其随着终端的开启而自动执行，但是需要做好终端启动速度肉眼可见变慢的心理准备。</p><p><em>反正我不开随终端自动运行。无聊的时候自己输入<code>quote</code>看一下学学英语就可以了。</em></p><h2 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h2><p>推荐一些能够提升效率的工具。</p><h3 id="rectangle"><a href="#rectangle" class="headerlink" title="rectangle"></a>rectangle</h3><p>一款自定义组合按键修改窗口位置和大小的工具。例如可以完成将窗口左右分屏或者左上右上左下右下分屏，或者将窗口置于中间这样的操作。</p><h3 id="switchkey"><a href="#switchkey" class="headerlink" title="switchkey"></a>switchkey</h3><p>输入法自动切换工具，比如 Edge 浏览器可以配置为中文输入法，这样只要你焦点转移到 Edge 浏览器，输入法就会自动切换到中文输入法。<br>很多人不知道配置方式，是需要将焦点放在要配置的应用上并将输入法切换到指定的输入法，然后点击 switchkey 的图标，选择添加按钮。<br><em>这个应用有个问题是无论如何配置都不能开机自启，不知道是系统问题还是什么。总之每次重启机器自己记得打开它好了。</em></p><h3 id="bob"><a href="#bob" class="headerlink" title="bob"></a>bob</h3><p>翻译工具，可以实现自定义组合按键进行窗口翻译和选词翻译，也可以自定义翻译源，一定不要使用默认翻译源，时常会有无法连接的问题，我觉得自己申请的百度翻译免费 api 就很好用了。</p><h3 id="motrix"><a href="#motrix" class="headerlink" title="motrix"></a>motrix</h3><p>下载工具，基于 aira2，挺好使，没什么好说的。</p><h3 id="clashx"><a href="#clashx" class="headerlink" title="clashx"></a>clashx</h3><p>梯子工具，不解释。</p><h3 id="netnewswire"><a href="#netnewswire" class="headerlink" title="netnewswire"></a>netnewswire</h3><p>rss 订阅及管理工具，在今年升级到最新版之后已经可以和 ios 及 ipados 保持列表和阅读状态同步，相当好用。（ios 和 ipados 版本目前也是免费。）</p><h3 id="clipy"><a href="#clipy" class="headerlink" title="clipy"></a>clipy</h3><p>剪贴板管理工具，这么说吧，paste 有的功能它都有，只不过是以比较丑的方式展现了出来。另外他有一个 paste 没有的功能就是鼠标焦点跟随。</p><h3 id="cyberduck"><a href="#cyberduck" class="headerlink" title="cyberduck"></a>cyberduck</h3><p>ftp 工具，该有的都有，缺点是每次关闭应用会弹出捐献页面。</p><h3 id="simplenote"><a href="#simplenote" class="headerlink" title="simplenote"></a>simplenote</h3><p>全平台同步笔记应用，同步迅速，可查看历史变更记录，支持 markdown。</p><h3 id="squirrel"><a href="#squirrel" class="headerlink" title="squirrel"></a>squirrel</h3><p>rime 输入法的 macos 实现，对我来讲唯一的优点就是左 shift 可以切换中英文输入法，自带输入法需要按左大小写锁定键十分别扭，这么多年了我都没适应过来。</p><h3 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h3><p>系统状态监控工具，可以将系统状态展示在状态栏，有多种展示方式。</p><h3 id="sublime-text"><a href="#sublime-text" class="headerlink" title="sublime-text"></a>sublime-text</h3><p>文本编辑工具，打开大文件速度非常快，并且有代码高亮配置。</p><h3 id="switchhosts"><a href="#switchhosts" class="headerlink" title="switchhosts"></a>switchhosts</h3><p>hosts 管理工具。本来挺好使的，最近一次更新后会在息屏后<strong>疯狂占用内存</strong>，上次直接占用了 12g，风扇狂转一晚上，早上起床本都是烫的，太吓人！想不通一个 hosts 管理工具怎么占用这么多的，而且在活动监视器查看他都是无法运行的状态，多半是软件代码有问题导致内存溢出了。总之现在已经不让他开机自启了，有需要的时候再打开，编辑完就关闭。</p><h3 id="termius"><a href="#termius" class="headerlink" title="termius"></a>termius</h3><p>ssh 工具，收费软件，免费版只能使用 ssh 功能，和 cyberduck 搭配使用。</p><h3 id="hiddenbar"><a href="#hiddenbar" class="headerlink" title="hiddenbar"></a>hiddenbar</h3><p>状态栏图标隐藏工具，和 bartender 相比缺少很多功能，比如点击状态栏空白处展示隐藏图标和根据设定的动作展示活动图标两个特性。不过也足够了。</p><p><em>mac 状态栏设计真是其一大败笔，尤其是 big sur 之后还刻意加大图标间隔，使本不够用的状态栏长度雪上加霜。</em></p><h3 id="intellidock"><a href="#intellidock" class="headerlink" title="intellidock"></a>intellidock</h3><p>底部 dock 自动隐藏工具。灵敏度似乎不是很好调节。</p><h3 id="upic"><a href="#upic" class="headerlink" title="upic"></a>upic</h3><p>图床管理工具，搭配 gitee 或者七牛云免费额度使用。</p><h3 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h3><p>markdown 编辑器，主题都很好看，唯一不习惯的是编辑的时候换行会自动添加一个空行，不知道是不是因为遵循标准 markdown 语法的原因。</p><p><em>beta 版本都到 0.10.x 了，目测很快进入 release 版，到时候应该就要收费了。现在能白嫖多久就嫖多久吧。</em></p><h3 id="itsycal"><a href="#itsycal" class="headerlink" title="itsycal"></a>itsycal</h3><p>状态栏的日历及日历事项展示和管理工具，本来很好用，直到升级了 big sur，big sur 之前 macos 可以在状态栏隐藏默认时间组件，然后用 itsycal 组件进行替换，big sur 之后就不可以了。导致状态栏出现两个时间组件，十分难看且占地方。</p><h3 id="pixelscheduler（app-store）（收费）"><a href="#pixelscheduler（app-store）（收费）" class="headerlink" title="pixelscheduler（app store）（收费）"></a>pixelscheduler（app store）（收费）</h3><p>日历事项展示工具，展示方式是左右屏幕边缘的彩条，鼠标移上去展示具体事项，个人感觉比较美观且实用。</p><h3 id="keka"><a href="#keka" class="headerlink" title="keka"></a>keka</h3><p>解压工具。比系统默认的好用一点点，支持的格式多一点点。</p><h3 id="keepassxc"><a href="#keepassxc" class="headerlink" title="keepassxc"></a>keepassxc</h3><p>keepass 的多平台实现，无网络密码管理工具，可以生成长密码和管理密码列表。比钥匙串的好处就是密码数据库是单文件的，可以直接拷贝到其他设备上使用。</p><h3 id="ipreview（app-store）（收费）"><a href="#ipreview（app-store）（收费）" class="headerlink" title="ipreview（app store）（收费）"></a>ipreview（app store）（收费）</h3><p>quicklook 扩展插件，可以支持类似 sql，java，md 等多种格式的文件预览及代码高亮。</p><h3 id="amphetamine（app-store）"><a href="#amphetamine（app-store）" class="headerlink" title="amphetamine（app store）"></a>amphetamine（app store）</h3><p>息屏管理工具。可以控制息屏时间及触发时机。</p><p><em>在我电脑上无法开机自启，不知道是否系统问题</em></p><h3 id="pixea（app-store）"><a href="#pixea（app-store）" class="headerlink" title="pixea（app store）"></a>pixea（app store）</h3><p>图片查看及管理工具，比系统默认的好用一点点。</p><h3 id="liquidtext（app-store）"><a href="#liquidtext（app-store）" class="headerlink" title="liquidtext（app store）"></a>liquidtext（app store）</h3><p>文档查看和标注工具，和 marginnote 比较类似，建议二选一购买或者使用 liquidtext 的免费功能即可。</p><p><em>缺点是不支持云同步。而且感觉 ipad 版更好用。</em></p><h3 id="notability-goodnotes（app-store）（收费）"><a href="#notability-goodnotes（app-store）（收费）" class="headerlink" title="notability/goodnotes（app store）（收费）"></a>notability/goodnotes（app store）（收费）</h3><p>笔记工具，二选一即可，都是购买 ipados/ios/macos 版一次购买全平台使用。</p><h3 id="fsnotes"><a href="#fsnotes" class="headerlink" title="fsnotes"></a>fsnotes</h3><p>快捷笔记应用，功能齐全。</p><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>git 管理工具。</p><p><em>说是收费，暂时还没看到哪里收费。</em></p><h2 id="娱乐工具"><a href="#娱乐工具" class="headerlink" title="娱乐工具"></a>娱乐工具</h2><h3 id="paper"><a href="#paper" class="headerlink" title="paper"></a>paper</h3><p>壁纸自动切换工具，壁纸都很好看，只是偶尔热门推荐会出现一些 zzzq 亢奋症患者不希望看到的图片。壁纸来源似乎是 Unsplash。</p><p><em>不知道为什么在我电脑上开启开机自启之后状态栏图标就会变成两个，依旧不知道是否系统问题。</em></p><h3 id="aerial"><a href="#aerial" class="headerlink" title="aerial"></a>aerial</h3><p>视频屏保工具，所选取的视频似乎是苹果官方的演示视频，基本为全球各地的知名风景或者太空俯瞰图之类的，相当养眼。</p><p><em>这个应用的问题是下载服务器不是很稳定，下载需要时间较长并且<strong>不能断点续传</strong>，所以下载过程中需要一直保持软件开启不能关闭不能最小化，否则需要从头开始下载。再就是屏保开启期间<strong>占用资源过多</strong>，尤其是选择平滑字体之后，风扇狂转，最后我吓得将其打入冷宫。</em></p><h3 id="lyricsx"><a href="#lyricsx" class="headerlink" title="lyricsx"></a>lyricsx</h3><p>桌面歌词工具，可以实现随着 apple music 启动而自动启动，并且可以设置歌词在桌面的位置和展现方式（甚至包括TouchBar！）。比较实用。</p><h3 id="fliqlo"><a href="#fliqlo" class="headerlink" title="fliqlo"></a>fliqlo</h3><p>翻页时钟。</p><h3 id="tinymediamanager"><a href="#tinymediamanager" class="headerlink" title="tinymediamanager"></a>tinymediamanager</h3><p>电影信息刮削工具，可以补全电影信息及封面等。搭配 kodi 和树莓派使用无敌。</p><p><em>因为一些大人的原因需要配置 hosts 才可以正常使用。</em></p><h3 id="iina"><a href="#iina" class="headerlink" title="iina"></a>iina</h3><p>音视频播放工具。无敌。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大多为开源，免费或者买断制软件。&lt;br&gt;&lt;strong&gt;订阅制收费，可恶！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文所提应用&lt;/em&gt;&lt;br&gt;&lt;em&gt;如果没特意标注，皆为 brew 安装方式。&lt;/em&gt;&lt;br&gt;&lt;em&gt;如果没特意标注，皆为完全免费或者基础功能免费。&lt;/em&gt;&lt;br&gt;&lt;em&gt;如果没特意标注，皆为无广告。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Tool" scheme="https://blog.futurenotfound.top/categories/Tool/"/>
    
    
    <category term="MacOS" scheme="https://blog.futurenotfound.top/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS Alias建议</title>
    <link href="https://blog.futurenotfound.top/2021/07/05/Mac-alias%E5%BB%BA%E8%AE%AE/"/>
    <id>https://blog.futurenotfound.top/2021/07/05/Mac-alias%E5%BB%BA%E8%AE%AE/</id>
    <published>2021-07-05T13:07:45.000Z</published>
    <updated>2021-07-20T22:29:57.819Z</updated>
    
    <content type="html"><![CDATA[<p>alias 的意义即以自己能记住的命令来简化高频操作。</p><span id="more"></span><h2 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启控制台 clashx 代理</span></span><br><span class="line"><span class="built_in">alias</span> clashx=<span class="string">&quot;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="comment">#重新排列 Mac 启动台图标</span></span><br><span class="line"><span class="built_in">alias</span> resetlp=<span class="string">&quot;defaults write com.apple.dock ResetLaunchPad -bool true &amp;&amp; killall Dock&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hexo</span></span><br><span class="line"><span class="built_in">alias</span> hx=<span class="string">&quot;hexo&quot;</span></span><br><span class="line"><span class="comment">#hexo 清除缓存并启动</span></span><br><span class="line"><span class="built_in">alias</span> hxcs=<span class="string">&quot;hx clean &amp;&amp; hx s&quot;</span></span><br><span class="line"><span class="comment">#hexo 构建并发布</span></span><br><span class="line"><span class="built_in">alias</span> hxdg=<span class="string">&quot;hx d -g&quot;</span></span><br><span class="line"><span class="comment">#hexo 创建新文章</span></span><br><span class="line"><span class="built_in">alias</span> hxn=<span class="string">&quot;hx new&quot;</span></span><br><span class="line"><span class="comment">#hexo 创建以日期命名的新文章</span></span><br><span class="line"><span class="built_in">alias</span> hxnd=<span class="string">&quot;hxn `date +%Y-%m-%d`&quot;</span></span><br></pre></td></tr></table></figure><h2 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主命令</span></span><br><span class="line"><span class="built_in">alias</span> hb=<span class="string">&quot;brew&quot;</span></span><br><span class="line"><span class="comment">#清除缓存</span></span><br><span class="line"><span class="built_in">alias</span> hbc=<span class="string">&quot;hb cleanup&quot;</span></span><br><span class="line"><span class="comment">#查看服务</span></span><br><span class="line"><span class="built_in">alias</span> hbv=<span class="string">&quot;hb services&quot;</span></span><br><span class="line"><span class="comment">#查看更新</span></span><br><span class="line"><span class="built_in">alias</span> hbu=<span class="string">&quot;hb update -v&quot;</span></span><br><span class="line"><span class="comment">#搜索远程仓库</span></span><br><span class="line"><span class="built_in">alias</span> hbs=<span class="string">&quot;hb search&quot;</span></span><br><span class="line"><span class="comment">##搜索远程 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hbsc=<span class="string">&quot;hbs --cask&quot;</span></span><br><span class="line"><span class="comment">#搜索本地仓库</span></span><br><span class="line"><span class="built_in">alias</span> hbl=<span class="string">&quot;hb list&quot;</span></span><br><span class="line"><span class="comment">##搜索本地 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hblc=<span class="string">&quot;hbl --cask&quot;</span></span><br><span class="line"><span class="comment">#下载并安装包</span></span><br><span class="line"><span class="built_in">alias</span> hbi=<span class="string">&quot;hb install&quot;</span></span><br><span class="line"><span class="comment">##安装 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hbic=<span class="string">&quot;hbi --cask&quot;</span></span><br><span class="line"><span class="comment">#下载并更新包</span></span><br><span class="line"><span class="built_in">alias</span> hbug=<span class="string">&quot;hb upgrade&quot;</span></span><br><span class="line"><span class="comment">##更新 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hbugc=<span class="string">&quot;hbug --cask&quot;</span></span><br><span class="line"><span class="comment">###更新版本号为 release 或者 auto_update 的包</span></span><br><span class="line"><span class="built_in">alias</span> hbugcf=<span class="string">&quot;hbugc `brew list --cask | tr &quot;</span>\n%<span class="string">&quot; &quot;</span>  <span class="string">&quot;`&quot;</span></span><br><span class="line"><span class="comment">#卸载包</span></span><br><span class="line"><span class="built_in">alias</span> hbun=<span class="string">&quot;hb uninstall -f&quot;</span></span><br><span class="line"><span class="comment">##卸载 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hbunc=<span class="string">&quot;hbun --zap --cask&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;alias 的意义即以自己能记住的命令来简化高频操作。&lt;/p&gt;</summary>
    
    
    
    <category term="Shell" scheme="https://blog.futurenotfound.top/categories/Shell/"/>
    
    
    <category term="Shell" scheme="https://blog.futurenotfound.top/tags/Shell/"/>
    
    <category term="MacOS" scheme="https://blog.futurenotfound.top/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot项目版本号管理方案</title>
    <link href="https://blog.futurenotfound.top/2021/06/15/Spring-Boot%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/"/>
    <id>https://blog.futurenotfound.top/2021/06/15/Spring-Boot%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</id>
    <published>2021-06-15T12:11:36.000Z</published>
    <updated>2021-07-20T22:29:57.819Z</updated>
    
    <content type="html"><![CDATA[<p>简单有效的版本号管理可以提升发布项目及版本回退及版本 bug 管理控制体验。下面是这几年整理优化的针对 Spring Boot 项目 Jar 包 Jenkins 发布流程的版本号管理方案。少许修改之后也可以变更为针对 Docker 私有仓库的版本号管理方案。</p><span id="more"></span><ol><li>测试/正式版本号发布时版本号需跟对应的 Git 标签（Tag）保持一致，每次发布前先在 GitLab 打标签（Tag），即对应的版本号，项目中<code>project.version</code>无需做修改，仅在 Jenkins 流程中动态修改</li><li>正式的 Tag version 必须对应某一时刻的线上发布版本号，并保持递增趋势</li><li>在 Jenkins 流程中 package 之前使用<code>mvn versions:set -DnewVersion=2.0.1-RELEASE</code>（其中<code>2.0.1-RELEASE</code>为示例正式版本号）来统一动态修改所有项目的版本号为 Tag version</li><li>Jenkins 流程中的<code>startup.sh</code>启动脚本涉及的项目版本<code>PROJECT_VERSION</code>需跟随 Tag version 做修改</li><li>测试版本号为当前时间时间戳<code>yyyyMMddHHmm</code>（例：202112231223）;正式版本号规则为<code>x.y.z-RELEASE</code>（例：2.0.1-RELEASE），其中<code>x</code>为大版本号，<code>y</code>为小版本号，<code>z</code>为小版本中的 bug 修复递增版本号，<code>RELEASE</code>指当前版本为某个正式版</li></ol><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>Gitlab CI 推送代码自动创建 Tag 的 .gitlab-ci.yml 配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create_tag</span></span><br><span class="line"></span><br><span class="line"><span class="attr">create_tag:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">create_tag</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;liuzhuoming@testmail.com;&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;liuzhuoming&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">origin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">origin</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">--tags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">remote</span> <span class="string">set-url</span> <span class="string">origin</span> <span class="string">http://name:secret@xx.com/project/test-project.git</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">-l</span> <span class="string">-n</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tag_name=`date</span> <span class="string">&quot;+%Y%m%d%H%M&quot;</span><span class="string">`</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">$&#123;tag_name&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">$&#123;tag_name&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单有效的版本号管理可以提升发布项目及版本回退及版本 bug 管理控制体验。下面是这几年整理优化的针对 Spring Boot 项目 Jar 包 Jenkins 发布流程的版本号管理方案。少许修改之后也可以变更为针对 Docker 私有仓库的版本号管理方案。&lt;/p&gt;</summary>
    
    
    
    <category term="Spring Boot" scheme="https://blog.futurenotfound.top/categories/Spring-Boot/"/>
    
    
    <category term="Spring Boot" scheme="https://blog.futurenotfound.top/tags/Spring-Boot/"/>
    
    <category term="Jenkins" scheme="https://blog.futurenotfound.top/tags/Jenkins/"/>
    
    <category term="GitLab" scheme="https://blog.futurenotfound.top/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>通过Redis实现前后端分离的图片验证码生成和校验</title>
    <link href="https://blog.futurenotfound.top/2021/06/02/%E9%80%9A%E8%BF%87Redis%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90%E5%92%8C%E6%A0%A1%E9%AA%8C/"/>
    <id>https://blog.futurenotfound.top/2021/06/02/%E9%80%9A%E8%BF%87Redis%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90%E5%92%8C%E6%A0%A1%E9%AA%8C/</id>
    <published>2021-06-02T14:08:36.000Z</published>
    <updated>2021-07-20T22:29:57.863Z</updated>
    
    <content type="html"><![CDATA[<p>前后端不分离的情况下图片验证码的做法一般是第一次请求会将 code 保存在 session 中并返回前端，第二次请求在校验的时候通过 sessionId 来保证同一次会话并从 session 中拿出 code 跟用户识别并提交的图片验证码 code 相对比，判断验证码是否有效。但是前后端分离情况下无法保证两次请求在一次会话中，所以保存 session 的做法行不通，但是可以采取类似的操作迂回实现。</p><span id="more"></span><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>做法既生成图片验证码的时候同时返回一个当前图片验证码对应的 id，并将其绑定关系保存在 Redis 中。校验的时候根据 id 在 Redis 中取出原始 code 跟用户上传的 code 相比对，根据结果进行下一步操作。来实现类似 sessionId 的操作。</p><p>验证码返回方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.futurenotfound.demo.kaptcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码返回方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">KaptchaMode</span> </span>&#123;</span><br><span class="line">    BASE64(<span class="string">&quot;base64&quot;</span>),</span><br><span class="line">    URL(<span class="string">&quot;url&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证码返回值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.futurenotfound.demo.kaptcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码返回</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kaptcha</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6778764549600473414L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回验证码方式</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * base64，url等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mode;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String context;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String contextId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.futurenotfound.demo.kaptcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.captcha.CaptchaUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.captcha.LineCaptcha;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.lang.UUID;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ObjectUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.crypto.digest.MD5;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;kaptcha&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Kaptcha <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LineCaptcha captcha = CaptchaUtil.createLineCaptcha(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">        String context = captcha.getImageBase64();</span><br><span class="line">        String code = captcha.getCode();</span><br><span class="line">        String contextId = UUID.fastUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将contextId和简单加密的code以kv的方式存入redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(contextId, MD5.create().digestHex(code.toLowerCase()), <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Kaptcha(KaptchaMode.BASE64.getCode(), context, contextId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">post</span><span class="params">(String code, String contextId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isEmpty(code)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//contextId对应的redis中的加密code</span></span><br><span class="line">        String md5Code = redisTemplate.opsForValue().get(contextId);</span><br><span class="line">        <span class="keyword">boolean</span> tf = Objects.equals(MD5.create().digestHex(code.toLowerCase()), md5Code);</span><br><span class="line">        <span class="keyword">if</span> (tf) &#123;</span><br><span class="line">            redisTemplate.delete(contextId);</span><br><span class="line">            log.info(<span class="string">&quot;验证码校验成功&quot;</span>);</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前后端不分离的情况下图片验证码的做法一般是第一次请求会将 code 保存在 session 中并返回前端，第二次请求在校验的时候通过 sessionId 来保证同一次会话并从 session 中拿出 code 跟用户识别并提交的图片验证码 code 相对比，判断验证码是否有效。但是前后端分离情况下无法保证两次请求在一次会话中，所以保存 session 的做法行不通，但是可以采取类似的操作迂回实现。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.futurenotfound.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://blog.futurenotfound.top/tags/Java/"/>
    
    <category term="Redis" scheme="https://blog.futurenotfound.top/tags/Redis/"/>
    
    <category term="SpringBoot" scheme="https://blog.futurenotfound.top/tags/SpringBoot/"/>
    
    <category term="Kaptcha" scheme="https://blog.futurenotfound.top/tags/Kaptcha/"/>
    
  </entry>
  
  <entry>
    <title>通过AOP解决分布式系统中RabbitMQ消息幂等性问题</title>
    <link href="https://blog.futurenotfound.top/2021/05/09/%E9%80%9A%E8%BF%87AOP%E8%A7%A3%E5%86%B3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%ADRabbitMQ%E6%B6%88%E6%81%AF%E5%B9%82%E7%AD%89%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.futurenotfound.top/2021/05/09/%E9%80%9A%E8%BF%87AOP%E8%A7%A3%E5%86%B3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%ADRabbitMQ%E6%B6%88%E6%81%AF%E5%B9%82%E7%AD%89%E6%80%A7%E9%97%AE%E9%A2%98/</id>
    <published>2021-05-09T03:54:54.000Z</published>
    <updated>2021-07-20T22:29:57.863Z</updated>
    
    <content type="html"><![CDATA[<p>RabbitMQ 中的消息幂等性问题，主要指的即是 RabbitMQ 的重试机制导致的消费者端<strong>消息重复消费</strong>问题。</p><span id="more"></span><h2 id="采用-AOP-Redis-的解决方案"><a href="#采用-AOP-Redis-的解决方案" class="headerlink" title="采用 AOP+Redis 的解决方案"></a>采用 AOP+Redis 的解决方案</h2><p>主要思路既每个消息对象都存在或者可以计算出其队列内的唯一 id，并将这个 id 作为凭证判断消费者是否已经进行过消费，如果已经进行过消费则直接对 RabbitMQ ack。</p><h3 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h3><p>消息对象（MessageObject）MO：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础消息对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息唯一id，防止重复消费</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 消息对象应必须独立实现此方法，其返回的id应当在当前队列中唯一</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息唯一id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getUniqueId</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息处理器基类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列消费者处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 消息对象类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RabbitMQConsumerHandler</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseMO</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者消息处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mo 消息对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RabbitMQConsumerHandleResult <span class="title">handle</span><span class="params">(T mo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息消费结果枚举：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列消费者处理结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RabbitMQConsumerHandleResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCC,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FAIL,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重复消费</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DUPLICATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复消费检测切面注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列消费者重复消费</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RabbitMQConsumerDuplicate &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复消费切面处理类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> top.futurenotfound.redis.util.RedisUtils;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.domain.BaseMO;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerHandleResult;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列消费者重复消费处理切面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConsumerDuplicateAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@within(top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerDuplicate)&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp;execution(public * top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerHandler+.handle(top.futurenotfound.rabbitmq.domain.BaseMO))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp;args(mo))</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">    private void join(BaseMO mo) &#123;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Around(&quot;</span>join(top.futurenotfound.rabbitmq.domain.BaseMO)<span class="string">&quot; +</span></span><br><span class="line"><span class="string">            &quot;</span>&amp;&amp;args(mo)<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public Object joinPoint(ProceedingJoinPoint joinPoint, BaseMO mo) throws Throwable &#123;</span></span><br><span class="line"><span class="string">        String moKey = &quot;</span>rabbitmq:<span class="string">&quot; + mo.getClass().getName() + &quot;</span>:<span class="string">&quot; + mo.getUniqueId();</span></span><br><span class="line"><span class="string">        synchronized (this) &#123;</span></span><br><span class="line"><span class="string">            if (redisUtils.get(moKey) == null) &#123;</span></span><br><span class="line"><span class="string">                redisUtils.set(moKey, 0, 1 * 60 * 60);</span></span><br><span class="line"><span class="string">                return joinPoint.proceed();</span></span><br><span class="line"><span class="string">            &#125; else &#123;</span></span><br><span class="line"><span class="string">                //返回重复消费标记</span></span><br><span class="line"><span class="string">                return RabbitMQConsumerHandleResult.DUPLICATE;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>客户端数据同步消息对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> top.futurenotfound.commons.utils.MD5Util;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.domain.BaseMO;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端数据消息对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDataMO</span> <span class="keyword">implements</span> <span class="title">BaseMO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息负载数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息入队列时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date sendDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUniqueId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MD5Util.md5(type + <span class="string">&quot;:&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端数据同步消息处理器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.mo.ClientDataMO;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerHandleResult;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerHandler;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerDuplicate;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端数据同步处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RabbitMQConsumerDuplicate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDataConsumerHandler</span> <span class="keyword">implements</span> <span class="title">RabbitMQConsumerHandler</span>&lt;<span class="title">ClientDataMO</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clientDataMO 客户端数据消息对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true-处理成功 false-处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitMQConsumerHandleResult <span class="title">handle</span><span class="params">(ClientDataMO clientDataMO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (clientDataMO == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> RabbitMQConsumerHandleResult.FAIL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此处加入业务代码</span></span><br><span class="line">        <span class="keyword">return</span> RabbitMQConsumerHandleResult.SUCC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端同步数据消费者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.mo.ClientDataMO;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.enst.ClientDataExceptionMessage;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.enst.RabbitMQConstant;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端数据同步消费者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDataConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClientDataConsumerHandler clientDataConsumerHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitMQConstant.Queue.CLIENT_DATA_QUEUE)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Channel channel, <span class="meta">@Payload</span> ClientDataMO clientDataMO, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (clientDataConsumerHandler.handle(clientDataMO)) &#123;</span><br><span class="line">                <span class="keyword">case</span> SUCC:</span><br><span class="line">                    log.info(ClientDataExceptionMessage.CLIENT_DATA_HANDLE_SUCC + <span class="string">&quot; &gt;payload=&quot;</span> + clientDataMO);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DUPLICATE:</span><br><span class="line">                    log.warn(ClientDataExceptionMessage.CLIENT_DATA_DUPLICATE_HANDLE_ERR + <span class="string">&quot; &gt;payload=&quot;</span> + clientDataMO);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> FAIL:</span><br><span class="line">                    <span class="comment">//应当在创建队列时，给本队列绑定死信队列，在basicReject之后消息被发送到死信队列进一步处理</span></span><br><span class="line">                    channel.basicReject(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                    log.error(ClientDataExceptionMessage.CLIENT_DATA_HANDLE_ERR + <span class="string">&quot; &gt;payload=&quot;</span> + clientDataMO);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">//nothing to do</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">        <span class="comment">//消息手动ack处理。即使异常也要ack，防止unack消息数量达到上限使队列阻塞</span></span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;RabbitMQ 中的消息幂等性问题，主要指的即是 RabbitMQ 的重试机制导致的消费者端&lt;strong&gt;消息重复消费&lt;/strong&gt;问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.futurenotfound.top/categories/Java/"/>
    
    
    <category term="Redis" scheme="https://blog.futurenotfound.top/tags/Redis/"/>
    
    <category term="RabbitMQ" scheme="https://blog.futurenotfound.top/tags/RabbitMQ/"/>
    
    <category term="AOP" scheme="https://blog.futurenotfound.top/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>全局替换 System.out.print() 为 log.info()</title>
    <link href="https://blog.futurenotfound.top/2021/01/26/%E5%85%A8%E5%B1%80%E6%9B%BF%E6%8D%A2System-out-print-%E4%B8%BAlog-info/"/>
    <id>https://blog.futurenotfound.top/2021/01/26/%E5%85%A8%E5%B1%80%E6%9B%BF%E6%8D%A2System-out-print-%E4%B8%BAlog-info/</id>
    <published>2021-01-26T02:08:12.000Z</published>
    <updated>2021-07-20T22:29:57.863Z</updated>
    
    <content type="html"><![CDATA[<p>经常有人在线上代码写 <code>System.out.print()</code> 给日志分类分析带来困扰，索性将几个常用方法全局替换为 <code>log.info()</code>。原方法是通过 <code>java.io.PrintStream</code> 类来实现的，那就继承 <code>java.io.PrintStream</code> 并重写其相关方法。</p><span id="more"></span><h2 id="重写-System-out-print"><a href="#重写-System-out-print" class="headerlink" title="重写 System.out.print()"></a>重写 System.out.print()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java15springdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * log info打印</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInfoPrintStream</span> <span class="keyword">extends</span> <span class="title">PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogInfoPrintStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(System.out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        log.info(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">        log.info(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PrintStream <span class="title">printf</span><span class="params">(String format, Object... args)</span> </span>&#123;</span><br><span class="line">        log.info(String.format(format, args));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写-System-err-print"><a href="#重写-System-err-print" class="headerlink" title="重写 System.err.print()"></a>重写 System.err.print()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java15springdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * log error打印</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogErrPrintStream</span> <span class="keyword">extends</span> <span class="title">PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogErrPrintStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(System.err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        log.error(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">        log.error(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PrintStream <span class="title">printf</span><span class="params">(String format, Object... args)</span> </span>&#123;</span><br><span class="line">        log.error(String.format(format, args));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-项目启动时全局替换"><a href="#SpringBoot-项目启动时全局替换" class="headerlink" title="SpringBoot 项目启动时全局替换"></a>SpringBoot 项目启动时全局替换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java15springdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">        System.setOut(<span class="keyword">new</span> LogInfoPrintStream());</span><br><span class="line">        System.setErr(<span class="keyword">new</span> LogErrPrintStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.err.println(<span class="string">&quot;请求失败：ERR&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;请求失败：INFO&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021-01-26 10:49:22.570 ERROR 12150 --- [nio-8080-exec-1] c.e.java15springdemo.LogErrPrintStream   : 请求失败：ERR</span><br><span class="line">2021-01-26 10:52:42.128  INFO 12150 --- [nio-8080-exec-1] c.e.java15springdemo.LogInfoPrintStream   : 请求失败：INFO</span><br></pre></td></tr></table></figure><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>肉眼可见的问题就是打印日志的类路径是 <code>c.e.xx.LogErrPrintStream</code> 而不是我们埋点的类，不过也没办法，总比 <code>System.out.print()</code> 好，<strong>能用就行</strong>了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;经常有人在线上代码写 &lt;code&gt;System.out.print()&lt;/code&gt; 给日志分类分析带来困扰，索性将几个常用方法全局替换为 &lt;code&gt;log.info()&lt;/code&gt;。原方法是通过 &lt;code&gt;java.io.PrintStream&lt;/code&gt; 类来实现的，那就继承 &lt;code&gt;java.io.PrintStream&lt;/code&gt; 并重写其相关方法。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.futurenotfound.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://blog.futurenotfound.top/tags/Java/"/>
    
    <category term="Log4j" scheme="https://blog.futurenotfound.top/tags/Log4j/"/>
    
  </entry>
  
  <entry>
    <title>敏感词过滤（DFA+Trie）</title>
    <link href="https://blog.futurenotfound.top/2020/10/31/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4/"/>
    <id>https://blog.futurenotfound.top/2020/10/31/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4/</id>
    <published>2020-10-31T09:29:16.000Z</published>
    <updated>2021-07-20T22:29:57.863Z</updated>
    
    <content type="html"><![CDATA[<p>这几天搜了一下 java 实现敏感词过滤算法，搜索结果前十页都是同一套代码，拷出来运行一下倒是可以运行，但是代码凌乱没有丝毫规范性，看着有点不太行，所以周末抽空自己实现了一下。原理倒是差不多，都是 Trie 做敏感词库，DFA 做匹配算法。这样占用空间小且运行效率高。</p><span id="more"></span><h2 id="构建敏感词库（字典树）"><a href="#构建敏感词库（字典树）" class="headerlink" title="构建敏感词库（字典树）"></a>构建敏感词库（字典树）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字典树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是一个词组的结尾</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> containsTail;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Character, Trie&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.containsTail = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.nodes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Trie</span><span class="params">(<span class="keyword">boolean</span> containsTail, HashMap&lt;Character, Trie&gt; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.containsTail = containsTail;</span><br><span class="line">        <span class="keyword">this</span>.nodes = nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定词组加入字典树</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> word 词组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        Trie node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node.nodes.containsKey(c)) &#123;</span><br><span class="line">                node.nodes.put(c, <span class="keyword">new</span> Trie(<span class="keyword">false</span>, <span class="keyword">new</span> HashMap&lt;&gt;()));</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.nodes.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        node.containsTail = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个字符在当前树的子树中是否存在一个节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ch 字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.nodes.containsKey(ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个字符的位置在当前树的子树中的节点是否是一个结尾</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ch 字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTail</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.nodes.get(ch).containsTail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匹配算法"><a href="#匹配算法" class="headerlink" title="匹配算法"></a>匹配算法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 词组过滤</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Trie trie;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordFilter</span><span class="params">(Trie trie)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.trie = trie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本中是否存在指定词组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isContainsWord</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        Trie trie = <span class="keyword">this</span>.trie;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : text.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trie.contains(ch)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (trie.isTail(ch)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trie = <span class="keyword">this</span>.trie;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            trie = trie.nodes.get(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回文本中存在的指定词组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">containsWords</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        Trie trie = <span class="keyword">this</span>.trie;</span><br><span class="line">        Set&lt;String&gt; stringSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">char</span>[] charArray = text.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = charArray[i];</span><br><span class="line">            <span class="keyword">if</span> (trie.contains(ch)) &#123;</span><br><span class="line">                stringBuilder.append(ch);</span><br><span class="line">                <span class="keyword">if</span> (trie.isTail(ch)) &#123;</span><br><span class="line">                    stringSet.add(stringBuilder.toString());</span><br><span class="line">                    <span class="comment">//已匹配结果的话重置字典树和结果串</span></span><br><span class="line">                    trie = <span class="keyword">this</span>.trie;</span><br><span class="line">                    stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//如果节点存在当前字符则替换用来匹配的树为获取当前字符匹配的子树</span></span><br><span class="line">                    trie = trie.nodes.get(ch);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//子串不存在词组中则退回当前测试子串的第二位重新匹配（重要），并重置字典树和结果串</span></span><br><span class="line">                i = i - stringBuilder.length();</span><br><span class="line">                trie = <span class="keyword">this</span>.trie;</span><br><span class="line">                stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stringSet.sort(comparator);</span><br><span class="line">        <span class="keyword">return</span> stringSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用指定字符替换词组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text        文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replaceChar 指定字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceWords</span><span class="params">(String text, <span class="keyword">char</span> replaceChar)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; stringSet = containsWords(text);</span><br><span class="line">        <span class="keyword">for</span> (String word : stringSet) &#123;</span><br><span class="line">            StringBuilder replaceWord = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                replaceWord.append(replaceChar);</span><br><span class="line">            &#125;</span><br><span class="line">            text = text.replace(word, replaceWord.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序器（重要）</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 按照词组长度降序排序，这样替换指定词组的时候可以最大化替换为屏蔽字符</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 示例： 屏蔽词=[西安，陕西西安北]，文本=从陕西西安北站到达西安</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 如果先替换 西安，则结果为 从陕西**北站到达**，如果先替换 陕西西安北，则结果为 从*****站到达**</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;String&gt; comparator = Comparator.comparing(String::length).reversed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>自己百度一下敏感词库并使用<code>Trie.put()</code>方法循环导入字典树中，示例为使用本地txt解析：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; stringSet = readLineTextsFromFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化敏感词库，一般会设置为单例，并且启动时候初始化一次就好了，有新的敏感词直接调用接口添加进单例对象中</span></span><br><span class="line">        Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">        <span class="keyword">for</span> (String word : stringSet) &#123;</span><br><span class="line">            trie.put(word);</span><br><span class="line">        &#125;</span><br><span class="line">        WordFilter wordFilter = <span class="keyword">new</span> WordFilter(trie);</span><br><span class="line"></span><br><span class="line">        String text = <span class="string">&quot;税票据试试无锡专线目标测试利民投资&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(wordFilter.isContainsWord(text));</span><br><span class="line">        System.out.println(wordFilter.containsWords(text));</span><br><span class="line">        System.out.println(wordFilter.replaceWords(text, <span class="string">&#x27;*&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">readLineTextsFromFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; stringSet = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String pathname = <span class="string">&quot;/Users/liuzhuoming/Downloads/wordsFilter.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (FileReader reader = <span class="keyword">new</span> FileReader(pathname);</span><br><span class="line">             BufferedReader br = <span class="keyword">new</span> BufferedReader(reader)</span><br><span class="line">        ) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = Base64.getDecoder().decode(line.trim());</span><br><span class="line">                stringSet.add(<span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8).trim());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>亲测检测并替换1000长度的文本，在6000词组的库中只需要6毫秒，并且不会有遗漏的情况。</strong></p><p><a href="wordsFilter.txt">测试敏感词库下载</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这几天搜了一下 java 实现敏感词过滤算法，搜索结果前十页都是同一套代码，拷出来运行一下倒是可以运行，但是代码凌乱没有丝毫规范性，看着有点不太行，所以周末抽空自己实现了一下。原理倒是差不多，都是 Trie 做敏感词库，DFA 做匹配算法。这样占用空间小且运行效率高。&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.futurenotfound.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法" scheme="https://blog.futurenotfound.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://blog.futurenotfound.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数据结构与算法" scheme="https://blog.futurenotfound.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用 Adobe Typekit 给博客换思源系列字体</title>
    <link href="https://blog.futurenotfound.top/2020/09/21/%E4%BD%BF%E7%94%A8-Adobe-Typekit-%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%8D%A2%E6%80%9D%E6%BA%90%E7%B3%BB%E5%88%97%E5%AD%97%E4%BD%93/"/>
    <id>https://blog.futurenotfound.top/2020/09/21/%E4%BD%BF%E7%94%A8-Adobe-Typekit-%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%8D%A2%E6%80%9D%E6%BA%90%E7%B3%BB%E5%88%97%E5%AD%97%E4%BD%93/</id>
    <published>2020-09-21T06:03:07.000Z</published>
    <updated>2021-07-20T22:29:57.851Z</updated>
    
    <content type="html"><![CDATA[<p>给个人博客换思源字体遇到很多坑，在这里记录一下。<br>因为 Google Fonts 没有收录思源系列字体，所以在这里使用 Adobe Typekit 作为在线字体库。</p><span id="more"></span><h2 id="注册-Adobe-账号"><a href="#注册-Adobe-账号" class="headerlink" title="注册 Adobe 账号"></a>注册 Adobe 账号</h2><p>首先去<a href="https://fonts.adobe.com/">https://fonts.adobe.com/</a>注册 Adobe 账号，注意要<strong>挂梯子</strong>，并且所在地区<strong>不能</strong>选择中国，否则会不能登录，提示网络异常，但是你选择其他任意地区就算挂着不同地区的梯子都不会提示你网络异常。所以这里又是国内用户被特殊对待了，毕竟众所周知中国不在地球上，每次全球同步的东西中国总会被玩出不同的花样。（可恶！）</p><h2 id="搜索思源宋体（Source-Han-Serif-Simplified-Chinese）"><a href="#搜索思源宋体（Source-Han-Serif-Simplified-Chinese）" class="headerlink" title="搜索思源宋体（Source Han Serif Simplified Chinese）"></a>搜索思源宋体（Source Han Serif Simplified Chinese）</h2><p>这里以思源宋体为例，首先在 Typekit 首页的搜索框输入 Source Han Serif Simplified Chinese 并回车搜索，会弹出搜索结果：<br><img src="01.png" alt="01.png"></p><h2 id="创建个人字体库"><a href="#创建个人字体库" class="headerlink" title="创建个人字体库"></a>创建个人字体库</h2><p>点击进入字体详情，勾选 <code>Source Han Serif SC Regular</code> 即常规字重（包含了加粗字重），然后点击右上角的 <code>&lt;/&gt; Add to Web Project</code> 按钮：<br><img src="02.png" alt="02.png"><br>弹出 Web Project 模态框：<br><img src="03.png" alt="03.png"><br>点开下拉框并选择 <code>Create a new project</code>，命名为 hexo，然后点击右下角 <code>Create/Save</code> 完成创建个人网络字体库。<br>然后点按 <code>My Adobe Fonts</code> 按钮：<br><img src="04.png" alt="04.png"><br>再选择 Web Projects 选项卡：<br><img src="05.png" alt="05.png"><br>就可以看到我们创建的 hexo 字体库了。</p><h2 id="引入字体载入代码"><a href="#引入字体载入代码" class="headerlink" title="引入字体载入代码"></a>引入字体载入代码</h2><p>复制其中的代码，类似：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> config = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">kitId</span>: <span class="string">&quot;testxxx&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">scriptTimeout</span>: <span class="number">3000</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">async</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      h = d.documentElement,</span></span><br><span class="line"><span class="javascript">      t = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        h.className =</span></span><br><span class="line"><span class="javascript">          h.className.replace(<span class="regexp">/\bwf-loading\b/g</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot; wf-inactive&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;, config.scriptTimeout),</span></span><br><span class="line"><span class="javascript">      tk = d.createElement(<span class="string">&quot;script&quot;</span>),</span></span><br><span class="line"><span class="javascript">      f = <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      s = d.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>],</span></span><br><span class="line"><span class="javascript">      a;</span></span><br><span class="line"><span class="javascript">    h.className += <span class="string">&quot; wf-loading&quot;</span>;</span></span><br><span class="line"><span class="javascript">    tk.src = <span class="string">&quot;https://use.typekit.net/&quot;</span> + config.kitId + <span class="string">&quot;.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">    tk.async = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    tk.onload = tk.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      a = <span class="built_in">this</span>.readyState;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (f || (a &amp;&amp; a != <span class="string">&quot;complete&quot;</span> &amp;&amp; a != <span class="string">&quot;loaded&quot;</span>)) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">      f = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">clearTimeout</span>(t);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">        Typekit.load(config);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    s.parentNode.insertBefore(tk, s);</span></span><br><span class="line"><span class="javascript">  &#125;)(<span class="built_in">document</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>放到自己博客源码的 header.ejs 文件里面任意位置就完成了。</p><h2 id="修改博客字体配置"><a href="#修改博客字体配置" class="headerlink" title="修改博客字体配置"></a>修改博客字体配置</h2><p>字体名称需要回到刚才的 Web Projects 页面，在 hexo 项目中点击右上角的 <code>Edit Project &lt;</code> 按钮：<br><img src="06.png" alt="06.png"><br>复制其中的 <code>font-family: source-han-serif-sc, serif;</code>，即 css 的字体名称：<br><img src="07.png" alt="07.png"><br>然后修改博客的字体配置就完了。<br>各个博客主题修改字体的方式略有不同，如果是使用的<a href="https://github.com/liuzhuoming23/hexo-theme-cactus">cactus</a>，那就在 themes/cactus/source/css/_variables.styl 文件内找到字体设置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;给个人博客换思源字体遇到很多坑，在这里记录一下。&lt;br&gt;因为 Google Fonts 没有收录思源系列字体，所以在这里使用 Adobe Typekit 作为在线字体库。&lt;/p&gt;</summary>
    
    
    
    <category term="Tool" scheme="https://blog.futurenotfound.top/categories/Tool/"/>
    
    <category term="Adobe Typekit" scheme="https://blog.futurenotfound.top/categories/Tool/Adobe-Typekit/"/>
    
    
    <category term="Adobe Typekit" scheme="https://blog.futurenotfound.top/tags/Adobe-Typekit/"/>
    
    <category term="Font" scheme="https://blog.futurenotfound.top/tags/Font/"/>
    
  </entry>
  
  <entry>
    <title>Java8比较器Comparator的多条件排序用法</title>
    <link href="https://blog.futurenotfound.top/2020/09/11/Java8%E6%AF%94%E8%BE%83%E5%99%A8Comparator%E7%9A%84%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F%E7%94%A8%E6%B3%95/"/>
    <id>https://blog.futurenotfound.top/2020/09/11/Java8%E6%AF%94%E8%BE%83%E5%99%A8Comparator%E7%9A%84%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F%E7%94%A8%E6%B3%95/</id>
    <published>2020-09-11T13:44:45.000Z</published>
    <updated>2021-07-20T22:29:57.819Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中经常遇到需要多字段排序的情况，比如某班级同学成绩按照总分降序排列，总分同分的按照姓名字母表顺序升序排列，其实现方式如下：</p><span id="more"></span><h2 id="实体集合排序"><a href="#实体集合排序" class="headerlink" title="实体集合排序"></a>实体集合排序</h2><p>先创建一个学生实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer score;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再在测试类里面构建一个学生集合：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是匿名内部类初始化方式，不懂得回去学java基础，没搞错 《30天精通Java》 之类的垃圾骗钱书的前几页就有</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;Az&quot;</span>));</span><br><span class="line">    add(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;Aa&quot;</span>));</span><br><span class="line">    add(<span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;Bb&quot;</span>));</span><br><span class="line">    add(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;Ab&quot;</span>));</span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure><p>再创建一个 main 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//排序器，采用函数式构建排序器的前提是字段类型已经正确实现了Comparable接口</span></span><br><span class="line">    Comparator&lt;User&gt; userComparator = Comparator</span><br><span class="line">        <span class="comment">//第一个字段升序排列</span></span><br><span class="line">        .comparing(User::getScore)</span><br><span class="line">        <span class="comment">//将上面的排序方式反转为降序排序</span></span><br><span class="line">        .reversed()</span><br><span class="line">        <span class="comment">//第二个字段排升序排列</span></span><br><span class="line">        .thenComparing(User::getName);</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    userList.sort(userComparator);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并执行，得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[User&#123;id=3, name=<span class="string">&#x27;Bb&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Aa&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Ab&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Az&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><p>可见排序结果是正确的。</p><h2 id="Map-集合排序"><a href="#Map-集合排序" class="headerlink" title="Map 集合排序"></a>Map 集合排序</h2><p>有些时候可能需要排序 Map 集合（<code>List&lt;Map&lt;String,Object&gt;&gt;</code>），字段和排序规则和像上面一样：</p><p>先在测试类里面构建一个学生 Map 集合：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Map&lt;String, Object&gt;&gt; mapList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="keyword">new</span> HashMap&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;score&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Az&quot;</span>);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    add(<span class="keyword">new</span> HashMap&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;score&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;A2&quot;</span>);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    add(<span class="keyword">new</span> HashMap&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;score&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Bb&quot;</span>);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    add(<span class="keyword">new</span> HashMap&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;score&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Ab&quot;</span>);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure><p>再创建一个 main 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Map&lt;String, Object&gt;&gt; userComparator = Comparator</span><br><span class="line">        <span class="comment">//注意多字段排序时，这里的 (Map&lt;String, Object&gt; map)-&gt; 不能省略为 map-&gt;，会导致编译器无法自动类型判断而报错</span></span><br><span class="line">        .comparing((Map&lt;String, Object&gt; map) -&gt; (Integer) map.get(<span class="string">&quot;score&quot;</span>)).reversed()</span><br><span class="line">        .thenComparing((Map&lt;String, Object&gt; map) -&gt; (String) map.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">    mapList.sort(userComparator);</span><br><span class="line">    System.out.println(mapList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并执行，得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[User&#123;id=3, name=<span class="string">&#x27;Bb&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Aa&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Ab&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Az&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><p>可见排序结果是正确的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在项目中经常遇到需要多字段排序的情况，比如某班级同学成绩按照总分降序排列，总分同分的按照姓名字母表顺序升序排列，其实现方式如下：&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.futurenotfound.top/categories/Java/"/>
    
    
    <category term="Java" scheme="https://blog.futurenotfound.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于Github Actions实现Hexo博客自动切换主题</title>
    <link href="https://blog.futurenotfound.top/2020/07/20/%E7%AE%80%E8%BF%B0%E5%9F%BA%E4%BA%8EGithub-Actions-Pages%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Hexo%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>https://blog.futurenotfound.top/2020/07/20/%E7%AE%80%E8%BF%B0%E5%9F%BA%E4%BA%8EGithub-Actions-Pages%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Hexo%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2%E7%9A%84%E6%96%B9%E5%BC%8F/</id>
    <published>2020-07-20T13:08:24.000Z</published>
    <updated>2021-07-20T22:29:57.863Z</updated>
    
    <content type="html"><![CDATA[<p>前提条件：</p><ol><li>已经熟悉基于 Github Actions/Pages 的 Hexo 博客自动构建发布并已经有实践</li><li>使用的博客主题可以使用主题配置文件_config.yml 切换配色，比如：<a href="https://github.com/liuzhuoming23/hexo-theme-cactus">hexo-theme-cactus</a></li></ol><p>总体上来讲是基于 Github Actions 的 schedule 触发器来实现的。</p><span id="more"></span><h2 id="创建白天-黑夜主题"><a href="#创建白天-黑夜主题" class="headerlink" title="创建白天/黑夜主题"></a>创建白天/黑夜主题</h2><p>略</p><h2 id="在-workflows-创建两个-schedule-触发器"><a href="#在-workflows-创建两个-schedule-触发器" class="headerlink" title="在 workflows 创建两个 schedule 触发器"></a>在 workflows 创建两个 schedule 触发器</h2><ol><li>到点触发黑夜模式</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">switch</span> <span class="string">dark</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># UTC时间，在北京时间基础上-8小时</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;30 11 * * *&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">1</span><span class="string">.</span> <span class="string">git</span> <span class="string">checkout...</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">2</span><span class="string">.</span> <span class="string">setup</span> <span class="string">nodejs...</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">3</span><span class="string">.</span> <span class="string">install</span> <span class="string">hexo-cli...</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">hexo-cli</span> <span class="string">-g</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">4</span><span class="string">.</span> <span class="string">switch</span> <span class="string">theme</span> <span class="string">and</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">and</span> <span class="string">generate</span> <span class="string">public</span> <span class="string">files</span> <span class="string">and</span> <span class="string">deploy</span> <span class="string">public</span> <span class="string">files</span> <span class="string">to</span> <span class="string">&#x27;liuzhuoming23.github.io&#x27;</span> <span class="string">repo...</span></span><br><span class="line">        <span class="comment"># 使用sed命令替换主题目录下面的_config.yml文件关于主题的配置并构建发布，如果想要切换的主题名和当前主题名一致，则不会切换</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;xxx&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;416561115@qq.com&quot;</span></span><br><span class="line"><span class="string">          sed -i &#x27;s/colorscheme: light/colorscheme: dark/&#x27; themes/cactus/_config.yml</span></span><br><span class="line"><span class="string">          hexo clean &amp;&amp; hexo d -g</span></span><br></pre></td></tr></table></figure><p>保存为 switch_dark.yml 到/.github/workflows/目录下。</p><ol start="2"><li>到点触发白天模式</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">switch</span> <span class="string">white</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 23 * * *&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">1</span><span class="string">.</span> <span class="string">git</span> <span class="string">checkout...</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">2</span><span class="string">.</span> <span class="string">setup</span> <span class="string">nodejs...</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">3</span><span class="string">.</span> <span class="string">install</span> <span class="string">hexo-cli...</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">hexo-cli</span> <span class="string">-g</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">4</span><span class="string">.</span> <span class="string">switch</span> <span class="string">theme</span> <span class="string">and</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">and</span> <span class="string">generate</span> <span class="string">public</span> <span class="string">files</span> <span class="string">and</span> <span class="string">deploy</span> <span class="string">public</span> <span class="string">files</span> <span class="string">to</span> <span class="string">&#x27;liuzhuoming23.github.io&#x27;</span> <span class="string">repo...</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;xxx&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;416561115@qq.com&quot;</span></span><br><span class="line"><span class="string">          sed -i &#x27;s/colorscheme: dark/colorscheme: light/&#x27; themes/cactus/_config.yml</span></span><br><span class="line"><span class="string">          hexo clean &amp;&amp; hexo d -g</span></span><br></pre></td></tr></table></figure><p>也保存为 switch_white.yml 到/.github/workflows/目录下。</p><p>然后提交 workflows 相关代码。等到设置的时间，就会自动触发切换主题模式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前提条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;已经熟悉基于 Github Actions/Pages 的 Hexo 博客自动构建发布并已经有实践&lt;/li&gt;
&lt;li&gt;使用的博客主题可以使用主题配置文件_config.yml 切换配色，比如：&lt;a href=&quot;https://github.com/liuzhuoming23/hexo-theme-cactus&quot;&gt;hexo-theme-cactus&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总体上来讲是基于 Github Actions 的 schedule 触发器来实现的。&lt;/p&gt;</summary>
    
    
    
    <category term="Tool" scheme="https://blog.futurenotfound.top/categories/Tool/"/>
    
    <category term="Github" scheme="https://blog.futurenotfound.top/categories/Tool/Github/"/>
    
    
    <category term="Hexo" scheme="https://blog.futurenotfound.top/tags/Hexo/"/>
    
    <category term="Github Actions" scheme="https://blog.futurenotfound.top/tags/Github-Actions/"/>
    
  </entry>
  
  <entry>
    <title>简述手机扫码登陆原理</title>
    <link href="https://blog.futurenotfound.top/2020/03/10/%E7%AE%80%E8%BF%B0%E6%89%8B%E6%9C%BA%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86%E5%8E%9F%E7%90%86/"/>
    <id>https://blog.futurenotfound.top/2020/03/10/%E7%AE%80%E8%BF%B0%E6%89%8B%E6%9C%BA%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86%E5%8E%9F%E7%90%86/</id>
    <published>2020-03-10T08:25:59.000Z</published>
    <updated>2021-07-20T22:29:57.863Z</updated>
    
    <content type="html"><![CDATA[<p>以前以为微信、qq 扫码登陆实现难度很高，一定是基于 WebSocket 等长连接技术实现的，结果最近看了一下 qq 的扫码登陆请求发现完全不是那一回事，原理相当简单。</p><span id="more"></span><h2 id="简述流程"><a href="#简述流程" class="headerlink" title="简述流程"></a>简述流程</h2><p>整个扫码登陆可以简化为 5 步：</p><ol><li>浏览器请求到二维码（二维码包含一个二维码标识，该二维码标志存在 Redis 中）</li><li>手机扫码，请求服务器该二维码标志是否已过期，返回授权页面</li><li>用户确认授权则将二维码标志和用户标识传入服务器，判断二维码标志和用户标识是否有效，有效则生成授权 token，并返回授权结果到手机端</li><li>浏览器循环请求服务器获取授权状态，如果已扫码则返回已扫码状态，如果已授权则返回授权 token</li><li>浏览器携带授权 token 请求限制资源</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;以前以为微信、qq 扫码登陆实现难度很高，一定是基于 WebSocket 等长连接技术实现的，结果最近看了一下 qq 的扫码登陆请求发现完全不是那一回事，原理相当简单。&lt;/p&gt;</summary>
    
    
    
    <category term="Tool" scheme="https://blog.futurenotfound.top/categories/Tool/"/>
    
    <category term="Redis" scheme="https://blog.futurenotfound.top/categories/Tool/Redis/"/>
    
    
    <category term="Redis" scheme="https://blog.futurenotfound.top/tags/Redis/"/>
    
    <category term="QRCode" scheme="https://blog.futurenotfound.top/tags/QRCode/"/>
    
  </entry>
  
  <entry>
    <title>授权中心-Oauth2+JWT+HOTP</title>
    <link href="https://blog.futurenotfound.top/2020/02/26/Spring-Cloud-Greenwich-SR2-15/"/>
    <id>https://blog.futurenotfound.top/2020/02/26/Spring-Cloud-Greenwich-SR2-15/</id>
    <published>2020-02-26T09:31:47.000Z</published>
    <updated>2021-07-20T22:29:57.827Z</updated>
    
    <content type="html"><![CDATA[<p>本章开始给之前的 oauth2 服务添加短信验证码鉴权功能。<br><em>这里用上上一章《注册中心/配置中心-Nacos》和上一章《HOTP&amp;TOTP（短信验证码&amp;两步验证码）》的代码开始修改。</em></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;本章开始给之前的 oauth2 服务添加短信验证码鉴权功能。&lt;br&gt;&lt;em&gt;这里用上上一章《注册中心/配置中心-Nacos》和上一章《HOTP&amp;amp;TOTP（短信验证码&amp;amp;两步验证码）》的代码开始修改。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://blog.futurenotfound.top/categories/Java/"/>
    
    <category term="Spring" scheme="https://blog.futurenotfound.top/categories/Java/Spring/"/>
    
    <category term="Spring Cloud" scheme="https://blog.futurenotfound.top/categories/Java/Spring/Spring-Cloud/"/>
    
    
    <category term="Spring Cloud Oauth2" scheme="https://blog.futurenotfound.top/tags/Spring-Cloud-Oauth2/"/>
    
    <category term="JWT" scheme="https://blog.futurenotfound.top/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>短信验证码&amp;两步验证码（HOTP&amp;TOTP）</title>
    <link href="https://blog.futurenotfound.top/2020/01/11/hotp-totp/"/>
    <id>https://blog.futurenotfound.top/2020/01/11/hotp-totp/</id>
    <published>2020-01-11T08:03:19.000Z</published>
    <updated>2021-07-20T22:29:57.843Z</updated>
    
    <content type="html"><![CDATA[<p>两者都来自于 RFC 文档，文档地址分别是：</p><ul><li>基于 HMAC 的一次性密码<br> <a href="https://www.rfc-editor.org/rfc/rfc4226.txt">RFC 4226-HOTP: An HMAC-Based One-Time Password Algorithm</a></li><li>基于时间的一次性密码<br> <a href="https://www.rfc-editor.org/rfc/rfc6238.txt">rfc 6238-TOTP: Time-Based One-Time Password Algorithm</a></li></ul><p>两者区别就是后者内部可以实现秒级别的密码过期功能。<br><em>HMAC 是什么暂且不谈，有兴趣自行了解。</em></p><span id="more"></span><h2 id="HOTP"><a href="#HOTP" class="headerlink" title="HOTP"></a>HOTP</h2><p>这个算法 RFC 文档的实现是基于 Java 的，我们正好 cv 过来创建 HOTP 工具类，不需要做任何修改（**<a href="HOTP.java">点击下载</a>**）。<br>然后创建 Main 类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        otp(secret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户密钥，可以基于用户名、用户id等生成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String secret = <span class="string">&quot;liuzhuoming&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">otp</span><span class="params">(String secret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String otpaStr = HOTP.generateOTP(secret.getBytes(), i, <span class="number">8</span>, <span class="keyword">true</span>, <span class="number">0</span>);</span><br><span class="line">                System.out.println(otpaStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | InvalidKeyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 main 方法得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">905370920</span><br><span class="line">759986888</span><br><span class="line">113495253</span><br><span class="line">454957150</span><br><span class="line">967146499</span><br><span class="line">261543763</span><br><span class="line">615577400</span><br><span class="line">378770341</span><br><span class="line">267217859</span><br><span class="line">504660382</span><br></pre></td></tr></table></figure><p>其中<code>HOTP.generateOTP()</code>方法的参数<code>i</code>是本地模拟的一个每次请求值都不同的变量，第三个参数是验证码的长度，后面两个参数可以忽略。<br>可见随着<code>i</code>的变化验证码也跟着变化，大概符合我们短信验证码登录的需求，做法就是把<code>i</code>放在 Redis（或 Mysql）并取值自增，等到校验的时候从 Redis（或 Mysql）取值不自增并-1，然后重新生成验证码并 equals。<br><em>好像自己写一个<code>0~9A~Za~z</code>的随机验证码存到 Redis，设置过期时间，校验的时候直接拿出来 equals 更直观啊。当然这样做安全性就差了一点。</em></p><h2 id="TOTP"><a href="#TOTP" class="headerlink" title="TOTP"></a>TOTP</h2><p>当年说服同事用这个算法生成短信验证码并校验，忽悠他说只需要在 Redis 存一个时间戳就可以了，比直接存验证码不知道安全到哪里去了。<br>现在想想当然不合适了，因为 TOTP 本身内部就有密码过期功能，和 Redis 的过期时间功能完美重复，像这种基于时间的验证码最适合的场景还是两步验证码的生成，比如早已淘汰的网银密保或者当前正火的谷歌/微软两步验证 APP 或者 Steam 账号密保等。</p><p>这个算法 RFC 文档的实现也是基于 Java 的，我们正好 cv 过来创建 TOTP 工具类，并删除 main 方法，添加一个 String 转 HexString 的方法（**<a href="TOTP.java">点击下载</a>**）。<br>然后创建 Main 类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        totp(secret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户密钥，可以基于用户名、用户id等生成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String secret = <span class="string">&quot;liuzhuoming&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算验证码的时间起点（单位秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> T0 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//验证码过期时间间隔（单位秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> X = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">totp</span><span class="params">(String secret)</span> </span>&#123;</span><br><span class="line">        String seed = TOTP.str2HexStr(secret);</span><br><span class="line"></span><br><span class="line">        StringBuilder steps;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        df.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;UTC&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//当前时间</span></span><br><span class="line">                LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">                <span class="keyword">long</span> T = (localDateTime.toEpochSecond(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)) - T0) / X;</span><br><span class="line">                steps = <span class="keyword">new</span> StringBuilder(Long.toHexString(T).toUpperCase());</span><br><span class="line">                <span class="keyword">while</span> (steps.length() &lt; <span class="number">16</span>) steps.insert(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                System.out.println(localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)) + <span class="string">&quot; &gt;&gt;&gt; &quot;</span></span><br><span class="line">                        + TOTP.generateTOTP(seed, steps.toString(), <span class="string">&quot;6&quot;</span>, <span class="string">&quot;HmacSHA256&quot;</span>));</span><br><span class="line">                <span class="comment">//模拟两步验证器的按秒计算验证码</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 main 方法得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2020-01-11 16:52:34 &gt;&gt;&gt; 625258</span><br><span class="line">2020-01-11 16:52:35 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:36 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:37 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:38 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:39 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:40 &gt;&gt;&gt; 280244</span><br><span class="line">2020-01-11 16:52:41 &gt;&gt;&gt; 280244</span><br><span class="line">2020-01-11 16:52:42 &gt;&gt;&gt; 280244</span><br><span class="line">2020-01-11 16:52:43 &gt;&gt;&gt; 280244</span><br></pre></td></tr></table></figure><p>可以看到验证码五秒后就过期生成新的验证码，旧的验证码就无法验证了，至于第一个验证码只过了一秒就过期是因为<code>(当前时间-时间起点)/时间间隔</code>结果不是 0 的原因。<br>大概使用方法就是在 Redis（或 Mysql）存一个时间戳，用户请求两步验证器的时候就根据这个时间戳做时间原点生成验证码并返回，校验的时候根据这个时间戳做时间原点生成验证码并 equals。<br>要是是离线的验证器，比如当年的网银实体密保器，快没电的时候必须去银行更换电池，要是自己更换电池验证码就不正确了，其实就是密保器断电之后时间原点重置为开机时间就和服务器保存的时间原点（其实也是密保器发给你的时候的开机时间）不一致了，这时候只要去银行同步一下密保器的时间就可以了。</p><h3 id="显示验证码过期倒计时"><a href="#显示验证码过期倒计时" class="headerlink" title="显示验证码过期倒计时"></a>显示验证码过期倒计时</h3><p>在 Steam 账号密保或者谷歌/微软两步验证上我们会看到会提示验证码的过期秒数，实际上也很容易获取，就是<code>时间间隔-(当前时间-时间原点)%时间间隔</code>的结果，修改 Main 类为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        totp(secret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户密钥，可以基于用户名、用户id等生成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String secret = <span class="string">&quot;liuzhuoming&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算验证码的时间起点（单位秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> T0 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//验证码过期时间间隔（单位秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> X = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">totp</span><span class="params">(String secret)</span> </span>&#123;</span><br><span class="line">        String seed = TOTP.str2HexStr(secret);</span><br><span class="line"></span><br><span class="line">        StringBuilder steps;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        df.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;UTC&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">                <span class="keyword">long</span> T = (localDateTime.toEpochSecond(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)) - T0) / X;</span><br><span class="line">                <span class="comment">//计算验证码过期剩余时间</span></span><br><span class="line">                <span class="keyword">long</span> remainSeconds = X - ((localDateTime.toEpochSecond(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)) - T0) % X);</span><br><span class="line">                steps = <span class="keyword">new</span> StringBuilder(Long.toHexString(T).toUpperCase());</span><br><span class="line">                <span class="keyword">while</span> (steps.length() &lt; <span class="number">16</span>) steps.insert(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                System.out.println(localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)) + <span class="string">&quot; &gt;&gt;&gt; &quot;</span></span><br><span class="line">                        + <span class="string">&quot;remain &quot;</span> + remainSeconds + <span class="string">&quot;s &gt;&gt;&gt; &quot;</span></span><br><span class="line">                        + TOTP.generateTOTP(seed, steps.toString(), <span class="string">&quot;6&quot;</span>, <span class="string">&quot;HmacSHA256&quot;</span>));</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 main 方法得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2020-01-12 13:51:07 &gt;&gt;&gt; remain 3s &gt;&gt;&gt; 720175</span><br><span class="line">2020-01-12 13:51:08 &gt;&gt;&gt; remain 2s &gt;&gt;&gt; 720175</span><br><span class="line">2020-01-12 13:51:09 &gt;&gt;&gt; remain 1s &gt;&gt;&gt; 720175</span><br><span class="line">2020-01-12 13:51:10 &gt;&gt;&gt; remain 5s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:11 &gt;&gt;&gt; remain 4s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:12 &gt;&gt;&gt; remain 3s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:13 &gt;&gt;&gt; remain 2s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:14 &gt;&gt;&gt; remain 1s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:15 &gt;&gt;&gt; remain 5s &gt;&gt;&gt; 249852</span><br><span class="line">2020-01-12 13:51:16 &gt;&gt;&gt; remain 4s &gt;&gt;&gt; 249852</span><br></pre></td></tr></table></figure><p>可见其中<code>remain</code>的值符合验证码到期剩余秒数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;两者都来自于 RFC 文档，文档地址分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 HMAC 的一次性密码&lt;br&gt; &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc4226.txt&quot;&gt;RFC 4226-HOTP: An HMAC-Based One-Time Password Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于时间的一次性密码&lt;br&gt; &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc6238.txt&quot;&gt;rfc 6238-TOTP: Time-Based One-Time Password Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两者区别就是后者内部可以实现秒级别的密码过期功能。&lt;br&gt;&lt;em&gt;HMAC 是什么暂且不谈，有兴趣自行了解。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="https://blog.futurenotfound.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="算法" scheme="https://blog.futurenotfound.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://blog.futurenotfound.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://blog.futurenotfound.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="验证码" scheme="https://blog.futurenotfound.top/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
</feed>
