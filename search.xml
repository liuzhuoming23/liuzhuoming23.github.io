<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用脚本或配置收集</title>
      <link href="/2021/07/20/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E6%94%B6%E8%97%8F/"/>
      <url>/2021/07/20/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E6%94%B6%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<p>收集一下常用脚本。</p><span id="more"></span><h2 id="Gitlab-CI-gitlab-ci-yml-实现提交代码到-Git-自动创建-Tag"><a href="#Gitlab-CI-gitlab-ci-yml-实现提交代码到-Git-自动创建-Tag" class="headerlink" title="Gitlab CI .gitlab-ci.yml 实现提交代码到 Git 自动创建 Tag"></a>Gitlab CI <code>.gitlab-ci.yml</code> 实现提交代码到 Git 自动创建 Tag</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create_tag</span></span><br><span class="line"></span><br><span class="line"><span class="attr">create_tag:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">create_tag</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;liuzhuoming@testmail.com;&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;liuzhuoming&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">origin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">origin</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">--tags</span> <span class="string">-f</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">remote</span> <span class="string">set-url</span> <span class="string">origin</span> <span class="string">http://NAME:SECRET@git.xx.com/project/test-project.git</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">-l</span> <span class="string">-n</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tag_name=`date</span> <span class="string">&quot;+%Y%m%d%H%M&quot;</span><span class="string">`</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">$&#123;tag_name&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">$&#123;tag_name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Springboot-项目重启脚本"><a href="#Springboot-项目重启脚本" class="headerlink" title="Springboot 项目重启脚本"></a>Springboot 项目重启脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PROJECT_NAME=test-api</span><br><span class="line">PROJECT_VERSION=1.0-SNAPSHOT</span><br><span class="line">PROJECT_DIR=/home/lzm/project/2/</span><br><span class="line">PID=$(ps -ef | grep <span class="variable">$PROJECT_NAME</span>-*.jar | grep -v grep | awk <span class="string">&#x27;&#123; print $2 &#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$PID</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;启动服务&#x27;</span></span><br><span class="line">    nohup java -jar $PROJECT_DIR<span class="variable">$PROJECT_NAME</span>-<span class="variable">$PROJECT_VERSION</span>.jar --spring.profiles.active=dev &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;重启服务&#x27;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="built_in">kill</span> <span class="variable">$PID</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br><span class="line">    nohup java -jar $PROJECT_DIR<span class="variable">$PROJECT_NAME</span>-<span class="variable">$PROJECT_VERSION</span>.jar --spring.profiles.active=dev &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="Logback-配置压缩历史日志文件"><a href="#Logback-配置压缩历史日志文件" class="headerlink" title="Logback 配置压缩历史日志文件"></a>Logback 配置压缩历史日志文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按天生成日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;logFile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--此处$&#123;user.dir&#125;指的是执行启动命令的位置/工作目录，并非项目所在位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;user.dir&#125;/logs/project-name/logback.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--生成日志文件名称--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/project-name/%d&#123;yyyy-MM-dd&#125;.log.gz<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;p_file&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-服务初始化完成事件监听"><a href="#SpringBoot-服务初始化完成事件监听" class="headerlink" title="SpringBoot 服务初始化完成事件监听"></a>SpringBoot 服务初始化完成事件监听</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@Order</span></span><br><span class="line"><span class="meta">@EventListener(WebServerInitializedEvent.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterStart</span><span class="params">(WebServerInitializedEvent event)</span> </span>&#123;</span><br><span class="line">    Environment environment = event.getApplicationContext().getEnvironment();</span><br><span class="line">    String appName = environment.getProperty(<span class="string">&quot;spring.application.name&quot;</span>).toUpperCase();</span><br><span class="line">    <span class="keyword">int</span> localPort = event.getWebServer().getPort();</span><br><span class="line">    String profile = StringUtils.arrayToCommaDelimitedString(environment.getActiveProfiles());</span><br><span class="line">    log.info(<span class="string">&quot;---[&#123;&#125;]---启动完成，当前使用的端口:[&#123;&#125;]，环境变量:[&#123;&#125;]---&quot;</span>, appName, localPort, profile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Swagger-配置全局授权"><a href="#Swagger-配置全局授权" class="headerlink" title="Swagger 配置全局授权"></a>Swagger 配置全局授权</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.SecurityReference;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;local&quot;, &quot;test&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .securitySchemes(securitySchemes())</span><br><span class="line">                .securityContexts(securityContexts());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;API接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;API接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title">securitySchemes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> ApiKey(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;token&quot;</span>, <span class="string">&quot;header&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title">securityContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Lists.newArrayList(</span><br><span class="line">                SecurityContext.builder()</span><br><span class="line">                        .securityReferences(defaultAuth())</span><br><span class="line">                        .build()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[]&#123;authorizationScope&#125;;</span><br><span class="line">        <span class="keyword">return</span> Lists.newArrayList(</span><br><span class="line">                <span class="keyword">new</span> SecurityReference(<span class="string">&quot;token&quot;</span>, authorizationScopes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ant-匹配用户路由权限"><a href="#Ant-匹配用户路由权限" class="headerlink" title="Ant 匹配用户路由权限"></a>Ant 匹配用户路由权限</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;LoginFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不登录就可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; NOT_LOGIN_URL = List.of(</span><br><span class="line">            <span class="comment">//static</span></span><br><span class="line">            <span class="string">&quot;css/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;js/**&quot;</span>,</span><br><span class="line">            <span class="comment">//swagger</span></span><br><span class="line">            <span class="string">&quot;swagger-ui.html**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;swagger-resources**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;v2/api-docs**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;webjars/springfox-swagger-ui/**&quot;</span>,</span><br><span class="line">            <span class="comment">//other</span></span><br><span class="line">            <span class="comment">//登录</span></span><br><span class="line">            <span class="string">&quot;login/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录后无需权限配置就可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; LOGIN_URL = List.of(</span><br><span class="line">            <span class="comment">//当前登录人的菜单列表</span></span><br><span class="line">            <span class="string">&quot;menu/list&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        String url = req.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matchAny(NOT_LOGIN_URL, url)) &#123;</span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = req.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="comment">//jwt解析</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = JwtUtil.getUser(token);</span><br><span class="line">            <span class="comment">//存入线程变量</span></span><br><span class="line">            CurrentLoginUser.set(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Result result = <span class="keyword">new</span> Result();</span><br><span class="line">            result.setMsg(<span class="string">&quot;token不存在或者已过期&quot;</span>);</span><br><span class="line">            OutputStream outputStream = resp.getOutputStream();</span><br><span class="line">            outputStream.write(JsonUtil.toJSONString(result).getBytes());</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (matchAny(LOGIN_URL, url)) &#123;</span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一级菜单</span></span><br><span class="line">        List&lt;MenuTree&gt; menuTreeList = ...;</span><br><span class="line">        <span class="comment">//二级菜单</span></span><br><span class="line">        List&lt;MenuTree&gt; menuTreeLevel2List = menuTreeList.stream()</span><br><span class="line">                .flatMap(menuTree -&gt; menuTree.getMenus().stream())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//三级菜单</span></span><br><span class="line">        List&lt;MenuTree&gt; menuTreeLevel3List = menuTreeLevel2List.stream()</span><br><span class="line">                .flatMap(menuTree -&gt; menuTree.getMenus().stream())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        List&lt;MenuTree&gt; allMenuTree = <span class="keyword">new</span> ArrayList&lt;&gt;(menuTreeList);</span><br><span class="line">        allMenuTree.addAll(menuTreeLevel2List);</span><br><span class="line">        allMenuTree.addAll(menuTreeLevel3List);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; allMenuServerPath = allMenuTree.stream()</span><br><span class="line">                .flatMap(menuTree -&gt; Arrays.stream(menuTree.getUrls().split(<span class="string">&quot;,&quot;</span>)))</span><br><span class="line">                .filter(StringUtils::isNotBlank)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户是否存在该路径请求权限</span></span><br><span class="line">        <span class="keyword">if</span> (!matchAny(allMenuServerPath, url)) &#123;</span><br><span class="line">            Result result = <span class="keyword">new</span> Result();</span><br><span class="line">            result.setMsg(String.format(<span class="string">&quot;该用户没有%s接口访问权限&quot;</span>, url));</span><br><span class="line">            OutputStream outputStream = resp.getOutputStream();</span><br><span class="line">            outputStream.write(JsonUtil.toJSONString(result).getBytes());</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断url请求是否配置在patterns列表中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matchAny</span><span class="params">(List&lt;String&gt; patterns, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="keyword">for</span> (String pattern : patterns) &#123;</span><br><span class="line">            <span class="keyword">if</span> (url.startsWith(<span class="string">&quot;/&quot;</span>)) url = url.substring(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (pattern.startsWith(<span class="string">&quot;/&quot;</span>)) pattern = pattern.substring(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (antPathMatcher.match(pattern, url)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NextCloud 优化（Docker Compose 启动）</title>
      <link href="/2021/07/18/NextCloud-%E4%BC%98%E5%8C%96%EF%BC%88Docker-Compose-%E5%90%AF%E5%8A%A8%EF%BC%89/"/>
      <url>/2021/07/18/NextCloud-%E4%BC%98%E5%8C%96%EF%BC%88Docker-Compose-%E5%90%AF%E5%8A%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>NextCloud 简单优化。</p><span id="more"></span><h2 id="添加-Redis-缓存"><a href="#添加-Redis-缓存" class="headerlink" title="添加 Redis 缓存"></a>添加 Redis 缓存</h2><p>目的： 提升首页列表加载速度（手机 App 优化明显）</p><p>首先修改 docker-compose.yml 文件为（原文件来自 NextCloud 官网文档）：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">nextcloud:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--transaction-isolation=READ-COMMITTED</span> <span class="string">--binlog-format=ROW</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=nextcloud</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nextcloud</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cache</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nextcloud:/var/www/html</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=nextcloud</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_HOST=db</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./datadir:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./logs:/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br></pre></td></tr></table></figure><p>然后<code>docker exec -it nextcloud_app_1 bash</code>进入容器中修改<code>config/config.php</code> 文件，找到对应代码，修改为：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;memcache.local&#x27;</span> =&gt; <span class="string">&#x27;\\OC\\Memcache\\APCu&#x27;</span>,</span><br><span class="line"><span class="comment">//开始修改</span></span><br><span class="line"><span class="string">&#x27;memcache.locking&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;redis&#x27;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;cache&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;port&#x27;</span> =&gt; <span class="string">&#x27;6379&#x27;</span>,</span><br><span class="line">),</span><br><span class="line"><span class="comment">//修改结束</span></span><br><span class="line"><span class="string">&#x27;apps_paths&#x27;</span> =&gt;</span><br></pre></td></tr></table></figure><p>如果提示找不到 vi 或者 nano 命令，自己<code>apt install nano</code>就好了。</p><h2 id="后台任务修改为-cron-执行"><a href="#后台任务修改为-cron-执行" class="headerlink" title="后台任务修改为 cron 执行"></a>后台任务修改为 cron 执行</h2><p>目的： 默认的页面 AJAX 执行方式效率过低，并且不打开首页就无法执行</p><p>在宿主机 root 用户下执行<code>crontab -e</code>添加 cron 语句<code>*/5 * * * * docker exec -u www-data nextcloud_app_1 php -f cron.php</code>，并在 NextCloud 设置页面-基础设置 里面修改后台执行任务方式为 CRON。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> NextCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NextCloud </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS自用软件推荐</title>
      <link href="/2021/07/08/MacOS%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
      <url>/2021/07/08/MacOS%E8%87%AA%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<p>大多为开源，免费或者买断制软件。<br><strong>订阅制收费，可恶！</strong></p><p><em>本文所提应用</em><br><em>如果没特意标注，皆为 brew 安装方式。</em><br><em>如果没特意标注，皆为完全免费或者基础功能免费。</em><br><em>如果没特意标注，皆为无广告。</em></p><span id="more"></span><h2 id="oh-my-zsh-plugins"><a href="#oh-my-zsh-plugins" class="headerlink" title="oh-my-zsh plugins"></a>oh-my-zsh plugins</h2><p>oh-my-zsh 是一个对 zsh 终端命令工具的扩展，添加了主题功能和插件功能。</p><p>官方推荐安装方式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>国内估计是无法直接访问的，可以试试 fork 到国内 gitee 替换为 gitee 链接再进行下载。</p><p>推荐一些自用插件，主题就不推荐了，越改越丑，还是<strong>默认主题</strong>最耐看。</p><p>oh-my-zsh 插件添加方式：在终端输入<code>open ~/.zshrc</code>打开 zsh 配置文件，找到<code>plugins=()</code>这一行，将插件名称按照空格分割或者换行的方式填入即可。最后记得<code>source ~/.zshrc</code>使配置生效。</p><p>插件分为 oh-my-zsh 自带和非自带，非自带需要自行安装，例如<code>brew install</code>或者自己在 github 找安装包。<strong>非自带插件名称后面会标注(*)。</strong></p><p>我自己的插件列表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">git</span><br><span class="line">rand-quote</span><br><span class="line">extract</span><br><span class="line">autojump</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>主要功能为简化 git 命令，例如 <code>git add --all</code> 可以简化为 <code>gaa</code> 等，其本质是使用 alias 对命令定义的一系列别名，完整目录可输入命令<code>cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh</code>来查看 git 插件的配置文件。</p><h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><p>主要功能为简化解压命令，不管是 tar 还是 zip，都可以使用<code>x name.zip</code>或<code>x name.tar</code>来解压。</p><h3 id="autojump（-）"><a href="#autojump（-）" class="headerlink" title="autojump（*）"></a>autojump（*）</h3><p>简化 cd 操作，类似<code>cd /Users/yourname/github</code>这样的操作可以简化为<code>j github</code>来实现，似乎需要<code>history</code>中出现过的路径才有效。</p><h3 id="zsh-syntax-highlighting（-）"><a href="#zsh-syntax-highlighting（-）" class="headerlink" title="zsh-syntax-highlighting（*）"></a>zsh-syntax-highlighting（*）</h3><p>高亮命令，如果命令存在则会显示绿色，否则显示红色。命令存在与否跟安装的软件及 alias 有关。</p><h3 id="zsh-autosuggestions（-）"><a href="#zsh-autosuggestions（-）" class="headerlink" title="zsh-autosuggestions（*）"></a>zsh-autosuggestions（*）</h3><p>命令补全建议，会根据<code>history</code>来匹配你当前输入的命令，如果匹配则会将剩余部分以灰色显示，需要补全只需要按一下键盘右键即可。如果有多个匹配结果，会显示最后执行的命令。</p><h3 id="rand-quote（-）"><a href="#rand-quote（-）" class="headerlink" title="rand-quote（*）"></a>rand-quote（*）</h3><p>娱乐功能，输入<code>quote</code> 可以显示一条名言（英文）。可以配置在 zsh 的配置文件中，使其随着终端的开启而自动执行，但是需要做好终端启动速度肉眼可见变慢的心理准备。</p><p><em>反正我不开随终端自动运行。无聊的时候自己输入<code>quote</code>看一下学学英语就可以了。</em></p><h2 id="效率工具"><a href="#效率工具" class="headerlink" title="效率工具"></a>效率工具</h2><p>推荐一些能够提升效率的工具。</p><h3 id="rectangle"><a href="#rectangle" class="headerlink" title="rectangle"></a>rectangle</h3><p>一款自定义组合按键修改窗口位置和大小的工具。例如可以完成将窗口左右分屏或者左上右上左下右下分屏，或者将窗口置于中间这样的操作。</p><h3 id="switchkey"><a href="#switchkey" class="headerlink" title="switchkey"></a>switchkey</h3><p>输入法自动切换工具，比如 Edge 浏览器可以配置为中文输入法，这样只要你焦点转移到 Edge 浏览器，输入法就会自动切换到中文输入法。<br>很多人不知道配置方式，是需要将焦点放在要配置的应用上并将输入法切换到指定的输入法，然后点击 switchkey 的图标，选择添加按钮。<br><em>这个应用有个问题是无论如何配置都不能开机自启，不知道是系统问题还是什么。总之每次重启机器自己记得打开它好了。</em></p><h3 id="bob"><a href="#bob" class="headerlink" title="bob"></a>bob</h3><p>翻译工具，可以实现自定义组合按键进行窗口翻译和选词翻译，也可以自定义翻译源，一定不要使用默认翻译源，时常会有无法连接的问题，我觉得自己申请的百度翻译免费 api 就很好用了。</p><h3 id="motrix"><a href="#motrix" class="headerlink" title="motrix"></a>motrix</h3><p>下载工具，基于 aira2，挺好使，没什么好说的。</p><h3 id="clashx"><a href="#clashx" class="headerlink" title="clashx"></a>clashx</h3><p>梯子工具，不解释。</p><h3 id="netnewswire"><a href="#netnewswire" class="headerlink" title="netnewswire"></a>netnewswire</h3><p>rss 订阅及管理工具，在今年升级到最新版之后已经可以和 ios 及 ipados 保持列表和阅读状态同步，相当好用。（ios 和 ipados 版本目前也是免费。）</p><h3 id="clipy"><a href="#clipy" class="headerlink" title="clipy"></a>clipy</h3><p>剪贴板管理工具，这么说吧，paste 有的功能它都有，只不过是以比较丑的方式展现了出来。另外他有一个 paste 没有的功能就是鼠标焦点跟随。</p><h3 id="cyberduck"><a href="#cyberduck" class="headerlink" title="cyberduck"></a>cyberduck</h3><p>ftp 工具，该有的都有，缺点是每次关闭应用会弹出捐献页面。</p><h3 id="simplenote"><a href="#simplenote" class="headerlink" title="simplenote"></a>simplenote</h3><p>全平台同步笔记应用，同步迅速，可查看历史变更记录，支持 markdown。</p><h3 id="squirrel"><a href="#squirrel" class="headerlink" title="squirrel"></a>squirrel</h3><p>rime 输入法的 macos 实现，对我来讲唯一的优点就是左 shift 可以切换中英文输入法，自带输入法需要按左大小写锁定键十分别扭，这么多年了我都没适应过来。</p><h3 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h3><p>系统状态监控工具，可以将系统状态展示在状态栏，有多种展示方式。</p><h3 id="sublime-text"><a href="#sublime-text" class="headerlink" title="sublime-text"></a>sublime-text</h3><p>文本编辑工具，打开大文件速度非常快，并且有代码高亮配置。</p><h3 id="switchhosts"><a href="#switchhosts" class="headerlink" title="switchhosts"></a>switchhosts</h3><p>hosts 管理工具。本来挺好使的，最近一次更新后会在息屏后<strong>疯狂占用内存</strong>，上次直接占用了 12g，风扇狂转一晚上，早上起床本都是烫的，太吓人！想不通一个 hosts 管理工具怎么占用这么多的，而且在活动监视器查看他都是无法运行的状态，多半是软件代码有问题导致内存溢出了。总之现在已经不让他开机自启了，有需要的时候再打开，编辑完就关闭。</p><h3 id="termius"><a href="#termius" class="headerlink" title="termius"></a>termius</h3><p>ssh 工具，收费软件，免费版只能使用 ssh 功能，和 cyberduck 搭配使用。</p><h3 id="hiddenbar"><a href="#hiddenbar" class="headerlink" title="hiddenbar"></a>hiddenbar</h3><p>状态栏图标隐藏工具，和 bartender 相比缺少很多功能，比如点击状态栏空白处展示隐藏图标和根据设定的动作展示活动图标两个特性。不过也足够了。</p><p><em>mac 状态栏设计真是其一大败笔，尤其是 big sur 之后还刻意加大图标间隔，使本不够用的状态栏长度雪上加霜。</em></p><h3 id="intellidock"><a href="#intellidock" class="headerlink" title="intellidock"></a>intellidock</h3><p>底部 dock 自动隐藏工具。灵敏度似乎不是很好调节。</p><h3 id="upic"><a href="#upic" class="headerlink" title="upic"></a>upic</h3><p>图床管理工具，搭配 gitee 或者七牛云免费额度使用。</p><h3 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h3><p>markdown 编辑器，主题都很好看，唯一不习惯的是编辑的时候换行会自动添加一个空行，不知道是不是因为遵循标准 markdown 语法的原因。</p><p><em>beta 版本都到 0.10.x 了，目测很快进入 release 版，到时候应该就要收费了。现在能白嫖多久就嫖多久吧。</em></p><h3 id="itsycal"><a href="#itsycal" class="headerlink" title="itsycal"></a>itsycal</h3><p>状态栏的日历及日历事项展示和管理工具，本来很好用，直到升级了 big sur，big sur 之前 macos 可以在状态栏隐藏默认时间组件，然后用 itsycal 组件进行替换，big sur 之后就不可以了。导致状态栏出现两个时间组件，十分难看且占地方。</p><h3 id="pixelscheduler（app-store）（收费）"><a href="#pixelscheduler（app-store）（收费）" class="headerlink" title="pixelscheduler（app store）（收费）"></a>pixelscheduler（app store）（收费）</h3><p>日历事项展示工具，展示方式是左右屏幕边缘的彩条，鼠标移上去展示具体事项，个人感觉比较美观且实用。</p><h3 id="keka"><a href="#keka" class="headerlink" title="keka"></a>keka</h3><p>解压工具。比系统默认的好用一点点，支持的格式多一点点。</p><h3 id="keepassxc"><a href="#keepassxc" class="headerlink" title="keepassxc"></a>keepassxc</h3><p>keepass 的多平台实现，无网络密码管理工具，可以生成长密码和管理密码列表。比钥匙串的好处就是密码数据库是单文件的，可以直接拷贝到其他设备上使用。</p><h3 id="ipreview（app-store）（收费）"><a href="#ipreview（app-store）（收费）" class="headerlink" title="ipreview（app store）（收费）"></a>ipreview（app store）（收费）</h3><p>quicklook 扩展插件，可以支持类似 sql，java，md 等多种格式的文件预览及代码高亮。</p><h3 id="amphetamine（app-store）"><a href="#amphetamine（app-store）" class="headerlink" title="amphetamine（app store）"></a>amphetamine（app store）</h3><p>息屏管理工具。可以控制息屏时间及触发时机。</p><p><em>在我电脑上无法开机自启，不知道是否系统问题</em></p><h3 id="pixea（app-store）"><a href="#pixea（app-store）" class="headerlink" title="pixea（app store）"></a>pixea（app store）</h3><p>图片查看及管理工具，比系统默认的好用一点点。</p><h3 id="liquidtext（app-store）"><a href="#liquidtext（app-store）" class="headerlink" title="liquidtext（app store）"></a>liquidtext（app store）</h3><p>文档查看和标注工具，和 marginnote 比较类似，建议二选一购买或者使用 liquidtext 的免费功能即可。</p><p><em>缺点是不支持云同步。而且感觉 ipad 版更好用。</em></p><h3 id="notability-goodnotes（app-store）（收费）"><a href="#notability-goodnotes（app-store）（收费）" class="headerlink" title="notability/goodnotes（app store）（收费）"></a>notability/goodnotes（app store）（收费）</h3><p>笔记工具，二选一即可，都是购买 ipados/ios/macos 版一次购买全平台使用。</p><h3 id="fsnotes"><a href="#fsnotes" class="headerlink" title="fsnotes"></a>fsnotes</h3><p>快捷笔记应用，功能齐全。</p><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>git 管理工具。</p><p><em>说是收费，暂时还没看到哪里收费。</em></p><h2 id="娱乐工具"><a href="#娱乐工具" class="headerlink" title="娱乐工具"></a>娱乐工具</h2><h3 id="paper"><a href="#paper" class="headerlink" title="paper"></a>paper</h3><p>壁纸自动切换工具，壁纸都很好看，只是偶尔热门推荐会出现一些 zzzq 亢奋症患者不希望看到的图片。壁纸来源似乎是 Unsplash。</p><p><em>不知道为什么在我电脑上开启开机自启之后状态栏图标就会变成两个，依旧不知道是否系统问题。</em></p><h3 id="aerial"><a href="#aerial" class="headerlink" title="aerial"></a>aerial</h3><p>视频屏保工具，所选取的视频似乎是苹果官方的演示视频，基本为全球各地的知名风景或者太空俯瞰图之类的，相当养眼。</p><p><em>这个应用的问题是下载服务器不是很稳定，下载需要时间较长并且<strong>不能断点续传</strong>，所以下载过程中需要一直保持软件开启不能关闭不能最小化，否则需要从头开始下载。再就是屏保开启期间<strong>占用资源过多</strong>，尤其是选择平滑字体之后，风扇狂转，最后我吓得将其打入冷宫。</em></p><h3 id="lyricsx"><a href="#lyricsx" class="headerlink" title="lyricsx"></a>lyricsx</h3><p>桌面歌词工具，可以实现随着 apple music 启动而自动启动，并且可以设置歌词在桌面的位置和展现方式（甚至包括TouchBar！）。比较实用。</p><h3 id="fliqlo"><a href="#fliqlo" class="headerlink" title="fliqlo"></a>fliqlo</h3><p>翻页时钟。</p><h3 id="tinymediamanager"><a href="#tinymediamanager" class="headerlink" title="tinymediamanager"></a>tinymediamanager</h3><p>电影信息刮削工具，可以补全电影信息及封面等。搭配 kodi 和树莓派使用无敌。</p><p><em>因为一些大人的原因需要配置 hosts 才可以正常使用。</em></p><h3 id="iina"><a href="#iina" class="headerlink" title="iina"></a>iina</h3><p>音视频播放工具。无敌。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS Alias建议</title>
      <link href="/2021/07/05/Mac-alias%E5%BB%BA%E8%AE%AE/"/>
      <url>/2021/07/05/Mac-alias%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>alias 的意义即以自己能记住的命令来简化高频操作。</p><span id="more"></span><h2 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启控制台 clashx 代理</span></span><br><span class="line"><span class="built_in">alias</span> clashx=<span class="string">&quot;export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="comment">#重新排列 Mac 启动台图标</span></span><br><span class="line"><span class="built_in">alias</span> resetlp=<span class="string">&quot;defaults write com.apple.dock ResetLaunchPad -bool true &amp;&amp; killall Dock&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#hexo</span></span><br><span class="line"><span class="built_in">alias</span> hx=<span class="string">&quot;hexo&quot;</span></span><br><span class="line"><span class="comment">#hexo 清除缓存并启动</span></span><br><span class="line"><span class="built_in">alias</span> hxcs=<span class="string">&quot;hx clean &amp;&amp; hx s&quot;</span></span><br><span class="line"><span class="comment">#hexo 构建并发布</span></span><br><span class="line"><span class="built_in">alias</span> hxdg=<span class="string">&quot;hx d -g&quot;</span></span><br><span class="line"><span class="comment">#hexo 创建新文章</span></span><br><span class="line"><span class="built_in">alias</span> hxn=<span class="string">&quot;hx new&quot;</span></span><br><span class="line"><span class="comment">#hexo 创建以日期命名的新文章</span></span><br><span class="line"><span class="built_in">alias</span> hxnd=<span class="string">&quot;hxn `date +%Y-%m-%d`&quot;</span></span><br></pre></td></tr></table></figure><h2 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主命令</span></span><br><span class="line"><span class="built_in">alias</span> hb=<span class="string">&quot;brew&quot;</span></span><br><span class="line"><span class="comment">#清除缓存</span></span><br><span class="line"><span class="built_in">alias</span> hbc=<span class="string">&quot;hb cleanup&quot;</span></span><br><span class="line"><span class="comment">#查看服务</span></span><br><span class="line"><span class="built_in">alias</span> hbv=<span class="string">&quot;hb services&quot;</span></span><br><span class="line"><span class="comment">#查看更新</span></span><br><span class="line"><span class="built_in">alias</span> hbu=<span class="string">&quot;hb update -v&quot;</span></span><br><span class="line"><span class="comment">#搜索远程仓库</span></span><br><span class="line"><span class="built_in">alias</span> hbs=<span class="string">&quot;hb search&quot;</span></span><br><span class="line"><span class="comment">##搜索远程 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hbsc=<span class="string">&quot;hbs --cask&quot;</span></span><br><span class="line"><span class="comment">#搜索本地仓库</span></span><br><span class="line"><span class="built_in">alias</span> hbl=<span class="string">&quot;hb list&quot;</span></span><br><span class="line"><span class="comment">##搜索本地 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hblc=<span class="string">&quot;hbl --cask&quot;</span></span><br><span class="line"><span class="comment">#下载并安装包</span></span><br><span class="line"><span class="built_in">alias</span> hbi=<span class="string">&quot;hb install&quot;</span></span><br><span class="line"><span class="comment">##安装 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hbic=<span class="string">&quot;hbi --cask&quot;</span></span><br><span class="line"><span class="comment">#下载并更新包</span></span><br><span class="line"><span class="built_in">alias</span> hbug=<span class="string">&quot;hb upgrade&quot;</span></span><br><span class="line"><span class="comment">##更新 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hbugc=<span class="string">&quot;hbug --cask&quot;</span></span><br><span class="line"><span class="comment">###更新版本号为 release 或者 auto_update 的包</span></span><br><span class="line"><span class="built_in">alias</span> hbugcf=<span class="string">&quot;hbugc `brew list --cask | tr &quot;</span>\n%<span class="string">&quot; &quot;</span>  <span class="string">&quot;`&quot;</span></span><br><span class="line"><span class="comment">#卸载包</span></span><br><span class="line"><span class="built_in">alias</span> hbun=<span class="string">&quot;hb uninstall -f&quot;</span></span><br><span class="line"><span class="comment">##卸载 cask 包</span></span><br><span class="line"><span class="built_in">alias</span> hbunc=<span class="string">&quot;hbun --zap --cask&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot项目版本号管理方案</title>
      <link href="/2021/06/15/Spring-Boot%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/"/>
      <url>/2021/06/15/Spring-Boot%E9%A1%B9%E7%9B%AE%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>简单有效的版本号管理可以提升发布项目及版本回退及版本 bug 管理控制体验。下面是这几年整理优化的针对 Spring Boot 项目 Jar 包 Jenkins 发布流程的版本号管理方案。少许修改之后也可以变更为针对 Docker 私有仓库的版本号管理方案。</p><span id="more"></span><ol><li>测试/正式版本号发布时版本号需跟对应的 Git 标签（Tag）保持一致，每次发布前先在 GitLab 打标签（Tag），即对应的版本号，项目中<code>project.version</code>无需做修改，仅在 Jenkins 流程中动态修改</li><li>正式的 Tag version 必须对应某一时刻的线上发布版本号，并保持递增趋势</li><li>在 Jenkins 流程中 package 之前使用<code>mvn versions:set -DnewVersion=2.0.1-RELEASE</code>（其中<code>2.0.1-RELEASE</code>为示例正式版本号）来统一动态修改所有项目的版本号为 Tag version</li><li>Jenkins 流程中的<code>startup.sh</code>启动脚本涉及的项目版本<code>PROJECT_VERSION</code>需跟随 Tag version 做修改</li><li>测试版本号为当前时间时间戳<code>yyyyMMddHHmm</code>（例：202112231223）;正式版本号规则为<code>x.y.z-RELEASE</code>（例：2.0.1-RELEASE），其中<code>x</code>为大版本号，<code>y</code>为小版本号，<code>z</code>为小版本中的 bug 修复递增版本号，<code>RELEASE</code>指当前版本为某个正式版</li></ol><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>Gitlab CI 推送代码自动创建 Tag 的 .gitlab-ci.yml 配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create_tag</span></span><br><span class="line"></span><br><span class="line"><span class="attr">create_tag:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">create_tag</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;liuzhuoming@testmail.com;&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;liuzhuoming&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">origin</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">pull</span> <span class="string">origin</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">fetch</span> <span class="string">--tags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">remote</span> <span class="string">set-url</span> <span class="string">origin</span> <span class="string">http://name:secret@xx.com/project/test-project.git</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">-l</span> <span class="string">-n</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tag_name=`date</span> <span class="string">&quot;+%Y%m%d%H%M&quot;</span><span class="string">`</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">tag</span> <span class="string">$&#123;tag_name&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">origin</span> <span class="string">$&#123;tag_name&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Jenkins </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Redis实现前后端分离的图片验证码生成和校验</title>
      <link href="/2021/06/02/%E9%80%9A%E8%BF%87Redis%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90%E5%92%8C%E6%A0%A1%E9%AA%8C/"/>
      <url>/2021/06/02/%E9%80%9A%E8%BF%87Redis%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E7%9A%84%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90%E5%92%8C%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>前后端不分离的情况下图片验证码的做法一般是第一次请求会将 code 保存在 session 中并返回前端，第二次请求在校验的时候通过 sessionId 来保证同一次会话并从 session 中拿出 code 跟用户识别并提交的图片验证码 code 相对比，判断验证码是否有效。但是前后端分离情况下无法保证两次请求在一次会话中，所以保存 session 的做法行不通，但是可以采取类似的操作迂回实现。</p><span id="more"></span><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>做法既生成图片验证码的时候同时返回一个当前图片验证码对应的 id，并将其绑定关系保存在 Redis 中。校验的时候根据 id 在 Redis 中取出原始 code 跟用户上传的 code 相比对，根据结果进行下一步操作。来实现类似 sessionId 的操作。</p><p>验证码返回方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.futurenotfound.demo.kaptcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码返回方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">KaptchaMode</span> </span>&#123;</span><br><span class="line">    BASE64(<span class="string">&quot;base64&quot;</span>),</span><br><span class="line">    URL(<span class="string">&quot;url&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证码返回值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.futurenotfound.demo.kaptcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码返回</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kaptcha</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6778764549600473414L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回验证码方式</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * base64，url等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mode;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String context;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String contextId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.futurenotfound.demo.kaptcha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.captcha.CaptchaUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.captcha.LineCaptcha;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.lang.UUID;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ObjectUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.crypto.digest.MD5;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;kaptcha&quot;)</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KaptchaController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Kaptcha <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LineCaptcha captcha = CaptchaUtil.createLineCaptcha(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">        String context = captcha.getImageBase64();</span><br><span class="line">        String code = captcha.getCode();</span><br><span class="line">        String contextId = UUID.fastUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将contextId和简单加密的code以kv的方式存入redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(contextId, MD5.create().digestHex(code.toLowerCase()), <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Kaptcha(KaptchaMode.BASE64.getCode(), context, contextId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">post</span><span class="params">(String code, String contextId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isEmpty(code)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//contextId对应的redis中的加密code</span></span><br><span class="line">        String md5Code = redisTemplate.opsForValue().get(contextId);</span><br><span class="line">        <span class="keyword">boolean</span> tf = Objects.equals(MD5.create().digestHex(code.toLowerCase()), md5Code);</span><br><span class="line">        <span class="keyword">if</span> (tf) &#123;</span><br><span class="line">            redisTemplate.delete(contextId);</span><br><span class="line">            log.info(<span class="string">&quot;验证码校验成功&quot;</span>);</span><br><span class="line">            <span class="comment">//do something</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Kaptcha </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过AOP解决分布式系统中RabbitMQ消息幂等性问题</title>
      <link href="/2021/05/09/%E9%80%9A%E8%BF%87AOP%E8%A7%A3%E5%86%B3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%ADRabbitMQ%E6%B6%88%E6%81%AF%E5%B9%82%E7%AD%89%E6%80%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2021/05/09/%E9%80%9A%E8%BF%87AOP%E8%A7%A3%E5%86%B3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%ADRabbitMQ%E6%B6%88%E6%81%AF%E5%B9%82%E7%AD%89%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>RabbitMQ 中的消息幂等性问题，主要指的即是 RabbitMQ 的重试机制导致的消费者端<strong>消息重复消费</strong>问题。</p><span id="more"></span><h2 id="采用-AOP-Redis-的解决方案"><a href="#采用-AOP-Redis-的解决方案" class="headerlink" title="采用 AOP+Redis 的解决方案"></a>采用 AOP+Redis 的解决方案</h2><p>主要思路既每个消息对象都存在或者可以计算出其队列内的唯一 id，并将这个 id 作为凭证判断消费者是否已经进行过消费，如果已经进行过消费则直接对 RabbitMQ ack。</p><h3 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h3><p>消息对象（MessageObject）MO：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础消息对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取消息唯一id，防止重复消费</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 消息对象应必须独立实现此方法，其返回的id应当在当前队列中唯一</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 消息唯一id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getUniqueId</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息处理器基类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列消费者处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 消息对象类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RabbitMQConsumerHandler</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseMO</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者消息处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mo 消息对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RabbitMQConsumerHandleResult <span class="title">handle</span><span class="params">(T mo)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息消费结果枚举：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列消费者处理结果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">RabbitMQConsumerHandleResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCC,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FAIL,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重复消费</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DUPLICATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复消费检测切面注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列消费者重复消费</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RabbitMQConsumerDuplicate &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复消费切面处理类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> top.futurenotfound.redis.util.RedisUtils;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.domain.BaseMO;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerHandleResult;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列消费者重复消费处理切面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConsumerDuplicateAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@within(top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerDuplicate)&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp;execution(public * top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerHandler+.handle(top.futurenotfound.rabbitmq.domain.BaseMO))&quot; +</span></span><br><span class="line"><span class="meta">            &quot;&amp;&amp;args(mo))</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">    private void join(BaseMO mo) &#123;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Around(&quot;</span>join(top.futurenotfound.rabbitmq.domain.BaseMO)<span class="string">&quot; +</span></span><br><span class="line"><span class="string">            &quot;</span>&amp;&amp;args(mo)<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    public Object joinPoint(ProceedingJoinPoint joinPoint, BaseMO mo) throws Throwable &#123;</span></span><br><span class="line"><span class="string">        String moKey = &quot;</span>rabbitmq:<span class="string">&quot; + mo.getClass().getName() + &quot;</span>:<span class="string">&quot; + mo.getUniqueId();</span></span><br><span class="line"><span class="string">        synchronized (this) &#123;</span></span><br><span class="line"><span class="string">            if (redisUtils.get(moKey) == null) &#123;</span></span><br><span class="line"><span class="string">                redisUtils.set(moKey, 0, 1 * 60 * 60);</span></span><br><span class="line"><span class="string">                return joinPoint.proceed();</span></span><br><span class="line"><span class="string">            &#125; else &#123;</span></span><br><span class="line"><span class="string">                //返回重复消费标记</span></span><br><span class="line"><span class="string">                return RabbitMQConsumerHandleResult.DUPLICATE;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>客户端数据同步消息对象：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> top.futurenotfound.commons.utils.MD5Util;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.domain.BaseMO;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端数据消息对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDataMO</span> <span class="keyword">implements</span> <span class="title">BaseMO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息负载数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String data;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息入队列时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date sendDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUniqueId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MD5Util.md5(type + <span class="string">&quot;:&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端数据同步消息处理器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.mo.ClientDataMO;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerHandleResult;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerHandler;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.consumer.RabbitMQConsumerDuplicate;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端数据同步处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RabbitMQConsumerDuplicate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDataConsumerHandler</span> <span class="keyword">implements</span> <span class="title">RabbitMQConsumerHandler</span>&lt;<span class="title">ClientDataMO</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clientDataMO 客户端数据消息对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true-处理成功 false-处理失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitMQConsumerHandleResult <span class="title">handle</span><span class="params">(ClientDataMO clientDataMO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (clientDataMO == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> RabbitMQConsumerHandleResult.FAIL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此处加入业务代码</span></span><br><span class="line">        <span class="keyword">return</span> RabbitMQConsumerHandleResult.SUCC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端同步数据消费者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.mo.ClientDataMO;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.enst.ClientDataExceptionMessage;</span><br><span class="line"><span class="keyword">import</span> top.futurenotfound.rabbitmq.enst.RabbitMQConstant;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端数据同步消费者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDataConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClientDataConsumerHandler clientDataConsumerHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitMQConstant.Queue.CLIENT_DATA_QUEUE)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Channel channel, <span class="meta">@Payload</span> ClientDataMO clientDataMO, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (clientDataConsumerHandler.handle(clientDataMO)) &#123;</span><br><span class="line">                <span class="keyword">case</span> SUCC:</span><br><span class="line">                    log.info(ClientDataExceptionMessage.CLIENT_DATA_HANDLE_SUCC + <span class="string">&quot; &gt;payload=&quot;</span> + clientDataMO);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DUPLICATE:</span><br><span class="line">                    log.warn(ClientDataExceptionMessage.CLIENT_DATA_DUPLICATE_HANDLE_ERR + <span class="string">&quot; &gt;payload=&quot;</span> + clientDataMO);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> FAIL:</span><br><span class="line">                    <span class="comment">//应当在创建队列时，给本队列绑定死信队列，在basicReject之后消息被发送到死信队列进一步处理</span></span><br><span class="line">                    channel.basicReject(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">                    log.error(ClientDataExceptionMessage.CLIENT_DATA_HANDLE_ERR + <span class="string">&quot; &gt;payload=&quot;</span> + clientDataMO);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="comment">//nothing to do</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;&#125;</span><br><span class="line">        <span class="comment">//消息手动ack处理。即使异常也要ack，防止unack消息数量达到上限使队列阻塞</span></span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局替换 System.out.print() 为 log.info()</title>
      <link href="/2021/01/26/%E5%85%A8%E5%B1%80%E6%9B%BF%E6%8D%A2System-out-print-%E4%B8%BAlog-info/"/>
      <url>/2021/01/26/%E5%85%A8%E5%B1%80%E6%9B%BF%E6%8D%A2System-out-print-%E4%B8%BAlog-info/</url>
      
        <content type="html"><![CDATA[<p>经常有人在线上代码写 <code>System.out.print()</code> 给日志分类分析带来困扰，索性将几个常用方法全局替换为 <code>log.info()</code>。原方法是通过 <code>java.io.PrintStream</code> 类来实现的，那就继承 <code>java.io.PrintStream</code> 并重写其相关方法。</p><span id="more"></span><h2 id="重写-System-out-print"><a href="#重写-System-out-print" class="headerlink" title="重写 System.out.print()"></a>重写 System.out.print()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java15springdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * log info打印</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInfoPrintStream</span> <span class="keyword">extends</span> <span class="title">PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogInfoPrintStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(System.out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        log.info(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">        log.info(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PrintStream <span class="title">printf</span><span class="params">(String format, Object... args)</span> </span>&#123;</span><br><span class="line">        log.info(String.format(format, args));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写-System-err-print"><a href="#重写-System-err-print" class="headerlink" title="重写 System.err.print()"></a>重写 System.err.print()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java15springdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * log error打印</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogErrPrintStream</span> <span class="keyword">extends</span> <span class="title">PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogErrPrintStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(System.err);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        log.error(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">        log.error(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PrintStream <span class="title">printf</span><span class="params">(String format, Object... args)</span> </span>&#123;</span><br><span class="line">        log.error(String.format(format, args));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-项目启动时全局替换"><a href="#SpringBoot-项目启动时全局替换" class="headerlink" title="SpringBoot 项目启动时全局替换"></a>SpringBoot 项目启动时全局替换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java15springdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">        System.setOut(<span class="keyword">new</span> LogInfoPrintStream());</span><br><span class="line">        System.setErr(<span class="keyword">new</span> LogErrPrintStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.err.println(<span class="string">&quot;请求失败：ERR&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;请求失败：INFO&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021-01-26 10:49:22.570 ERROR 12150 --- [nio-8080-exec-1] c.e.java15springdemo.LogErrPrintStream   : 请求失败：ERR</span><br><span class="line">2021-01-26 10:52:42.128  INFO 12150 --- [nio-8080-exec-1] c.e.java15springdemo.LogInfoPrintStream   : 请求失败：INFO</span><br></pre></td></tr></table></figure><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>肉眼可见的问题就是打印日志的类路径是 <code>c.e.xx.LogErrPrintStream</code> 而不是我们埋点的类，不过也没办法，总比 <code>System.out.print()</code> 好，<strong>能用就行</strong>了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Log4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏感词过滤（DFA+Trie）</title>
      <link href="/2020/10/31/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4/"/>
      <url>/2020/10/31/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>这几天搜了一下 java 实现敏感词过滤算法，搜索结果前十页都是同一套代码，拷出来运行一下倒是可以运行，但是代码凌乱没有丝毫规范性，看着有点不太行，所以周末抽空自己实现了一下。原理倒是差不多，都是 Trie 做敏感词库，DFA 做匹配算法。这样占用空间小且运行效率高。</p><span id="more"></span><h2 id="构建敏感词库（字典树）"><a href="#构建敏感词库（字典树）" class="headerlink" title="构建敏感词库（字典树）"></a>构建敏感词库（字典树）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字典树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是一个词组的结尾</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> containsTail;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Character, Trie&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.containsTail = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.nodes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Trie</span><span class="params">(<span class="keyword">boolean</span> containsTail, HashMap&lt;Character, Trie&gt; nodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.containsTail = containsTail;</span><br><span class="line">        <span class="keyword">this</span>.nodes = nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定词组加入字典树</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> word 词组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        Trie node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!node.nodes.containsKey(c)) &#123;</span><br><span class="line">                node.nodes.put(c, <span class="keyword">new</span> Trie(<span class="keyword">false</span>, <span class="keyword">new</span> HashMap&lt;&gt;()));</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.nodes.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        node.containsTail = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个字符在当前树的子树中是否存在一个节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ch 字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.nodes.containsKey(ch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个字符的位置在当前树的子树中的节点是否是一个结尾</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ch 字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTail</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.nodes.get(ch).containsTail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匹配算法"><a href="#匹配算法" class="headerlink" title="匹配算法"></a>匹配算法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 词组过滤</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Trie trie;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordFilter</span><span class="params">(Trie trie)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.trie = trie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本中是否存在指定词组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isContainsWord</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        Trie trie = <span class="keyword">this</span>.trie;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : text.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trie.contains(ch)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (trie.isTail(ch)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                trie = <span class="keyword">this</span>.trie;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            trie = trie.nodes.get(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回文本中存在的指定词组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">containsWords</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        Trie trie = <span class="keyword">this</span>.trie;</span><br><span class="line">        Set&lt;String&gt; stringSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">char</span>[] charArray = text.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = charArray[i];</span><br><span class="line">            <span class="keyword">if</span> (trie.contains(ch)) &#123;</span><br><span class="line">                stringBuilder.append(ch);</span><br><span class="line">                <span class="keyword">if</span> (trie.isTail(ch)) &#123;</span><br><span class="line">                    stringSet.add(stringBuilder.toString());</span><br><span class="line">                    <span class="comment">//已匹配结果的话重置字典树和结果串</span></span><br><span class="line">                    trie = <span class="keyword">this</span>.trie;</span><br><span class="line">                    stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//如果节点存在当前字符则替换用来匹配的树为获取当前字符匹配的子树</span></span><br><span class="line">                    trie = trie.nodes.get(ch);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//子串不存在词组中则退回当前测试子串的第二位重新匹配（重要），并重置字典树和结果串</span></span><br><span class="line">                i = i - stringBuilder.length();</span><br><span class="line">                trie = <span class="keyword">this</span>.trie;</span><br><span class="line">                stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stringSet.sort(comparator);</span><br><span class="line">        <span class="keyword">return</span> stringSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用指定字符替换词组</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text        文本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replaceChar 指定字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceWords</span><span class="params">(String text, <span class="keyword">char</span> replaceChar)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; stringSet = containsWords(text);</span><br><span class="line">        <span class="keyword">for</span> (String word : stringSet) &#123;</span><br><span class="line">            StringBuilder replaceWord = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                replaceWord.append(replaceChar);</span><br><span class="line">            &#125;</span><br><span class="line">            text = text.replace(word, replaceWord.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序器（重要）</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 按照词组长度降序排序，这样替换指定词组的时候可以最大化替换为屏蔽字符</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 示例： 屏蔽词=[西安，陕西西安北]，文本=从陕西西安北站到达西安</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 如果先替换 西安，则结果为 从陕西**北站到达**，如果先替换 陕西西安北，则结果为 从*****站到达**</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;String&gt; comparator = Comparator.comparing(String::length).reversed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>自己百度一下敏感词库并使用<code>Trie.put()</code>方法循环导入字典树中，示例为使用本地txt解析：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; stringSet = readLineTextsFromFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化敏感词库，一般会设置为单例，并且启动时候初始化一次就好了，有新的敏感词直接调用接口添加进单例对象中</span></span><br><span class="line">        Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">        <span class="keyword">for</span> (String word : stringSet) &#123;</span><br><span class="line">            trie.put(word);</span><br><span class="line">        &#125;</span><br><span class="line">        WordFilter wordFilter = <span class="keyword">new</span> WordFilter(trie);</span><br><span class="line"></span><br><span class="line">        String text = <span class="string">&quot;税票据试试无锡专线目标测试利民投资&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(wordFilter.isContainsWord(text));</span><br><span class="line">        System.out.println(wordFilter.containsWords(text));</span><br><span class="line">        System.out.println(wordFilter.replaceWords(text, <span class="string">&#x27;*&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">readLineTextsFromFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; stringSet = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String pathname = <span class="string">&quot;/Users/liuzhuoming/Downloads/wordsFilter.txt&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (FileReader reader = <span class="keyword">new</span> FileReader(pathname);</span><br><span class="line">             BufferedReader br = <span class="keyword">new</span> BufferedReader(reader)</span><br><span class="line">        ) &#123;</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = Base64.getDecoder().decode(line.trim());</span><br><span class="line">                stringSet.add(<span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8).trim());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>亲测检测并替换1000长度的文本，在6000词组的库中只需要6毫秒，并且不会有遗漏的情况。</strong></p><p><a href="wordsFilter.txt">测试敏感词库下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Adobe Typekit 给博客换思源系列字体</title>
      <link href="/2020/09/21/%E4%BD%BF%E7%94%A8-Adobe-Typekit-%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%8D%A2%E6%80%9D%E6%BA%90%E7%B3%BB%E5%88%97%E5%AD%97%E4%BD%93/"/>
      <url>/2020/09/21/%E4%BD%BF%E7%94%A8-Adobe-Typekit-%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%8D%A2%E6%80%9D%E6%BA%90%E7%B3%BB%E5%88%97%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>给个人博客换思源字体遇到很多坑，在这里记录一下。<br>因为 Google Fonts 没有收录思源系列字体，所以在这里使用 Adobe Typekit 作为在线字体库。</p><span id="more"></span><h2 id="注册-Adobe-账号"><a href="#注册-Adobe-账号" class="headerlink" title="注册 Adobe 账号"></a>注册 Adobe 账号</h2><p>首先去<a href="https://fonts.adobe.com/">https://fonts.adobe.com/</a>注册 Adobe 账号，注意要<strong>挂梯子</strong>，并且所在地区<strong>不能</strong>选择中国，否则会不能登录，提示网络异常，但是你选择其他任意地区就算挂着不同地区的梯子都不会提示你网络异常。所以这里又是国内用户被特殊对待了，毕竟众所周知中国不在地球上，每次全球同步的东西中国总会被玩出不同的花样。（可恶！）</p><h2 id="搜索思源宋体（Source-Han-Serif-Simplified-Chinese）"><a href="#搜索思源宋体（Source-Han-Serif-Simplified-Chinese）" class="headerlink" title="搜索思源宋体（Source Han Serif Simplified Chinese）"></a>搜索思源宋体（Source Han Serif Simplified Chinese）</h2><p>这里以思源宋体为例，首先在 Typekit 首页的搜索框输入 Source Han Serif Simplified Chinese 并回车搜索，会弹出搜索结果：<br><img src="01.png" alt="01.png"></p><h2 id="创建个人字体库"><a href="#创建个人字体库" class="headerlink" title="创建个人字体库"></a>创建个人字体库</h2><p>点击进入字体详情，勾选 <code>Source Han Serif SC Regular</code> 即常规字重（包含了加粗字重），然后点击右上角的 <code>&lt;/&gt; Add to Web Project</code> 按钮：<br><img src="02.png" alt="02.png"><br>弹出 Web Project 模态框：<br><img src="03.png" alt="03.png"><br>点开下拉框并选择 <code>Create a new project</code>，命名为 hexo，然后点击右下角 <code>Create/Save</code> 完成创建个人网络字体库。<br>然后点按 <code>My Adobe Fonts</code> 按钮：<br><img src="04.png" alt="04.png"><br>再选择 Web Projects 选项卡：<br><img src="05.png" alt="05.png"><br>就可以看到我们创建的 hexo 字体库了。</p><h2 id="引入字体载入代码"><a href="#引入字体载入代码" class="headerlink" title="引入字体载入代码"></a>引入字体载入代码</h2><p>复制其中的代码，类似：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  (<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> config = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">kitId</span>: <span class="string">&quot;testxxx&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">scriptTimeout</span>: <span class="number">3000</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">async</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">      h = d.documentElement,</span></span><br><span class="line"><span class="javascript">      t = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        h.className =</span></span><br><span class="line"><span class="javascript">          h.className.replace(<span class="regexp">/\bwf-loading\b/g</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot; wf-inactive&quot;</span>;</span></span><br><span class="line"><span class="javascript">      &#125;, config.scriptTimeout),</span></span><br><span class="line"><span class="javascript">      tk = d.createElement(<span class="string">&quot;script&quot;</span>),</span></span><br><span class="line"><span class="javascript">      f = <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      s = d.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>],</span></span><br><span class="line"><span class="javascript">      a;</span></span><br><span class="line"><span class="javascript">    h.className += <span class="string">&quot; wf-loading&quot;</span>;</span></span><br><span class="line"><span class="javascript">    tk.src = <span class="string">&quot;https://use.typekit.net/&quot;</span> + config.kitId + <span class="string">&quot;.js&quot;</span>;</span></span><br><span class="line"><span class="javascript">    tk.async = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    tk.onload = tk.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      a = <span class="built_in">this</span>.readyState;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (f || (a &amp;&amp; a != <span class="string">&quot;complete&quot;</span> &amp;&amp; a != <span class="string">&quot;loaded&quot;</span>)) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">      f = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">clearTimeout</span>(t);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">        Typekit.load(config);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    s.parentNode.insertBefore(tk, s);</span></span><br><span class="line"><span class="javascript">  &#125;)(<span class="built_in">document</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>放到自己博客源码的 header.ejs 文件里面任意位置就完成了。</p><h2 id="修改博客字体配置"><a href="#修改博客字体配置" class="headerlink" title="修改博客字体配置"></a>修改博客字体配置</h2><p>字体名称需要回到刚才的 Web Projects 页面，在 hexo 项目中点击右上角的 <code>Edit Project &lt;</code> 按钮：<br><img src="06.png" alt="06.png"><br>复制其中的 <code>font-family: source-han-serif-sc, serif;</code>，即 css 的字体名称：<br><img src="07.png" alt="07.png"><br>然后修改博客的字体配置就完了。<br>各个博客主题修改字体的方式略有不同，如果是使用的<a href="https://github.com/liuzhuoming23/hexo-theme-cactus">cactus</a>，那就在 themes/cactus/source/css/_variables.styl 文件内找到字体设置。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Adobe Typekit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Adobe Typekit </tag>
            
            <tag> Font </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8比较器Comparator的多条件排序用法</title>
      <link href="/2020/09/11/Java8%E6%AF%94%E8%BE%83%E5%99%A8Comparator%E7%9A%84%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F%E7%94%A8%E6%B3%95/"/>
      <url>/2020/09/11/Java8%E6%AF%94%E8%BE%83%E5%99%A8Comparator%E7%9A%84%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%8E%92%E5%BA%8F%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>在项目中经常遇到需要多字段排序的情况，比如某班级同学成绩按照总分降序排列，总分同分的按照姓名字母表顺序升序排列，其实现方式如下：</p><span id="more"></span><h2 id="实体集合排序"><a href="#实体集合排序" class="headerlink" title="实体集合排序"></a>实体集合排序</h2><p>先创建一个学生实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer score;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>再在测试类里面构建一个学生集合：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是匿名内部类初始化方式，不懂得回去学java基础，没搞错 《30天精通Java》 之类的垃圾骗钱书的前几页就有</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;Az&quot;</span>));</span><br><span class="line">    add(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;Aa&quot;</span>));</span><br><span class="line">    add(<span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;Bb&quot;</span>));</span><br><span class="line">    add(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;Ab&quot;</span>));</span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure><p>再创建一个 main 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//排序器，采用函数式构建排序器的前提是字段类型已经正确实现了Comparable接口</span></span><br><span class="line">    Comparator&lt;User&gt; userComparator = Comparator</span><br><span class="line">        <span class="comment">//第一个字段升序排列</span></span><br><span class="line">        .comparing(User::getScore)</span><br><span class="line">        <span class="comment">//将上面的排序方式反转为降序排序</span></span><br><span class="line">        .reversed()</span><br><span class="line">        <span class="comment">//第二个字段排升序排列</span></span><br><span class="line">        .thenComparing(User::getName);</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    userList.sort(userComparator);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并执行，得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[User&#123;id=3, name=<span class="string">&#x27;Bb&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Aa&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Ab&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Az&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><p>可见排序结果是正确的。</p><h2 id="Map-集合排序"><a href="#Map-集合排序" class="headerlink" title="Map 集合排序"></a>Map 集合排序</h2><p>有些时候可能需要排序 Map 集合（<code>List&lt;Map&lt;String,Object&gt;&gt;</code>），字段和排序规则和像上面一样：</p><p>先在测试类里面构建一个学生 Map 集合：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Map&lt;String, Object&gt;&gt; mapList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="keyword">new</span> HashMap&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;score&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Az&quot;</span>);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    add(<span class="keyword">new</span> HashMap&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;score&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;A2&quot;</span>);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    add(<span class="keyword">new</span> HashMap&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;score&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Bb&quot;</span>);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    add(<span class="keyword">new</span> HashMap&lt;String, Object&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;score&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Ab&quot;</span>);</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure><p>再创建一个 main 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Comparator&lt;Map&lt;String, Object&gt;&gt; userComparator = Comparator</span><br><span class="line">        <span class="comment">//注意多字段排序时，这里的 (Map&lt;String, Object&gt; map)-&gt; 不能省略为 map-&gt;，会导致编译器无法自动类型判断而报错</span></span><br><span class="line">        .comparing((Map&lt;String, Object&gt; map) -&gt; (Integer) map.get(<span class="string">&quot;score&quot;</span>)).reversed()</span><br><span class="line">        .thenComparing((Map&lt;String, Object&gt; map) -&gt; (String) map.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">    mapList.sort(userComparator);</span><br><span class="line">    System.out.println(mapList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并执行，得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[User&#123;id=3, name=<span class="string">&#x27;Bb&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Aa&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Ab&#x27;</span>&#125;, User&#123;id=1, name=<span class="string">&#x27;Az&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><p>可见排序结果是正确的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Github Actions实现Hexo博客自动切换主题</title>
      <link href="/2020/07/20/%E7%AE%80%E8%BF%B0%E5%9F%BA%E4%BA%8EGithub-Actions-Pages%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Hexo%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/07/20/%E7%AE%80%E8%BF%B0%E5%9F%BA%E4%BA%8EGithub-Actions-Pages%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Hexo%E5%8D%9A%E5%AE%A2%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>前提条件：</p><ol><li>已经熟悉基于 Github Actions/Pages 的 Hexo 博客自动构建发布并已经有实践</li><li>使用的博客主题可以使用主题配置文件_config.yml 切换配色，比如：<a href="https://github.com/liuzhuoming23/hexo-theme-cactus">hexo-theme-cactus</a></li></ol><p>总体上来讲是基于 Github Actions 的 schedule 触发器来实现的。</p><span id="more"></span><h2 id="创建白天-黑夜主题"><a href="#创建白天-黑夜主题" class="headerlink" title="创建白天/黑夜主题"></a>创建白天/黑夜主题</h2><p>略</p><h2 id="在-workflows-创建两个-schedule-触发器"><a href="#在-workflows-创建两个-schedule-触发器" class="headerlink" title="在 workflows 创建两个 schedule 触发器"></a>在 workflows 创建两个 schedule 触发器</h2><ol><li>到点触发黑夜模式</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">switch</span> <span class="string">dark</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="comment"># UTC时间，在北京时间基础上-8小时</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;30 11 * * *&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">1</span><span class="string">.</span> <span class="string">git</span> <span class="string">checkout...</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">2</span><span class="string">.</span> <span class="string">setup</span> <span class="string">nodejs...</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">3</span><span class="string">.</span> <span class="string">install</span> <span class="string">hexo-cli...</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">hexo-cli</span> <span class="string">-g</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">4</span><span class="string">.</span> <span class="string">switch</span> <span class="string">theme</span> <span class="string">and</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">and</span> <span class="string">generate</span> <span class="string">public</span> <span class="string">files</span> <span class="string">and</span> <span class="string">deploy</span> <span class="string">public</span> <span class="string">files</span> <span class="string">to</span> <span class="string">&#x27;liuzhuoming23.github.io&#x27;</span> <span class="string">repo...</span></span><br><span class="line">        <span class="comment"># 使用sed命令替换主题目录下面的_config.yml文件关于主题的配置并构建发布，如果想要切换的主题名和当前主题名一致，则不会切换</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;xxx&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;416561115@qq.com&quot;</span></span><br><span class="line"><span class="string">          sed -i &#x27;s/colorscheme: light/colorscheme: dark/&#x27; themes/cactus/_config.yml</span></span><br><span class="line"><span class="string">          hexo clean &amp;&amp; hexo d -g</span></span><br></pre></td></tr></table></figure><p>保存为 switch_dark.yml 到/.github/workflows/目录下。</p><ol start="2"><li>到点触发白天模式</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">switch</span> <span class="string">white</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&quot;0 23 * * *&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">1</span><span class="string">.</span> <span class="string">git</span> <span class="string">checkout...</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">2</span><span class="string">.</span> <span class="string">setup</span> <span class="string">nodejs...</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">3</span><span class="string">.</span> <span class="string">install</span> <span class="string">hexo-cli...</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">i</span> <span class="string">hexo-cli</span> <span class="string">-g</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">4</span><span class="string">.</span> <span class="string">switch</span> <span class="string">theme</span> <span class="string">and</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">and</span> <span class="string">generate</span> <span class="string">public</span> <span class="string">files</span> <span class="string">and</span> <span class="string">deploy</span> <span class="string">public</span> <span class="string">files</span> <span class="string">to</span> <span class="string">&#x27;liuzhuoming23.github.io&#x27;</span> <span class="string">repo...</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;xxx&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;416561115@qq.com&quot;</span></span><br><span class="line"><span class="string">          sed -i &#x27;s/colorscheme: dark/colorscheme: light/&#x27; themes/cactus/_config.yml</span></span><br><span class="line"><span class="string">          hexo clean &amp;&amp; hexo d -g</span></span><br></pre></td></tr></table></figure><p>也保存为 switch_white.yml 到/.github/workflows/目录下。</p><p>然后提交 workflows 相关代码。等到设置的时间，就会自动触发切换主题模式。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述手机扫码登陆原理</title>
      <link href="/2020/03/10/%E7%AE%80%E8%BF%B0%E6%89%8B%E6%9C%BA%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86%E5%8E%9F%E7%90%86/"/>
      <url>/2020/03/10/%E7%AE%80%E8%BF%B0%E6%89%8B%E6%9C%BA%E6%89%AB%E7%A0%81%E7%99%BB%E9%99%86%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>以前以为微信、qq 扫码登陆实现难度很高，一定是基于 WebSocket 等长连接技术实现的，结果最近看了一下 qq 的扫码登陆请求发现完全不是那一回事，原理相当简单。</p><span id="more"></span><h2 id="简述流程"><a href="#简述流程" class="headerlink" title="简述流程"></a>简述流程</h2><p>整个扫码登陆可以简化为 5 步：</p><ol><li>浏览器请求到二维码（二维码包含一个二维码标识，该二维码标志存在 Redis 中）</li><li>手机扫码，请求服务器该二维码标志是否已过期，返回授权页面</li><li>用户确认授权则将二维码标志和用户标识传入服务器，判断二维码标志和用户标识是否有效，有效则生成授权 token，并返回授权结果到手机端</li><li>浏览器循环请求服务器获取授权状态，如果已扫码则返回已扫码状态，如果已授权则返回授权 token</li><li>浏览器携带授权 token 请求限制资源</li></ol>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> QRCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>授权中心-Oauth2+JWT+HOTP</title>
      <link href="/2020/02/26/Spring-Cloud-Greenwich-SR2-15/"/>
      <url>/2020/02/26/Spring-Cloud-Greenwich-SR2-15/</url>
      
        <content type="html"><![CDATA[<p>本章开始给之前的 oauth2 服务添加短信验证码鉴权功能。<br><em>这里用上上一章《注册中心/配置中心-Nacos》和上一章《HOTP&amp;TOTP（短信验证码&amp;两步验证码）》的代码开始修改。</em></p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Oauth2 </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>短信验证码&amp;两步验证码（HOTP&amp;TOTP）</title>
      <link href="/2020/01/11/hotp-totp/"/>
      <url>/2020/01/11/hotp-totp/</url>
      
        <content type="html"><![CDATA[<p>两者都来自于 RFC 文档，文档地址分别是：</p><ul><li>基于 HMAC 的一次性密码<br> <a href="https://www.rfc-editor.org/rfc/rfc4226.txt">RFC 4226-HOTP: An HMAC-Based One-Time Password Algorithm</a></li><li>基于时间的一次性密码<br> <a href="https://www.rfc-editor.org/rfc/rfc6238.txt">rfc 6238-TOTP: Time-Based One-Time Password Algorithm</a></li></ul><p>两者区别就是后者内部可以实现秒级别的密码过期功能。<br><em>HMAC 是什么暂且不谈，有兴趣自行了解。</em></p><span id="more"></span><h2 id="HOTP"><a href="#HOTP" class="headerlink" title="HOTP"></a>HOTP</h2><p>这个算法 RFC 文档的实现是基于 Java 的，我们正好 cv 过来创建 HOTP 工具类，不需要做任何修改（**<a href="HOTP.java">点击下载</a>**）。<br>然后创建 Main 类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        otp(secret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户密钥，可以基于用户名、用户id等生成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String secret = <span class="string">&quot;liuzhuoming&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">otp</span><span class="params">(String secret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String otpaStr = HOTP.generateOTP(secret.getBytes(), i, <span class="number">8</span>, <span class="keyword">true</span>, <span class="number">0</span>);</span><br><span class="line">                System.out.println(otpaStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | InvalidKeyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 main 方法得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">905370920</span><br><span class="line">759986888</span><br><span class="line">113495253</span><br><span class="line">454957150</span><br><span class="line">967146499</span><br><span class="line">261543763</span><br><span class="line">615577400</span><br><span class="line">378770341</span><br><span class="line">267217859</span><br><span class="line">504660382</span><br></pre></td></tr></table></figure><p>其中<code>HOTP.generateOTP()</code>方法的参数<code>i</code>是本地模拟的一个每次请求值都不同的变量，第三个参数是验证码的长度，后面两个参数可以忽略。<br>可见随着<code>i</code>的变化验证码也跟着变化，大概符合我们短信验证码登录的需求，做法就是把<code>i</code>放在 Redis（或 Mysql）并取值自增，等到校验的时候从 Redis（或 Mysql）取值不自增并-1，然后重新生成验证码并 equals。<br><em>好像自己写一个<code>0~9A~Za~z</code>的随机验证码存到 Redis，设置过期时间，校验的时候直接拿出来 equals 更直观啊。当然这样做安全性就差了一点。</em></p><h2 id="TOTP"><a href="#TOTP" class="headerlink" title="TOTP"></a>TOTP</h2><p>当年说服同事用这个算法生成短信验证码并校验，忽悠他说只需要在 Redis 存一个时间戳就可以了，比直接存验证码不知道安全到哪里去了。<br>现在想想当然不合适了，因为 TOTP 本身内部就有密码过期功能，和 Redis 的过期时间功能完美重复，像这种基于时间的验证码最适合的场景还是两步验证码的生成，比如早已淘汰的网银密保或者当前正火的谷歌/微软两步验证 APP 或者 Steam 账号密保等。</p><p>这个算法 RFC 文档的实现也是基于 Java 的，我们正好 cv 过来创建 TOTP 工具类，并删除 main 方法，添加一个 String 转 HexString 的方法（**<a href="TOTP.java">点击下载</a>**）。<br>然后创建 Main 类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        totp(secret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户密钥，可以基于用户名、用户id等生成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String secret = <span class="string">&quot;liuzhuoming&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算验证码的时间起点（单位秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> T0 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//验证码过期时间间隔（单位秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> X = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">totp</span><span class="params">(String secret)</span> </span>&#123;</span><br><span class="line">        String seed = TOTP.str2HexStr(secret);</span><br><span class="line"></span><br><span class="line">        StringBuilder steps;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        df.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;UTC&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//当前时间</span></span><br><span class="line">                LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">                <span class="keyword">long</span> T = (localDateTime.toEpochSecond(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)) - T0) / X;</span><br><span class="line">                steps = <span class="keyword">new</span> StringBuilder(Long.toHexString(T).toUpperCase());</span><br><span class="line">                <span class="keyword">while</span> (steps.length() &lt; <span class="number">16</span>) steps.insert(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                System.out.println(localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)) + <span class="string">&quot; &gt;&gt;&gt; &quot;</span></span><br><span class="line">                        + TOTP.generateTOTP(seed, steps.toString(), <span class="string">&quot;6&quot;</span>, <span class="string">&quot;HmacSHA256&quot;</span>));</span><br><span class="line">                <span class="comment">//模拟两步验证器的按秒计算验证码</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 main 方法得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2020-01-11 16:52:34 &gt;&gt;&gt; 625258</span><br><span class="line">2020-01-11 16:52:35 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:36 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:37 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:38 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:39 &gt;&gt;&gt; 010708</span><br><span class="line">2020-01-11 16:52:40 &gt;&gt;&gt; 280244</span><br><span class="line">2020-01-11 16:52:41 &gt;&gt;&gt; 280244</span><br><span class="line">2020-01-11 16:52:42 &gt;&gt;&gt; 280244</span><br><span class="line">2020-01-11 16:52:43 &gt;&gt;&gt; 280244</span><br></pre></td></tr></table></figure><p>可以看到验证码五秒后就过期生成新的验证码，旧的验证码就无法验证了，至于第一个验证码只过了一秒就过期是因为<code>(当前时间-时间起点)/时间间隔</code>结果不是 0 的原因。<br>大概使用方法就是在 Redis（或 Mysql）存一个时间戳，用户请求两步验证器的时候就根据这个时间戳做时间原点生成验证码并返回，校验的时候根据这个时间戳做时间原点生成验证码并 equals。<br>要是是离线的验证器，比如当年的网银实体密保器，快没电的时候必须去银行更换电池，要是自己更换电池验证码就不正确了，其实就是密保器断电之后时间原点重置为开机时间就和服务器保存的时间原点（其实也是密保器发给你的时候的开机时间）不一致了，这时候只要去银行同步一下密保器的时间就可以了。</p><h3 id="显示验证码过期倒计时"><a href="#显示验证码过期倒计时" class="headerlink" title="显示验证码过期倒计时"></a>显示验证码过期倒计时</h3><p>在 Steam 账号密保或者谷歌/微软两步验证上我们会看到会提示验证码的过期秒数，实际上也很容易获取，就是<code>时间间隔-(当前时间-时间原点)%时间间隔</code>的结果，修改 Main 类为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        totp(secret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户密钥，可以基于用户名、用户id等生成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String secret = <span class="string">&quot;liuzhuoming&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算验证码的时间起点（单位秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> T0 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//验证码过期时间间隔（单位秒）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> X = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">totp</span><span class="params">(String secret)</span> </span>&#123;</span><br><span class="line">        String seed = TOTP.str2HexStr(secret);</span><br><span class="line"></span><br><span class="line">        StringBuilder steps;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        df.setTimeZone(TimeZone.getTimeZone(<span class="string">&quot;UTC&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">                <span class="keyword">long</span> T = (localDateTime.toEpochSecond(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)) - T0) / X;</span><br><span class="line">                <span class="comment">//计算验证码过期剩余时间</span></span><br><span class="line">                <span class="keyword">long</span> remainSeconds = X - ((localDateTime.toEpochSecond(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)) - T0) % X);</span><br><span class="line">                steps = <span class="keyword">new</span> StringBuilder(Long.toHexString(T).toUpperCase());</span><br><span class="line">                <span class="keyword">while</span> (steps.length() &lt; <span class="number">16</span>) steps.insert(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">                System.out.println(localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)) + <span class="string">&quot; &gt;&gt;&gt; &quot;</span></span><br><span class="line">                        + <span class="string">&quot;remain &quot;</span> + remainSeconds + <span class="string">&quot;s &gt;&gt;&gt; &quot;</span></span><br><span class="line">                        + TOTP.generateTOTP(seed, steps.toString(), <span class="string">&quot;6&quot;</span>, <span class="string">&quot;HmacSHA256&quot;</span>));</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 main 方法得到结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2020-01-12 13:51:07 &gt;&gt;&gt; remain 3s &gt;&gt;&gt; 720175</span><br><span class="line">2020-01-12 13:51:08 &gt;&gt;&gt; remain 2s &gt;&gt;&gt; 720175</span><br><span class="line">2020-01-12 13:51:09 &gt;&gt;&gt; remain 1s &gt;&gt;&gt; 720175</span><br><span class="line">2020-01-12 13:51:10 &gt;&gt;&gt; remain 5s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:11 &gt;&gt;&gt; remain 4s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:12 &gt;&gt;&gt; remain 3s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:13 &gt;&gt;&gt; remain 2s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:14 &gt;&gt;&gt; remain 1s &gt;&gt;&gt; 241119</span><br><span class="line">2020-01-12 13:51:15 &gt;&gt;&gt; remain 5s &gt;&gt;&gt; 249852</span><br><span class="line">2020-01-12 13:51:16 &gt;&gt;&gt; remain 4s &gt;&gt;&gt; 249852</span><br></pre></td></tr></table></figure><p>可见其中<code>remain</code>的值符合验证码到期剩余秒数。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>授权中心-Oauth2+JWT补全</title>
      <link href="/2020/01/09/Spring-Cloud-Greenwich-SR2-14/"/>
      <url>/2020/01/09/Spring-Cloud-Greenwich-SR2-14/</url>
      
        <content type="html"><![CDATA[<p>解决几个遗留问题。<br><em>这里用上上一章《注册中心/配置中心-Nacos》的代码开始修改。</em><br>上次有人问我代码里面那些特别奇怪的代码，比如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; scopes = (List&lt;String&gt;) ((Map) ((Map) ((OAuth2Authentication) authentication).getUserAuthentication().getDetails()).get(<span class="string">&quot;oauth2Request&quot;</span>)).get(<span class="string">&quot;scope&quot;</span>);</span><br></pre></td></tr></table></figure><p>是怎么获取到的，因为从 authentication 不管怎么正常的在 IDE 里面调用就很难调用出这么长的包括了很多强转的代码。实际上这是用 IDEA DEBUG 模式下的<code>Evaluate Expression</code>功能推算出来的，DEBUG 时候右键菜单就可以找到。虽然在 IDE 里没办法调用可能的强转类型的方法/变量，但是在这里就可以从 authentication 后面输入.就会显示出包括本身的方法/变量和推断出可能的强转类型可以调用的方法/变量。十分方便。</p><span id="more"></span><h2 id="JWT-增强器"><a href="#JWT-增强器" class="headerlink" title="JWT 增强器"></a>JWT 增强器</h2><p><em>以下修改都在 auth 项目中。</em><br>首先将之前项目生成的的 JWT 的 playload 部分（即第二部分）<code>JTdCJTIydXNlcl9uYW1lJTIyJTNBJTIyYWRtaW4lMjIlMkMlMjJzY29wZSUyMiUzQSU1QiUyMnNlcnZlciUyMiU1RCUyQyUyMmV4cCUyMiUzQTE1Nzg2Nzg2ODglMkMlMjJhdXRob3JpdGllcyUyMiUzQSU1QiUyMmElM0FnZXQlMjIlNUQlMkMlMjJqdGklMjIlM0ElMjI5ZmJlODYyNy0wNzk4LTQ4ZWEtYjVhNi1lY2VhOGJlODMyMDIlMjIlMkMlMjJjbGllbnRfaWQlMjIlM0ElMjJjbGllbnRfMiUyMiU3RA</code>进行 Base64 解码，得到内容：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: [<span class="string">&quot;server&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;exp&quot;</span>: <span class="number">1578678688</span>,</span><br><span class="line">  <span class="attr">&quot;authorities&quot;</span>: [<span class="string">&quot;a:get&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;9fbe8627-0798-48ea-b5a6-ecea8be83202&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;client_id&quot;</span>: <span class="string">&quot;client_2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出里面只有六个参数，可以看出只作授权校验其实也足够，但有些情况下还是需要添加自定义的参数到 JWT 里面去（具体场景比较难想，就假装需要添加一个 boolean 的叫<code>test</code>的字段吧）。<br>添加 JWT 增强器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.configurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.common.DefaultOAuth2AccessToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.common.OAuth2AccessToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.OAuth2Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt增强器配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenEnhancer</span> <span class="keyword">implements</span> <span class="title">TokenEnhancer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">enhance</span><span class="params">(OAuth2AccessToken oAuth2AccessToken, OAuth2Authentication oAuth2Authentication)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; ext = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加自定义参数</span></span><br><span class="line">        ext.put(<span class="string">&quot;test&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">        ((DefaultOAuth2AccessToken) oAuth2AccessToken).setAdditionalInformation(ext);</span><br><span class="line">        <span class="keyword">return</span> oAuth2AccessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 JwtConfigurer 类，添加 JWT 增强器的 Bean：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.configurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.factory.PasswordEncoderFactories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JwtAccessTokenConverter accessTokenConverter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        KeyStoreKeyFactory keyStoreKeyFactory =</span><br><span class="line">                <span class="keyword">new</span> KeyStoreKeyFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;jwt.jks&quot;</span>), <span class="string">&quot;654321&quot;</span>.toCharArray());</span><br><span class="line">        accessTokenConverter.setKeyPair(keyStoreKeyFactory.getKeyPair(<span class="string">&quot;jwt&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> accessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加JWT增强器的Bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenEnhancer <span class="title">tokenEnhancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenEnhancer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 AuthorizationServerConfigurer：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.configurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.ClientDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenEnhancerChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权服务配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfigurer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore tokenStore;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenEnhancer tokenEnhancer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.withClientDetails(clientDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为多个增强器，这里使用增强器链</span></span><br><span class="line">        TokenEnhancerChain enhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">        List&lt;TokenEnhancer&gt; enhancerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        enhancerList.add(tokenEnhancer);</span><br><span class="line">        enhancerList.add(jwtAccessTokenConverter);</span><br><span class="line">        enhancerChain.setTokenEnhancers(enhancerList);</span><br><span class="line"></span><br><span class="line">        endpoints</span><br><span class="line">                .tokenStore(tokenStore)</span><br><span class="line">                .authenticationManager(authenticationManager)</span><br><span class="line">                .userDetailsService(userDetailsService)</span><br><span class="line">                .accessTokenConverter(jwtAccessTokenConverter)</span><br><span class="line">                .tokenEnhancer(enhancerChain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> </span>&#123;</span><br><span class="line">        security</span><br><span class="line">                .allowFormAuthenticationForClients()</span><br><span class="line">                .tokenKeyAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">                .checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientDetailsService <span class="title">clientDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后重启 auth 项目。<br>用 Postman 请求 token 的 Post 请求<a href="http://localhost:5432/auth/oauth/token?username=admin&password=123456&grant_type=password">http://localhost:5432/auth/oauth/token?username=admin&amp;password=123456&amp;grant_type=password</a>（注意<code>header</code>的<code>Basic Auth</code>不能丢），得到结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXN0Ijp0cnVlLCJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbInNlcnZlciJdLCJleHAiOjE1Nzg2ODAyMzksImF1dGhvcml0aWVzIjpbImE6Z2V0Il0sImp0aSI6ImVmZDExZTM4LWVmYjUtNDdjYy1iZmE3LTk2NzAxYzljYTU5MCIsImNsaWVudF9pZCI6ImNsaWVudF8yIn0.jkXobY18MkgyOCRPra2z0vv-UQZVZh5YOX7wMkhAGVnmWJ8z9qnd89dY-okFmMhC7EVmejkLkMYw6Gr-UET9sjE-BsjSqFKnG3D2vDzyARSBKqoEXC7GqLGofR7jRylP8KTw9YBTdOxDrvFJJdZ4Tfa8v_RUDSrNEYcn7DGdd9YLsgBv34X1IoTLucATB6cJ55sY9mjlI_bFigs_qX2zvUdsLEPFaKx55B37wrX86HNgydF-oBbo-ijiWONV-WslzFEkD-5o64uedUdDUaxf5adG_hJJXe3mopjKtpYtDEebiNyR-fq7EnIits8DZpNMT5Nt6yWQqHgAS8AOIfZQTA&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXN0Ijp0cnVlLCJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbInNlcnZlciJdLCJhdGkiOiJlZmQxMWUzOC1lZmI1LTQ3Y2MtYmZhNy05NjcwMWM5Y2E1OTAiLCJleHAiOjE1ODEyMjkwMzksImF1dGhvcml0aWVzIjpbImE6Z2V0Il0sImp0aSI6ImEzMDdmMmZhLTRmNTAtNDhiMi1iNjExLTFlYWVlZjMxMjYwOCIsImNsaWVudF9pZCI6ImNsaWVudF8yIn0.Raywk6MTAFlB2C5362dd3nVJUkEsaojfethPFHFfFUEFNCkqETUAmb27rmj1bgxqmyvpecjwkYKOtAteKANaoXGUJYglNMH8wLt7qYiXGzoebxeEntkImUkpb6wyvzu7foblp0RR1mzqZwGxb1VehlfULxB14wuO-P8TD7j7lKAcruWvTmV6x_ma3jnhznS_hB0kH-L09OsUmNDcDl8GYaMk9h2U85rGWf0Fn4iJnvnzBixPit5cIFXCe2Ksm7wm1zHg-z_hDlQFGQnpjqABNvKRdqlIlPTbsh538YOKv1Ei4gDxFt1zMZu63bQPmJ8Mi_M-EwsBDA4mKHNKdgfIlQ&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">43199</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;efd11e38-efb5-47cc-bfa7-96701c9ca590&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>test</code>参数已经出现在返回值里面了。然后像上面做的一样解析 payload<code>eyJ0ZXN0Ijp0cnVlLCJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbInNlcnZlciJdLCJleHAiOjE1Nzg2ODAyMzksImF1dGhvcml0aWVzIjpbImE6Z2V0Il0sImp0aSI6ImVmZDExZTM4LWVmYjUtNDdjYy1iZmE3LTk2NzAxYzljYTU5MCIsImNsaWVudF9pZCI6ImNsaWVudF8yIn0</code>，得到结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: [<span class="string">&quot;server&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;exp&quot;</span>: <span class="number">1578680239</span>,</span><br><span class="line">  <span class="attr">&quot;authorities&quot;</span>: [<span class="string">&quot;a:get&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;efd11e38-efb5-47cc-bfa7-96701c9ca590&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;client_id&quot;</span>: <span class="string">&quot;client_2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>test</code>参数也存在 JWT 的 payload 里面。说明添加 JWT 增强器成功。<br><em>要在 client 端使用自定义的增强参数需要自行解析<code>Header</code>里面的<code>Authorization</code>，很简单，在这里就不做说明了。</em></p><h2 id="用户操作（增删改查）"><a href="#用户操作（增删改查）" class="headerlink" title="用户操作（增删改查）"></a>用户操作（增删改查）</h2><p><em>以下修改都在 auth 项目中。</em><br>之前的用户名都是我自己生成之后配置在内存或者 Mysql 里面的，现在我们新增一个添加新用户的接口用来自己生成用户。<br>之前的用户密码都是通过 bcrypt 加密和解密的，而且相应的 Bean<code>PasswordEncoder</code>之前已经在<code>JwtConfigurer</code>类写好了只是一直没用，现在我们可以把它拿出来了。<br>首先修改 mapper，service，controller（密码加盐，接口校验，捕获异常等全部省略）：<br>修改 UserMapper.xml：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;xyz.liuzhuoming.auth.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAuthoritiesByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultType</span>=<span class="string">&quot;xyz.liuzhuoming.auth.entity.Authority&quot;</span>&gt;</span></span><br><span class="line">    SELECT a.id,a.`name`,a.authority</span><br><span class="line">    FROM authority a</span><br><span class="line">    LEFT JOIN role_authority ra ON ra.authority_id=a.id</span><br><span class="line">    LEFT JOIN user_role ur ON ra.role_id=ur.role_id</span><br><span class="line">    LEFT JOIN `user` u ON ur.user_id=u.id</span><br><span class="line">    WHERE u.username=#&#123;username&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;xyz.liuzhuoming.auth.entity.User&quot;</span>&gt;</span></span><br><span class="line">     INSERT INTO user (username,password)VALUES(#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 UserMapper：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.Authority;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名获取权限集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 权限集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Authority&gt; <span class="title">selectAuthoritiesByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增 UserService 接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 UserDetailsServiceImpl 实现 UserService 接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.Authority;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.User;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.mapper.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span>, <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        userLambdaQueryWrapper</span><br><span class="line">                .eq(User::getUsername, username);</span><br><span class="line">        User user = userMapper.selectOne(userLambdaQueryWrapper);</span><br><span class="line">        List&lt;Authority&gt; authorityList = userMapper.selectAuthoritiesByUsername(username);</span><br><span class="line">        user.setAuthorities(<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">new</span> HashSet&lt;&gt;(authorityList)));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用bcrypt加密密码</span></span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        userMapper.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 UserController：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.OAuth2Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.User;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.service.impl.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.Principal;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/current&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Principal <span class="title">current</span><span class="params">(OAuth2Authentication oAuth2Authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oAuth2Authentication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="comment">//可以添加权限校验来防止没权限用户添加新用户，这里就不演示了</span></span><br><span class="line"><span class="comment">//    @PreAuthorize(&quot;hasAuthority(&#x27;user:insert&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userService.insertUser(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完成后重启 auth 项目，然后用 Postman 的 Post 请求<a href="http://localhost:5432/auth/user?username=test&password=123456">http://localhost:5432/auth/user?username=test&amp;password=123456</a>来添加一个用户名为 test 密码为 123456 的新用户，返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;&#123;bcrypt&#125;$2a$10$Hy13zqg3XsOaGkARIIryIOPWHWjS1h4fqs9yBT9Ez4WMFJ8fXMbsi&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;authorities&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;credentialsNonExpired&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;accountNonExpired&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;accountNonLocked&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见密码已经正确的被 bcrypt 加密了。<br>然后用 Postman 获取 token，修改之前的请求 token 的 Post 请求为<a href="http://localhost:5432/auth/oauth/token?username=test&password=123456&grant_type=password">http://localhost:5432/auth/oauth/token?username=test&amp;password=123456&amp;grant_type=password</a>（注意<code>header</code>的<code>Basic Auth</code>不能丢），返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Nzg2ODI5ODQsInRlc3QiOnRydWUsInVzZXJfbmFtZSI6InRlc3QiLCJqdGkiOiI3NGRmODY1Zi03YWU2LTQ1MWMtYjE3ZS0xNGZjYzYzN2UxMjYiLCJjbGllbnRfaWQiOiJjbGllbnRfMiIsInNjb3BlIjpbInNlcnZlciJdfQ.l-b06T86TiqBbSXTAvTd6J3a2HncVi7VtmPCa6ERejFoVHV1qczBzfw1Lzz4XXuU1-JQJx217mASLgNv6_FRyiLglXtn5K0wrohEDSZkbJFOm0GNauNibFn8CvwBKqDnfH97wn5AwAmdp3AAQsB3heHK-5vKsSh-0_r3Gu_209AtAmkheot63vbeu0eaD3Q_CvzE3XrrrubsGh8P9z0NeeCEd67VovcFYOMhR2kh5T2UFBxBXunGiIz7K46OcxzKz2BDVaxUjIi5WIVP1XIsOJrQcm_ssGeATWSk1WbRGlcwJvyeHsIusuQzV0Z7GSANsOTOoFDs1N_bswqYbtsWiA&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXN0Ijp0cnVlLCJ1c2VyX25hbWUiOiJ0ZXN0Iiwic2NvcGUiOlsic2VydmVyIl0sImF0aSI6Ijc0ZGY4NjVmLTdhZTYtNDUxYy1iMTdlLTE0ZmNjNjM3ZTEyNiIsImV4cCI6MTU4MTIzMTc4NCwianRpIjoiZDM3Y2MwZDItZTMwMy00ZWRkLTk2ZmYtZGZmZTdhNWY1MDA1IiwiY2xpZW50X2lkIjoiY2xpZW50XzIifQ.bQcEpdUK613JkC0gR9LnbX04WwhV__6AqKYhQ-Q2kJhSyxS4SJxsy1yRTDRXM3mAWrXyXBDg5j-JZIpPYhpfQipDtjIhE3Ig_SkXklHCSmeLguqWea_x-9i8R3g2aioW8WBqc3s_nh3B7xn9AKDZ2rzlCwCLCzZ97NH8fWk4Q3u3u0IdwEV0wK5tBnES3zoIPudWqIDIUPUuPy21C5oy9gYR_oik0iMVuR-8m1_9IKGjwUxIh9JeeMgdalawg-PXrfNHnUZb9TzeTy4jZatnO4pVL9L0noeUzPxJb4uwXN2XRrkLy9Bb5TKXHn1fdx3IR5RnhIfwAKdIa3tDXYGHYQ&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">43199</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;74df865f-7ae6-451c-b17e-14fcc637e126&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这个<code>access_token</code>请求<a href="http://localhost:5432/client/principle">http://localhost:5432/client/principle</a>（_虽然新增用户没有角色也没有权限，但是这个接口也不需要权限，所以可以正常请求_），返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;authorities&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;details&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;remoteAddress&quot;</span>: <span class="string">&quot;192.168.0.106&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sessionId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;tokenValue&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Nzg2ODI5ODQsInRlc3QiOnRydWUsInVzZXJfbmFtZSI6InRlc3QiLCJqdGkiOiI3NGRmODY1Zi03YWU2LTQ1MWMtYjE3ZS0xNGZjYzYzN2UxMjYiLCJjbGllbnRfaWQiOiJjbGllbnRfMiIsInNjb3BlIjpbInNlcnZlciJdfQ.l-b06T86TiqBbSXTAvTd6J3a2HncVi7VtmPCa6ERejFoVHV1qczBzfw1Lzz4XXuU1-JQJx217mASLgNv6_FRyiLglXtn5K0wrohEDSZkbJFOm0GNauNibFn8CvwBKqDnfH97wn5AwAmdp3AAQsB3heHK-5vKsSh-0_r3Gu_209AtAmkheot63vbeu0eaD3Q_CvzE3XrrrubsGh8P9z0NeeCEd67VovcFYOMhR2kh5T2UFBxBXunGiIz7K46OcxzKz2BDVaxUjIi5WIVP1XIsOJrQcm_ssGeATWSk1WbRGlcwJvyeHsIusuQzV0Z7GSANsOTOoFDs1N_bswqYbtsWiA&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tokenType&quot;</span>: <span class="string">&quot;Bearer&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;decodedDetails&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;authenticated&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;userAuthentication&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;authorities&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;details&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;authorities&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;details&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;remoteAddress&quot;</span>: <span class="string">&quot;192.168.0.106&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;sessionId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;tokenValue&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Nzg2ODI5ODQsInRlc3QiOnRydWUsInVzZXJfbmFtZSI6InRlc3QiLCJqdGkiOiI3NGRmODY1Zi03YWU2LTQ1MWMtYjE3ZS0xNGZjYzYzN2UxMjYiLCJjbGllbnRfaWQiOiJjbGllbnRfMiIsInNjb3BlIjpbInNlcnZlciJdfQ.l-b06T86TiqBbSXTAvTd6J3a2HncVi7VtmPCa6ERejFoVHV1qczBzfw1Lzz4XXuU1-JQJx217mASLgNv6_FRyiLglXtn5K0wrohEDSZkbJFOm0GNauNibFn8CvwBKqDnfH97wn5AwAmdp3AAQsB3heHK-5vKsSh-0_r3Gu_209AtAmkheot63vbeu0eaD3Q_CvzE3XrrrubsGh8P9z0NeeCEd67VovcFYOMhR2kh5T2UFBxBXunGiIz7K46OcxzKz2BDVaxUjIi5WIVP1XIsOJrQcm_ssGeATWSk1WbRGlcwJvyeHsIusuQzV0Z7GSANsOTOoFDs1N_bswqYbtsWiA&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;tokenType&quot;</span>: <span class="string">&quot;Bearer&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;decodedDetails&quot;</span>: <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;authenticated&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;userAuthentication&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;authorities&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;details&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;authenticated&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;principal&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;credentials&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;principal&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;oauth2Request&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;clientId&quot;</span>: <span class="string">&quot;client_2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;scope&quot;</span>: [<span class="string">&quot;server&quot;</span>],</span><br><span class="line">        <span class="attr">&quot;requestParameters&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;client_id&quot;</span>: <span class="string">&quot;client_2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;resourceIds&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;authorities&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;approved&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;refresh&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;redirectUri&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;responseTypes&quot;</span>: [],</span><br><span class="line">        <span class="attr">&quot;extensions&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">&quot;grantType&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;refreshTokenRequest&quot;</span>: <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;credentials&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;clientOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;authenticated&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;principal&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;credentials&quot;</span>: <span class="string">&quot;N/A&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;credentials&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;clientOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;principal&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;oauth2Request&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;clientId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;scope&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;requestParameters&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;resourceIds&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;authorities&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;approved&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;refresh&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;redirectUri&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;responseTypes&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;extensions&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;grantType&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;refreshTokenRequest&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见添加的新用户可以正常使用。<br>删除用户，修改用户信息，添加权限，添加角色等没难度，请自行实现。</p><h2 id="Scope-的运用"><a href="#Scope-的运用" class="headerlink" title="Scope 的运用"></a>Scope 的运用</h2><p>之前一直没理解 Oauth2 的<code>scope</code>是做什么用的，而 client 又必须提供一个<code>scope</code>，不然请求 token 的时候会报错<code>Empty scope (either the client or the user is not allowed the requested scopes)</code>。<br>所以为了防止报错都是写死了一个<code>scope</code>值为<code>server</code>，但是写了又没利用到感觉十分奇怪，后来看到微信支付（或者微信公众号，具体忘记了）的 Oauth2 授权不同<code>scope</code>用作返回不同渠道的数据，突然想到 scope 完全可以用来做数据权限。</p><h3 id="Scope-作数据权限"><a href="#Scope-作数据权限" class="headerlink" title="Scope 作数据权限"></a>Scope 作数据权限</h3><p>首先我们先确定两个<code>scope</code>，分别是<code>dev</code>和<code>test</code>，实际上名字不重要，只要是两个不同的就行。<br>然后去数据库修改<code>oauth_client_details</code>表的 client_1 的<code>scope</code>为<code>dev</code>，client_2 的<code>scope</code>为<code>test</code>（这两个 client 都是之前添加的）。<br>然后用 Postman 请求 token，访问<a href="http://localhost:5432/auth/oauth/token?username=test&password=123456&grant_type=password">http://localhost:5432/auth/oauth/token?username=test&amp;password=123456&amp;grant_type=password</a>，<code>Basic Auth</code>为 client_2:123456，返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Nzg2ODQ4OTMsInRlc3QiOnRydWUsInVzZXJfbmFtZSI6InRlc3QiLCJqdGkiOiIxNTFlZDVmZi1lYWE1LTRhZjItYmU4Ny1mY2M0MmFmNmJkYjIiLCJjbGllbnRfaWQiOiJjbGllbnRfMiIsInNjb3BlIjpbInRlc3QiXX0.B11qq55IuL5pOVRA_prBofo9wpf6GFAv5PtZrcvtLtoSUSxsb2El-hjBNJhMsk1pu4BFtkoXB5BW16C_BQ5ISVWh92pq5qA63vNihNVlAqtW0YPz7smgfSzbs9KyGhSDR_LPz3XxuGdqc7L2Ayr5SfmSCJ87Gh53VaHNW-sI4zcAo_AoUdPfoJ-vsjdZPhVsSxjJ-51mahE_Jc5Ip3HA7O5MH0tQeVP1bBb7z05eNNjuc8Vnf5jd4yxJfRKpBi90OJKGMmFY-4NDxBrIaZPEW1kXLGrys50ZZKQoFHcUyD5_biEjWsqY_rAOsZZhwwj5YiLCRLAhJ1kUa9-YswBIyA&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXN0Ijp0cnVlLCJ1c2VyX25hbWUiOiJ0ZXN0Iiwic2NvcGUiOlsidGVzdCJdLCJhdGkiOiIxNTFlZDVmZi1lYWE1LTRhZjItYmU4Ny1mY2M0MmFmNmJkYjIiLCJleHAiOjE1ODEyMzM2OTMsImp0aSI6IjhmNWIyZjBhLWQ5NDQtNGE0Yy05OGEwLTg5ZTZmMjMxYmUyOSIsImNsaWVudF9pZCI6ImNsaWVudF8yIn0.YbpA6Xxtve9dygTqhGdL4d2DjK5fdUrLIpi-ZDEnhYayHxlbs_Hrk68LLHbaH-Pqk3YhOGkyHW6ljH4oQpmi9n0zYsY9tgXm6GGELbpw0VxEOeUkSBg8EXys6cP1Ra7xXi0Vkvj5dhkk3T1MaxhlhmgJjtRxKSNEn0Hn-_Os5EmG3YixRE8jeFsJbWv62nmQYr2jpSqwa92CMrINDlCbR2o2OFlFKbCAHD_PeD0rvDxsmMoXnvu_wgWZJZjJyHHauduaZfcq49ZlGcm5a_UulTbsCA1BkXYPP4zw-rlOemtqkN6BhblnrOzNBWDoHqn__ScK7Bi1OzYtelknSQSCyw&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">43199</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;151ed5ff-eaa5-4af2-be87-fcc42af6bdb2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见 client_2 的<code>scope</code>已经修改为<code>test</code>了。<br>然后在数据库修改 client_1 的<code>authorized_grant_types</code>字段为<code>client_credentials,refresh_token,password</code>，再用 Postman 请求 token，访问<a href="http://localhost:5432/auth/oauth/token?username=test&password=123456&grant_type=password">http://localhost:5432/auth/oauth/token?username=test&amp;password=123456&amp;grant_type=password</a>，<code>Basic Auth</code>为 client_1:123456，返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1Nzg2ODUwNDIsInRlc3QiOnRydWUsInVzZXJfbmFtZSI6InRlc3QiLCJqdGkiOiJlMTI3ZjBiNC1iNzQ4LTQ4YzAtYTFlYS0wZjc3NzI3MjFkYmIiLCJjbGllbnRfaWQiOiJjbGllbnRfMSIsInNjb3BlIjpbImRldiJdfQ.f6FSkVo3i7MUmqLbDMgPS4XDWNiB7TPJw2k6tMeA8waw8rxyFsQWXnb_ujMfCfGxBBXZPbHLvus-B73WfDi18WJ4x-oITbOlUFnTwtzempK58YEqwcm62VeTB0s7D4fWIOZS9YiVL1uX7BoExxQ5KMZqD_Ynj_bYiDsCLL3cKBHL0s67eAO530zy4YkfkqAmcV5UNb8FuZoHyzQD2rxo5MH0YaNbMTUgS7h2foYi4vn1uZYZmeYGw5Zh7KvvkkuDmvDLC8iMAWToxwP_ZjL_m-7MeVNeLB3a4z5a0xBAhF5pMQGufvoEG9rWk_be7qGTprgPZupdDH6EsowP0IgAjQ&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0ZXN0Ijp0cnVlLCJ1c2VyX25hbWUiOiJ0ZXN0Iiwic2NvcGUiOlsiZGV2Il0sImF0aSI6ImUxMjdmMGI0LWI3NDgtNDhjMC1hMWVhLTBmNzc3MjcyMWRiYiIsImV4cCI6MTU4MTIzMzg0MiwianRpIjoiMzdkY2ViN2UtNDhhOS00ODI1LWE3Y2MtZGY0ZTU3YjQ0YmZkIiwiY2xpZW50X2lkIjoiY2xpZW50XzEifQ.A1aLYQDCAEriF5h4TeCKyFudVHUG20wp3GBIgIPdkB3V0p5UOpvG4g5UDxUfAr2o7RDdPQLIv6Laj3ZuR3PIF8X7o7MniC6YVii5iO-VrUoY7XiO7D8-PWnLx-6N1PdiA6LsQI9ym4bIsrEhkbCitwB-uY094Ack2DI1NWIrLZMcg6GmDIQ0-oIut4SnFxqfV2g8kVnWkSwX0SnTWCskd11mtcGcmU4aMYBpvXjNviV0rzWM9VImiWa_pquMBY1HZC4spJRU3sidKW9Q1n7l3XmioiWi5igOPnAus2-GwtqhnV8q9VxSd-Ytq1Qfcm3oJqlTZl267c0HyOF74K7jdQ&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">43199</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;dev&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;e127f0b4-b748-48c0-a1ea-0f7772721dbb&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见 client_1 的<code>scope</code>已经修改为<code>dev</code>了。<br>然后修改 client 项目的 TestController 为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.client.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.OAuth2Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/a&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;a:get&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/b&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;b:get&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/principle&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">principle</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authentication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据scope返回对应数据</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/data&quot;)</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">data</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从Authentication获取scope集合</span></span><br><span class="line">        List&lt;String&gt; scopes = (List&lt;String&gt;) ((Map) ((Map) ((OAuth2Authentication) authentication).getUserAuthentication().getDetails()).get(<span class="string">&quot;oauth2Request&quot;</span>)).get(<span class="string">&quot;scope&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(scopes.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String scope : scopes) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (scope) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;test&quot;</span>:</span><br><span class="line">                    list.add(<span class="string">&quot;11111&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;dev&quot;</span>:</span><br><span class="line">                    list.add(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用 client_2 请求 token 后在 Postman 带 token 请求<a href="http://localhost:5432/client/data">http://localhost:5432/client/data</a>，返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;11111&quot;</span>]</span><br></pre></td></tr></table></figure><p>然后用 client_1 请求 token 后在 Postman 带 token 请求<a href="http://localhost:5432/client/data">http://localhost:5432/client/data</a>，返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;123456&quot;</span>]</span><br></pre></td></tr></table></figure><p>可见正确的进行了不同数据权限的区分。</p><h2 id="Oauth2-的-Client-操作（增删改查）"><a href="#Oauth2-的-Client-操作（增删改查）" class="headerlink" title="Oauth2 的 Client 操作（增删改查）"></a>Oauth2 的 Client 操作（增删改查）</h2><p>加密方式同用户模块。略</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Spring Cloud Oauth2 </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins配置Maven项目CI</title>
      <link href="/2019/12/30/GitLab%EF%BC%88Gitea%EF%BC%89-Jenkins%E9%85%8D%E7%BD%AEMaven%E9%A1%B9%E7%9B%AECI-CD/"/>
      <url>/2019/12/30/GitLab%EF%BC%88Gitea%EF%BC%89-Jenkins%E9%85%8D%E7%BD%AEMaven%E9%A1%B9%E7%9B%AECI-CD/</url>
      
        <content type="html"><![CDATA[<p>需要提前准备三个服务器（或者自己想办法用虚拟机或者 Docker 等）：Jenkins 服务器，GitLab 服务器，项目发布服务器。<br>Jenkins 服务器提前装好 JDK，Maven，Git 等环境，项目发布服务器提前装好 JDK 等环境并开启 22 和 8080 端口，Jenkins 提前安装 Publish Over SSH，Maven Integration，Git 等插件。</p><span id="more"></span><h2 id="上传最简单的-Spring-Boot-Web-项目到-GitLab"><a href="#上传最简单的-Spring-Boot-Web-项目到-GitLab" class="headerlink" title="上传最简单的 Spring Boot Web 项目到 GitLab"></a>上传最简单的 Spring Boot Web 项目到 GitLab</h2><p>创建 Spring Boot Web 项目，新增 controller：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;i is fishs!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后项目上传到 GitLab。</p><h2 id="配置项目发布服务器"><a href="#配置项目发布服务器" class="headerlink" title="配置项目发布服务器"></a>配置项目发布服务器</h2><h3 id="创建项目启动脚本"><a href="#创建项目启动脚本" class="headerlink" title="创建项目启动脚本"></a>创建项目启动脚本</h3><p>在/usr/local 目录下创建 webapps/demo 目录，并创建 jenkins-restart.sh 文件（**<a href="jenkins-restart.sh">点击下载</a>**）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">upid=`netstat -lnp |grep 8080 |grep -v grep |awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span>|awk -F <span class="string">&quot;/&quot;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$upid</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="variable">$upid</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;start&quot;</span></span><br><span class="line">    nohup java -jar demo.jar &gt; log.out 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;restart&quot;</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$upid</span></span><br><span class="line">    nohup java -jar demo.jar &gt; log.out 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>其中<code>8080</code>对应自己项目的<code>server.port</code>，<code>demo.jar</code>对应自己项目的打包名称（可以通过 pom.xml 的<code>build.finalName</code>来修改）。</p><h3 id="创建用于-SSH-的-RSA-密钥"><a href="#创建用于-SSH-的-RSA-密钥" class="headerlink" title="创建用于 SSH 的 RSA 密钥"></a>创建用于 SSH 的 RSA 密钥</h3><p>生成 RSA 密钥及导入密钥过程略。<br>保存私钥文件 id_rsa 到开发机任意位置备用。</p><h2 id="配置-Jenkins-服务器"><a href="#配置-Jenkins-服务器" class="headerlink" title="配置 Jenkins 服务器"></a>配置 Jenkins 服务器</h2><h3 id="上传项目发布服务器用于-SSH-的私钥文件"><a href="#上传项目发布服务器用于-SSH-的私钥文件" class="headerlink" title="上传项目发布服务器用于 SSH 的私钥文件"></a>上传项目发布服务器用于 SSH 的私钥文件</h3><p>上传刚才保存的私钥文件 id_rsa 到密钥文件路径（比如/usr/local/.ssh/id_rsa 之类的）</p><h3 id="配置-Maven-项目所需环境"><a href="#配置-Maven-项目所需环境" class="headerlink" title="配置 Maven 项目所需环境"></a>配置 Maven 项目所需环境</h3><p>配置位置在<code>Manage Jenkins</code>-&gt;<code>Global Tool Configuration</code>。<br><code>JDK</code>：配置本机 JAVA_HOME 地址，<br><code>Maven</code>：配置本机 MAVEN_HOME 地址，<br><code>Git</code>：配置本机 Git 执行文件地址（直接写 git 也可以，会去默认位置查找 Git 执行文件）。</p><h3 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h3><p>配置位置在在<code>Manage Jenkins</code>-&gt;<code>Configure System</code>。<br>配置<code>Publish over SSH</code>：<br>其中<code>Passphrase</code>：配置密钥密码（如果有的话，没有为空），<br><code>Path to key</code>：配置密钥文件路径（比如/usr/local/.ssh/id_rsa 之类的），<br><code>Key</code>：配置密钥文件内容（和上面选一个就可以了）。<br>然后点击<code>Add SSH Server</code>，<br><code>Name</code>：配置自定义的服务名称（比如 test-server），<br><code>Hostname</code>：配置项目发布服务器 ip，<br><code>Username</code>：配置登陆用户名，<br><code>Remote Directory</code>：配置 Jar 文件上传后的根目录（比如/usr/local/webapps/），如果端口不是 22 就在高级选项里面配置<code>Port</code>。<br>之后保存。<br><img src="01.png" alt="01.png"></p><h3 id="配置-Maven-项目"><a href="#配置-Maven-项目" class="headerlink" title="配置 Maven 项目"></a>配置 Maven 项目</h3><p>点<code>新建Item</code>，选择<code>构建一个maven项目</code>，确定。<br>然后配置<code>源码管理</code>-&gt;<code>Git</code>-&gt;<code>Repositories</code>：<br><code>Repository URL</code>：里面填写 Git 项目仓库地址，如果是私有仓库，需要点击<code>添加</code>添加 Jenkins 凭证，填写 GitLab 的账号密码即可，之后在<code>Credentials</code>下拉框选择刚才新增的凭证。<br><img src="02.png" alt="02.png"><br>然后配置<code>Post Steps</code>：<br>点击<code>Add post-build step</code>，<br>在下拉框选择<code>Send files or execute commands over SSH</code>，然后在<code>SSH Publishers</code>点击<code>Add Server</code>，<br><code>Name</code>：选择上一步<code>Publish over SSH</code>-&gt;<code>SSH Server</code>里面配置的服务名称（比如 test-server），<br>然后在<code>Transfers</code>点击<code>Add Transfers Set</code>，<br><code>Source files</code>：为 SpringBoot 项目根目录下打包 Jar 包的位置（比如 target/demo.jar），<br><code>Remove prefix</code>：为除了 Jar 包名之外的路径（比如 target），<br><code>Remote directory</code> 为项目发布服务器放 Jar 包的相对地址（在上一步<code>Publish over SSH</code>-&gt;<code>SSH Server</code>里面配置的 Jar 文件上传后的根目录（比如/usr/local/webapps/）之下），<br><code>Exec command</code>：为 Jar 包上传到项目发布服务器之后运行的命令（配置运行项目启动脚本就可以了，比如 sh /usr/local/webapps/demo/jenkins-restart.sh）。<br>保存。<br><img src="03.png" alt="03.png"></p><h2 id="构建并发布"><a href="#构建并发布" class="headerlink" title="构建并发布"></a>构建并发布</h2><p>进入 test-server 工程里面点击<code>Build Now</code>按钮，左下角会出现一个构建进度条，点进<code>控制台输出</code>可以看构建和发布进度，如果没有报错并且最后一句提示<code>SSH: Transferred 1 file(s)</code>就是构建并发布成功了。<br>然后访问项目发布服务器 ip:8080 就可以看到页面显示<code>i is fishs!</code>。<br>然后在 Spring Boot 项目里面的 TestController 修改<code>i is fishs!</code>为<code>you dead</code>并提交到 GitLab，然后在 Jenkins 的 test-server 工程点击<code>Build Now</code>按钮，点进去可以看到本次 Git 提交的 commit 内容，并且等到构建和发布完成之后，访问项目发布服务器 ip:8080 就可以看到页面显示<code>you dead</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Git </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扫雷（岛屿问题）</title>
      <link href="/2019/12/17/%E5%B2%9B%E5%B1%BF%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/17/%E5%B2%9B%E5%B1%BF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>前几天群里小伙伴们在讨论 leetcode 的岛屿问题算法，我一看给看乐了，这不就是扫雷扫空地的算法吗，当初自己开始学习编程的时候，是从 html 和 js 开始学的，为了让自己学的投入一点就从零开发了个网页版的扫雷，纯 html+js+css 完成埋雷标记扫空地等操作。因为是用 tr 和 td 构建的版面，所以大于 9*9 必然卡爆，在这就不细谈了，总之当时就有了能够解决岛屿问题的思路。</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>略</p><h2 id="思路及解法"><a href="#思路及解法" class="headerlink" title="思路及解法"></a>思路及解法</h2><p>具体思路就是遍历二维数组，遇到数值为 1 的（即岛屿）就将它自己和其上下左右的数值修改为-1（标记），并使用递归重复上述过程，这样就会将初始数值上下左右所有相连的的岛屿标记为已查询过并给计数器加 1，遇到数值为 0（即水）或者-1（已标记）直接跳过，等到整个二维数组全部遍历一遍之后就得到了岛屿数量。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; islands.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; islands[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                index = findAdjacentElement(i, j) ? index + <span class="number">1</span> : index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 岛屿数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 岛屿二维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[][] islands = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标记并查找相邻元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h 行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">findAdjacentElement</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v &gt;= <span class="number">0</span> &amp;&amp; h &gt;= <span class="number">0</span> &amp;&amp; v &lt; islands.length &amp;&amp; h &lt; islands[<span class="number">0</span>].length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (islands[v][h] == <span class="number">1</span>) &#123;</span><br><span class="line">                islands[v][h] = -<span class="number">1</span>;</span><br><span class="line">                findAdjacentElement(v - <span class="number">1</span>, h);</span><br><span class="line">                findAdjacentElement(v + <span class="number">1</span>, h);</span><br><span class="line">                findAdjacentElement(v, h - <span class="number">1</span>);</span><br><span class="line">                findAdjacentElement(v, h + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果做成一个 gif 图片大概就是扫雷游戏在区大雷少的情况下开场点一下左上角，一片空地被相继扫出来的样子吧。</p><p>所以下次要是再有人说算法无用时，可以甩出这个案例给他看，<strong>虽然工作用不到，但是自己做小游戏还是有的用的啊（并没有）</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态路由-Gateway</title>
      <link href="/2019/11/13/Spring-Cloud-Greenwich-SR2-12/"/>
      <url>/2019/11/13/Spring-Cloud-Greenwich-SR2-12/</url>
      
        <content type="html"><![CDATA[<p>网关（gateway）是整个程序的入口，为了增删路由而反复停止和启动网关有很大可能会造成某个时间段整个程序无法访问的问题，解决办法就是在不重启网关的情况下动态增删路由。</p><span id="more"></span><h2 id="官方实现"><a href="#官方实现" class="headerlink" title="官方实现"></a>官方实现</h2><p><strong><em>在某个需求产生之后的第一反应，应该是去查看官方是否已有实现。</em></strong><br>于是通过查看 gateway 的官网文档<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.0.RC2/reference/html/#retrieving-information-about-a-particular-route">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.0.RC2/reference/html/#retrieving-information-about-a-particular-route</a>，我们找到下面的描述：</p><blockquote><p>The table below summarises the Spring Cloud Gateway actuator endpoints. Note that each endpoint has <strong><em>/actuator/gateway</em></strong> as the base-path.</p></blockquote><p>即支持开启 actuator 的 gateway endpoint，并附上了这个 endpoint 下面对应的功能表格：</p><table><thead><tr><th>ID</th><th>HTTP Method</th><th>Description</th></tr></thead><tbody><tr><td>globalfilters</td><td>GET</td><td>Displays the list of global filters applied to the routes.</td></tr><tr><td>routefilters</td><td>GET</td><td>Displays the list of GatewayFilter factories applied to a particular route.</td></tr><tr><td>refresh</td><td>POST</td><td>Clears the routes cache.</td></tr><tr><td>routes</td><td>GET</td><td>Displays the list of routes defined in the gateway.</td></tr><tr><td>routes/{id}</td><td>GET</td><td>Displays information about a particular route.</td></tr><tr><td>routes/{id}</td><td>POST</td><td><strong>Add a new route to the gateway.</strong></td></tr><tr><td>routes/{id}</td><td>DELETE</td><td><strong>Remove an existing route from the gateway.</strong></td></tr></tbody></table><p>其中我加粗的描述翻译过来分别是“给 gateway 添加一个新路由”和“从 gateway 删除一个已存在的路由”，也就是说 gateway 原生支持动态路由功能（不过只能通过 JSON 格式的路由来实现）。<br>同时还给出了一个很有用的 JSON 格式的路由示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;first_route&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;predicates&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Path&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;args&quot;</span>: &#123; <span class="attr">&quot;_genkey_0&quot;</span>: <span class="string">&quot;/first&quot;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;filters&quot;</span>: [],</span><br><span class="line">  <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;https://www.uri-destination.org&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;order&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到_genkey_0 这个不同寻常的参数名称，我们明白从 yml 到 JSON 的配置转换应该是有点复杂，接下来再进行具体分析，先新建项目进行测试。</p><h3 id="官方实现验证"><a href="#官方实现验证" class="headerlink" title="官方实现验证"></a>官方实现验证</h3><h4 id="创建测试项目"><a href="#创建测试项目" class="headerlink" title="创建测试项目"></a>创建测试项目</h4><p>因为 Nacos 十分好用，所以接下来的注册中心依旧采用 Nacos，不使用配置中心，注册和管理地址还是<a href="http://localhost:8848/">http://localhost:8848/</a>。<br>新建 maven pom 项目，名称为 gateway-dynamic-routes-demo，pom.xml 修改为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway-dynamic-routes-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gateway-dynamic-routes-demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建 gateway 模块，pom.xml 为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway-dynamic-routes-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gdr-admin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gdr-gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>其中 actuator 依赖是为了方便操作 endpoint。</em><br>application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gdr-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">gdr-client1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gdr-client1</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/gdr-client1/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">info,health,refresh,gateway</span></span><br></pre></td></tr></table></figure><p>新建 admin 模块，pom.xml 为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway-dynamic-routes-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gdr-admin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gdr-admin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot-admin.version</span>&gt;</span>2.1.6<span class="tag">&lt;/<span class="name">spring-boot-admin.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9876</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><p>启动类修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.config.EnableAdminServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> x-047</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建两个服务 client1 和 client2，除了 pom.xml 的 name 和 application.yml 的 port 和启动类的名称包名等，其他完全一致，就是最简单的 Nacos 注册客户端实现，pom.xml 示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway-dynamic-routes-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gdr-client1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gdr-client1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8765</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">info,health,refresh</span></span><br></pre></td></tr></table></figure><p>启动类修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuooming.client1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Client1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后启动 gateway.admin,client1.client2 四个项目。<br>使用 Postman 访问<a href="http://localhost:5432/gdr-client1/test">http://localhost:5432/gdr-client1/test</a>，返回：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdr-client1</span><br></pre></td></tr></table></figure><p>使用 Postman 访问<a href="http://localhost:5432/gdr-client2/test">http://localhost:5432/gdr-client2/test</a>，返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2019-11-14T07:30:02.067+0000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/gdr-client2/test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Not Found&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明在 gateway 的 application.yml 的路由配置成功。</p><h4 id="使用-Admin-添加和删除路由"><a href="#使用-Admin-添加和删除路由" class="headerlink" title="使用 Admin 添加和删除路由"></a>使用 Admin 添加和删除路由</h4><p>用浏览器访问<a href="http://localhost:9876/#/wallboard">http://localhost:9876/#/wallboard</a>，点击查看 gdr-gateway 服务详情，打开 Gateway 菜单，可以看到有 Routes 和 Add Route 等卡片：<br><img src="01.jpg" alt="01.jpg"><br>其中 Routes 卡片显示有一个 Id 为 gdr-client1 的路由存在，即我们在 yml 配置的路由。点击可以查看配置详情：<br><img src="02.jpg" alt="02.jpg"><br>但是尝试删除的时候却提示 Failed，这是因为从 endpoint 只能删除从 endpoint 添加的路由，无论是在配置类还是 yml 配置文件写的路由都没办法删除。<br>然后在添加路由之前先分析一下官方 JSON 路由实例里面的参数名为什么是”_genkey_0”这种奇怪的命名方式。<br>断言和过滤器其实是一个道理，我们就以断言为主来分析，首先找到了 PredicateDefinition 类，是用来解析 yml 路由配置的，即断言定（解）义（析）类，找到这样的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] args = tokenizeToStringArray(text.substring(eqIdx + <span class="number">1</span>), <span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">  <span class="keyword">this</span>.args.put(NameUtils.generateName(i), args[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即将断言对应的参数根据分割符<code>,</code>拆分成一个数组，并用下标做 key，数组的值做 value 存进了一个 map 里面，再点进 NameUtils 类，找到：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GENERATED_NAME_PREFIX = <span class="string">&quot;_genkey_&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateName</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> GENERATED_NAME_PREFIX + i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 JSON 断言不需要经过这样的解析，直接就需要解析之后的数据格式，所以才需要添加类似_genkey_0 这样的参数名。<br>虽然不知道这么做的原因，但是我们已经找到了构建 JSON 路由的方法。<br>然后就可以毫无顾忌地根据官方示例构建一个 client2 的 JSON 路由：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;gdr-client2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;predicates&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Path&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;args&quot;</span>: &#123; <span class="attr">&quot;_genkey_0&quot;</span>: <span class="string">&quot;/gdr-client2/**&quot;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;filters&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StripPrefix&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;args&quot;</span>: &#123; <span class="attr">&quot;_genkey_0&quot;</span>: <span class="string">&quot;1&quot;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;lb://gdr-client2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;order&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>等同于在 application.yml 添加路由配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">gdr-client2</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">lb://gdr-client2</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Path=/gdr-client2/**</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>不过要是通过 Admin 添加路由的话只需要把每部分分别填入对应的框里然后点击添加路由就可以了，比如上面的 JSON 等同于：<br><img src="03.jpg" alt="03.jpg"><br>添加之后手动刷新上面的 Routes 卡片，会发现已经多了一条路由：<br><img src="04.jpg" alt="04.jpg"><br>再次使用 Postman 访问<a href="http://localhost:5432/gdr-client2/test">http://localhost:5432/gdr-client2/test</a>，返回：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdr-client2</span><br></pre></td></tr></table></figure><p>当然因为是我们从 endpoint 添加的路由，所以删除也是 ok 的。可以自行测试，不再赘述。</p><h3 id="官方实现方式分析"><a href="#官方实现方式分析" class="headerlink" title="官方实现方式分析"></a>官方实现方式分析</h3><p>通过添加路由和删除路由的请求路径，可以找到 InMemoryRouteDefinitionRepository 类，很容易可以看出实际上路由实例 RouteDefinition 都是存在一个 map 里的，然后通过对 map 的操作进行路由的增删。</p><h2 id="Redis-实现"><a href="#Redis-实现" class="headerlink" title="Redis 实现"></a>Redis 实现</h2><p>官方实现虽然可以使用，但是存在两个问题：</p><ol><li>路由实例保存在内存（map）中，要是遇到网关服务宕机或者别的导致服务停止的状况，自己添加的路由都无法保存下来</li><li>只能保存路由实例最后一次修改的状态，无法得知修改的过程</li></ol><p>问题 2 可以通过自己写添加和删除路由的管理服务，把 JSON 路由存为文件并添加版本控制（Git）来解决（暂不作说明），问题 1 很容易想到利用 Redis（或者其他的 Mongodb，Mysql 等）来存储 JSON 路由来解决。<br>根据 InMemoryRouteDefinitionRepository 类创建 RedisRouteDefinitionRepository 类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.config.route;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinitionRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.support.NotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis实现动态路由</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRouteDefinitionRepository</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, RouteDefinition&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Flux.fromIterable(redisTemplate.&lt;String, RouteDefinition&gt;opsForHash()</span><br><span class="line">            .entries(<span class="string">&quot;gateway-routes&quot;</span>).values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> route.flatMap(r -&gt; &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(<span class="string">&quot;gateway-routes&quot;</span>, r.getId(), r);</span><br><span class="line">            <span class="keyword">return</span> Mono.empty();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">delete</span><span class="params">(Mono&lt;String&gt; routeId)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, RouteDefinition&gt; map = redisTemplate.&lt;String, RouteDefinition&gt;opsForHash()</span><br><span class="line">            .entries(<span class="string">&quot;gateway-routes&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> routeId.flatMap(id -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(id)) &#123;</span><br><span class="line">                redisTemplate.opsForHash().delete(<span class="string">&quot;gateway-routes&quot;</span>, id);</span><br><span class="line">                <span class="keyword">return</span> Mono.empty();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Mono</span><br><span class="line">                .defer(() -&gt; Mono.error(<span class="keyword">new</span> NotFoundException(<span class="string">&quot;RouteDefinition not found: &quot;</span> + id)));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让 Redis 存储的数据比较直观，需要配置 RedisTemplate 序列化方式为 Jackson：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis设置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(</span><br><span class="line">            Object.class);</span><br><span class="line"></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(mapper);</span><br><span class="line"></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line"></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并手动创建 Redis 路由仓库的 Bean：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.gateway.config.route.RedisRouteDefinitionRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinitionRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring cloud config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RouteDefinitionRepository <span class="title">redisRouteDefinitionRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisRouteDefinitionRepository();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启 Gateway 项目，按照之前的步骤重新添加 client2 的路由，无论增删查完全 ok。<br>当然实际项目一般不会使用 Admin 来增删查路由，本文只是证明了 Gateway 动态路由的实现原理而已。</p><h2 id="Redis-实现-pro"><a href="#Redis-实现-pro" class="headerlink" title="Redis 实现 pro"></a>Redis 实现 pro</h2><p>上面虽然实现了通过 Redis 管理路由列表，但是也带来了两个问题：</p><ol><li>不安全：<ol><li>通过 Actuator 的 endpoint 增删查路由极度的不安全，因为 gateway 服务本身就是需要暴露在外的，所以 endpoint 无法隐藏，任何可以访问网关的用户都可以增删查路由，而使用 Spring Security 加密 endpoint 却会影响其他正常请求（还要先解决 gateway 项目引入 security 依赖会提示缺少 tomcat 依赖，引入了 tomcat/web 依赖会提示和 webflux 依赖冲突的问题，我暂时不想尝试去解决），试着查了一下官方文档和国内外的技术网站和博客也没找到解决方案（老版 Actuator 可以针对某一个 endpoint 单独加密，然而新版移除了这个功能）</li><li>Actuator 的 endpoint 的请求没办法设置用户访问权限</li></ol></li><li>不方便：通过 Admin 操作 Actuator 的 endpoint 可能不容易察觉到，增删操作之后路由是不会即时刷新的，必须手动请求一次 refresh endpoint 把刷新路由事件发布之后才会把新增/删除的路由刷新到路由的缓存（CachingRouteLocator）里面去，之后才可以在路由列表里面看到新增/删除的变化</li></ol><p>针对第一点，因为 gateway endpoint 如果不开启的话包括路由数据解析和路由缓存刷新等很多功能都需要自己注入 bean，因为太麻烦就保持 gateway endpoint 的开启，只不过我们选择自己创建接口进行路由的增删操作，并且将 RouteDefinitionRepository 增删路由的方法 delete/save 直接返回 UnsupportedOperationException 异常（查路由的方法 getRouteDefinitions 因为涉及到 gateway 中路由缓存的刷新等，所以保留），具体是创建一个符合 Restful Api 的 RouteController:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.route;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.event.RefreshRoutesEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinitionRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.support.NotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisherAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * routes</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;routes&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteController</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ApplicationEventPublisher publisher;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String GATEWAY_ROUTES = <span class="string">&quot;GATEWAY_ROUTES&quot;</span>;</span><br><span class="line">    <span class="meta">@Qualifier(&quot;redisRouteDefinitionRepository&quot;)</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RouteDefinitionRepository definitionRepository;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, RouteDefinition&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;NullableProblems&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.definitionRepository.getRouteDefinitions();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; save(<span class="meta">@PathVariable</span> String id,</span><br><span class="line">        <span class="meta">@RequestBody</span> Mono&lt;RouteDefinition&gt; route) &#123;</span><br><span class="line">        Mono&lt;ResponseEntity&lt;Object&gt;&gt; mono = route</span><br><span class="line">            .flatMap(r -&gt; &#123;</span><br><span class="line">                redisTemplate.opsForHash().put(GATEWAY_ROUTES, r.getId(), r);</span><br><span class="line">                <span class="keyword">return</span> Mono.empty();</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(Mono.defer(() -&gt; Mono</span><br><span class="line">                .just(ResponseEntity.created(URI.create(<span class="string">&quot;/routes/&quot;</span> + id)).build())));</span><br><span class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> mono;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; delete(<span class="meta">@PathVariable</span> String id) &#123;</span><br><span class="line">        Map&lt;String, RouteDefinition&gt; map = redisTemplate.&lt;String, RouteDefinition&gt;opsForHash()</span><br><span class="line">            .entries(GATEWAY_ROUTES);</span><br><span class="line">        Mono&lt;ResponseEntity&lt;Object&gt;&gt; mono = Mono.just(id)</span><br><span class="line">            .flatMap(routeId -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(routeId)) &#123;</span><br><span class="line">                    redisTemplate.opsForHash().delete(GATEWAY_ROUTES, routeId);</span><br><span class="line">                    <span class="keyword">return</span> Mono.empty();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Mono</span><br><span class="line">                    .defer(() -&gt; Mono</span><br><span class="line">                        .error(<span class="keyword">new</span> NotFoundException(<span class="string">&quot;RouteDefinition not found: &quot;</span> + routeId)));</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(Mono.defer(() -&gt; Mono.just(ResponseEntity.ok().build())))</span><br><span class="line">            .onErrorResume(t -&gt; t <span class="keyword">instanceof</span> NotFoundException,</span><br><span class="line">                t -&gt; Mono.just(ResponseEntity.notFound().build()));</span><br><span class="line">        <span class="keyword">this</span>.publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> mono;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>其中<code>this.publisher.publishEvent(new RefreshRoutesEvent(this));</code>即发布路由刷新事件。具体有兴趣可以搜索 Spring Boot 事件发布去学习。</em><br>并将 RedisRouteDefinitionRepository 修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.route;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.event.RefreshRoutesEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinitionRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.support.NotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisherAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis实现动态路由</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRouteDefinitionRepository</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String GATEWAY_ROUTES = <span class="string">&quot;GATEWAY_ROUTES&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, RouteDefinition&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; Mono.error(<span class="keyword">new</span> UnsupportedOperationException()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">delete</span><span class="params">(Mono&lt;String&gt; routeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.defer(() -&gt; Mono.error(<span class="keyword">new</span> UnsupportedOperationException()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Flux.fromIterable(redisTemplate.&lt;String, RouteDefinition&gt;opsForHash()</span><br><span class="line">            .entries(GATEWAY_ROUTES).values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启 gateway 项目，在 Postman 使用 POST 请求<a href="http://localhost:5432/routes/gdr-client2">http://localhost:5432/routes/gdr-client2</a>，RequestBody 数据为：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;gdr-client2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;predicates&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Path&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;_genkey_0&quot;</span>: <span class="string">&quot;/gdr-client2/**&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;filters&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StripPrefix&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;_genkey_0&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;lb://gdr-client2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;order&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 Postman 使用 GET 请求<a href="http://localhost:5432/routes">http://localhost:5432/routes</a>得到返回值：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;gdr-client2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;predicates&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Path&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;_genkey_0&quot;</span>: <span class="string">&quot;/gdr-client2/**&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;filters&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;StripPrefix&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;_genkey_0&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;uri&quot;</span>: <span class="string">&quot;lb://gdr-client2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;order&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>说明添加路由成功，然后请求<a href="http://localhost:5432/gdr-client2/test">http://localhost:5432/gdr-client2/test</a>，返回：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdr-client2</span><br></pre></td></tr></table></figure><p>说明路由配置成功。<br>之后先在 Postman 用 DELETE 请求<a href="http://localhost:5432/routes/gdr-client2">http://localhost:5432/routes/gdr-client2</a>，然后再次请求<a href="http://localhost:5432/gdr-client2/test">http://localhost:5432/gdr-client2/test</a>，返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2019-11-18T09:34:03.866+0000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/gdr-client2/test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Not Found&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明路由删除也是 ok 的。<br>要是再次使用 Admin 进行路由增删操作，会发现返回错误信息：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2019-11-18T09:35:43.225+0000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/actuator/gateway/routes/gdr-client2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且同时后台也会报错：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[499eec62] 500 Server Error for HTTP DELETE &quot;/actuator/gateway/routes/gdr-client2&quot;</span><br><span class="line">java.lang.UnsupportedOperationException: null</span><br></pre></td></tr></table></figure><p>说明禁止 endpoint 对路由的增删也 ok 了。<br><strong>RouteController 里面啰里啰唆的方法是参照并合并了 AbstractGatewayControllerEndpoint 及 InMemoryRouteDefinitionRepository 相关方法的原因。</strong><br><em>接口的用户操作权限管理自行实现。</em></p><p><del>不过说了这么多，我干嘛不直接在配置中心修改application.yml来实现路由更新呢？卒。</del><br>主要是为了配置文件解耦，在分布式系统里面配置解耦很重要。比如可以组合多个配置文件来提高配置文件的复用性等。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册中心/配置中心-Nacos</title>
      <link href="/2019/10/23/Spring-Cloud-Greenwich-SR2-11/"/>
      <url>/2019/10/23/Spring-Cloud-Greenwich-SR2-11/</url>
      
        <content type="html"><![CDATA[<p><strong>Nacos</strong>简直太棒了！<br>阿里 🐂🍺！<br>注册服务速度比 Eureka 快不说，还添加了注册服务的增删改管理（Eureka 必须手动发送 DELETE 请求到指定服务地址才能删除注册服务），配置中心还解决了 Spring Cloud Config 本地跑服务修改配置无法自动刷新的问题（因为配置在外网 git 仓库，除非使用内网穿透），而且 Eureka 转 Nacos 极其简单，复杂的服务迁移过程也不会超过五分钟。<br>简直太强了！！！<br>微不足道的缺点：没有注册鉴权功能，也就是说任何一个人只要知道你的 Nacos 注册地址，都可以把他的服务注册进去<del>白嫖</del>（不过 Nacos 一般部署在内网不会对外开放，所以问题不大）。</p><p><em>这里用上一章《授权中心-Oauth2+JWT》的代码做替换示范（包含注册中心和配置中心）。</em></p><span id="more"></span><p>Nacos 官网对 Nacos 介绍如下：</p><blockquote><p>Welcome to Nacos!<br>Nacos is committed to help you discover, configure, and manage your microservices. It provides a set of simple and useful features enabling you to realize dynamic service discovery, service configuration, service metadata and traffic management.<br>Nacos makes it easier and faster to construct, deliver and manage your microservices platform. It is the infrastructure that supports a service-centered modern application architecture with a microservices or cloud-native approach.</p></blockquote><blockquote><p>欢迎来到 Nacos 的世界！<br>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p></blockquote><p>简单来讲官方对 Nacos 定位就是<strong>服务发现、配置及其管理</strong>。</p><h2 id="配置-Nacos-持久化配置列表到-Mysql-并启动"><a href="#配置-Nacos-持久化配置列表到-Mysql-并启动" class="headerlink" title="配置 Nacos 持久化配置列表到 Mysql 并启动"></a>配置 Nacos 持久化配置列表到 Mysql 并启动</h2><p>上 Github 下载<a href="https://github.com/alibaba/nacos/releases">最新版 Nacos 编译 zip 包</a>,下载完成后解压到任意位置。<br>找到 nacos 根目录下的\conf\application.properties.example 找到其中的 mysql 配置示例：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">db.num</span>=<span class="string">2</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.url.1</span>=<span class="string">jdbc:mysql://11.163.152.9:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">nacos_devtest</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">nacos</span></span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用数据库类型为mysql（nacos1.1.4之后不添加这行配置的话默认走内置内存数据库）</span></span><br><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment">#数据库数量</span></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#数据库地址（多个的话按示例所示增加数字）</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://localhost:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="comment">#数据库账号</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>并粘贴到\conf\application.properties 文件最下面。<br>然后在 Mysql 新建名为 nacos 的库，并找到\conf\nacos-mysql.sql 文件，用 Navicat 等工具导入 nacos 库里。<br>双击\bin\startup.cmd 启动 Nacos。</p><h2 id="删除-eureka-项目"><a href="#删除-eureka-项目" class="headerlink" title="删除 eureka 项目"></a>删除 eureka 项目</h2><p>在父项目 pom 里删除 eureka 的 module，然后再删除整个 eureka 子项目，并将父项目 pom 的 dependencyManagement 声明 spring-cloud-alibaba-dependencies 的依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-oauth2-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>client<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改-gateway-项目"><a href="#修改-gateway-项目" class="headerlink" title="修改 gateway 项目"></a>修改 gateway 项目</h2><p>首先删除 application.yml，并在 pom 文件删除 eureka-client 的依赖并添加 nacos-discovery 和 nacos-config 的依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-oauth2-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 resources 下面新建 bootstrap.yml：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#config会根据application.name，profiles.active，nacos.config.file-extension匹配配置文件的Data Id，匹配关系是&#123;name&#125;-&#123;active&#125;.&#123;file-extension&#125;，没有配置active则匹配&#123;name&#125;.&#123;file-extension&#125;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#Nacos注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment">#Nacos配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class="line">        <span class="comment">#Nacos配置文件类型（默认为properties，我们修改为yml）</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br></pre></td></tr></table></figure><h2 id="修改-auth-项目"><a href="#修改-auth-项目" class="headerlink" title="修改 auth 项目"></a>修改 auth 项目</h2><p>和 gateway 项目类似，删除 application.yml，pom 修改为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-oauth2-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加 bootstrap.yml：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6543</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">auth</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="修改-client-项目"><a href="#修改-client-项目" class="headerlink" title="修改 client 项目"></a>修改 client 项目</h2><p>和 gateway 项目类似，删除 application.yml，pom 修改为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-oauth2-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加 bootstrap.yml：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">$&#123;spring.cloud.nacos.discovery.server-addr&#125;</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br></pre></td></tr></table></figure><h2 id="配置-Nacos-的配置列表"><a href="#配置-Nacos-的配置列表" class="headerlink" title="配置 Nacos 的配置列表"></a>配置 Nacos 的配置列表</h2><p>浏览器访问<a href="http://localhost:8848/nacos/index.html">http://localhost:8848/nacos/index.html</a>，有时候访问不了，就看一下启动 Nacos 时候的日志：<br><img src="01.jpg" alt="01.jpg"><br>红圈里的地址就是 Nacos 管理后台的地址。<br>进入<strong>配置列表</strong>页面，点击<code>导入配置</code>按钮导入配置文件（**<a href="nacos_config_export_2020-01-09.zip">点击下载</a>**）。<br>配置正确的话列表显示如下：<br><img src="02.jpg" alt="02.jpg"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动 auth，gateway，client 项目，用 Postman 请求<a href="http://localhost:5432/auth/oauth/token?username=user_2&password=123456&grant_type=password&scope=all">http://localhost:5432/auth/oauth/token?username=user_2&amp;password=123456&amp;grant_type=password&amp;scope=all</a>，并在 Postman 的 Authorization 参数选择 Basic Auth 参数，并填写 oauth2 客户端 id 和密钥，请求之后返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NzE4MjU2NzUsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiYTpwb3N0IiwiYjpnZXQiLCJhOmdldCJdLCJqdGkiOiI4MWQ2NjhiYS0zNWJkLTQ5M2MtYThkZi0wZjQ1OTExNjI4YmYiLCJjbGllbnRfaWQiOiJjbGllbnRfMiIsInNjb3BlIjpbInNlcnZlciJdfQ.laJS02W_I5Q7Js5aiisToW0ejko8R9ayyDdZIPFMCUEFKZ2cU1mxswLpeX9eaKQZchlyqjtVnmUC2J1E9aDJww5RadTAM7Hifspxhde6dVmCVIoOkNJHi60UU55nsG6Ax2U1Wz1y3CKPgohOYY35MM_31_2fzhlmSnE8VbhrdQRFMXpsURhQBxT4deOU3IL4gO8tIKeU_oN4wyI07fKzM2Rqy8vCCbNxvhqBH9LcLCB-yilCEtol3rpimO36dvxjKmojpFTlwYLRYB4g3XibWn9bipJfwDLnBSCvUjtO4bM7rrFL0Uf3vns4KZ-a77yxN6s6MsLhuIUdc3UmqVK8xQ&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbInNlcnZlciJdLCJhdGkiOiI4MWQ2NjhiYS0zNWJkLTQ5M2MtYThkZi0wZjQ1OTExNjI4YmYiLCJleHAiOjE1NzQ0MTU4NzUsImF1dGhvcml0aWVzIjpbImE6cG9zdCIsImI6Z2V0IiwiYTpnZXQiXSwianRpIjoiNzdmNDY0ZDEtNjM1Mi00NTU0LWEzOGUtMTVlNTVjNWUxNzU4IiwiY2xpZW50X2lkIjoiY2xpZW50XzIifQ.qtHi4lxwQ0ruGg4N9vLPix6Uy8rCLpMm2AxEOHO7XJSVP0y0JQXgN3Ceil_cg5H56sGDT50BGg1rR6tyXMTjZ2Vu-XowA-jUFywb0Uhlhiu1kCw90Vel9GFRIbhxcewIBzzXPz7M5z04ks-eA33EJW9W_aPs2411SMZfBgW3poOMzkbwORpBiwId6YJpckwdCuPhKkKF5NoN7x62vg7mcm-fKlCqUv3jVNhkZWQHflfqtM9IHn5V3-8kjCLrUByyI1K1RUjrDrDAT9SPpdeOcAlLZzJmDQ5_vvtEMuZlJ4RaHd8jQtR9QZ9dakm0ffENgkYIl8KMcAP6cLgm6rli7A&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">1799</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;81d668ba-35bd-493c-a8df-0f45911628bf&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功获取到 token，说明 Nacos 配置成功。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>授权中心-Oauth2+JWT</title>
      <link href="/2019/10/18/Spring-Cloud-Greenwich-SR2-10/"/>
      <url>/2019/10/18/Spring-Cloud-Greenwich-SR2-10/</url>
      
        <content type="html"><![CDATA[<p>Spring Security 的官网介绍对 Spring Security 描述如下：</p><blockquote><p>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.<br>Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements.</p></blockquote><blockquote><p>Spring Security 是一个功能强大且高度可定制的身份验证和访问控制框架。它是用于保护基于 Spring 的应用程序的实际标准。<br>Spring Security 是一个框架，致力于为 Java 应用程序提供身份验证和授权。与所有 Spring 项目一样，Spring Security 的真正强大之处在于可以轻松扩展以满足自定义要求。</p></blockquote><p>简单来讲官方对 Spring Securuty 定位就是<strong>身份验证和授权</strong>框架。</p><span id="more"></span><p>Oauth2 的官网介绍对 Oauth2 描述如下：</p><blockquote><p>OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 supersedes the work done on the original OAuth protocol created in 2006. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices.</p></blockquote><blockquote><p>OAuth 2.0 是用于授权的行业标准协议。OAuth 2.0 取代了在 2006 年创建的原始 OAuth 协议上所做的工作。OAuth2.0 专注于简化客户端开发人员，同时为 Web 应用程序，桌面应用程序，移动电话和客厅设备提供特定的授权流。</p></blockquote><p>简单来讲 Oauth2 就是<strong>授权协议</strong>。<br>我们这里用 Spring Security 和 Oauth2 协议完成权限框架的设计。</p><h2 id="用户和客户端信息存在内存，token-存在-Redis"><a href="#用户和客户端信息存在内存，token-存在-Redis" class="headerlink" title="用户和客户端信息存在内存，token 存在 Redis"></a>用户和客户端信息存在内存，token 存在 Redis</h2><h3 id="新建父项目-spring-cloud-oauth2-demo"><a href="#新建父项目-spring-cloud-oauth2-demo" class="headerlink" title="新建父项目 spring-cloud-oauth2-demo"></a>新建父项目 spring-cloud-oauth2-demo</h3><p>pom 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-oauth2-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>client<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 eureka 项目为注册中心，搭建方式不再赘述，自行创建，定义端口号为 8765。</p><h3 id="创建网关-Gateway-并注册到-eureka"><a href="#创建网关-Gateway-并注册到-eureka" class="headerlink" title="创建网关 Gateway 并注册到 eureka"></a>创建网关 Gateway 并注册到 eureka</h3><p>新建项目 gateway，pom 如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-oauth2-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 如下（配置参数前文以作讲解，不再赘述）：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5432</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">500</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">auth</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://AUTH</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/auth/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">3</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@hostnameKeyResolver&#125;&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">client</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://CLIENT</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/client/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Authorization=true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8765/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">httptrace,info,health</span></span><br></pre></td></tr></table></figure><p>新建权限校验过滤器和过滤器工厂类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求权限局部过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationGatewayFilter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String token = Objects</span><br><span class="line">                .requireNonNull(exchange.getRequest().getHeaders().get(<span class="string">&quot;Authorization&quot;</span>)).get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.HIGHEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.gateway.filter.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.gateway.filter.AuthorizationGatewayFilter;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求权限局部过滤器工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationGatewayFilterFactory</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">    <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">AuthorizationGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(<span class="string">&quot;enabled&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!config.isEnabled()) &#123;</span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AuthorizationGatewayFilter().filter(exchange, chain);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否开启鉴权header验证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> enabled;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网关配置类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.gateway.filter.factory.AuthorizationGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring cloud config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">KeyResolver <span class="title">hostnameKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(</span><br><span class="line">            Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getHostName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">AuthorizationGatewayFilterFactory <span class="title">authorizationGlobalFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthorizationGatewayFilterFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建授权服务并注册到-eureka"><a href="#创建授权服务并注册到-eureka" class="headerlink" title="创建授权服务并注册到 eureka"></a>创建授权服务并注册到 eureka</h3><p>新建项目 auth，pom 文件如下（其中 redis 为存储 token）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-oauth2-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6543</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8765/eureka/</span></span><br></pre></td></tr></table></figure><p>启动类添加@EnableResourceServer 和@EnableDiscoveryClient 注解，其中第一个注解是标明服务提供了资源服务，第二个注解就不解释了：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(AuthApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后新建 Bean 注册类 SpringCloudConfig：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.factory.PasswordEncoderFactories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring cloud config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建授权服务配置类 AuthorizationServerConfigurer：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权服务配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfigurer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String secret = passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内存模拟生成两个Oauth2客户端</span></span><br><span class="line">        clients.inMemory()</span><br><span class="line">            <span class="comment">//客户端id和密钥</span></span><br><span class="line">            .withClient(<span class="string">&quot;client_1&quot;</span>).secret(secret)</span><br><span class="line">            <span class="comment">//客户端授权类型</span></span><br><span class="line">            .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;client_credentials&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">            <span class="comment">//授权范围</span></span><br><span class="line">            .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withClient(<span class="string">&quot;client_2&quot;</span>).secret(secret)</span><br><span class="line">            .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;client_credentials&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">            .scopes(<span class="string">&quot;all&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        endpoints</span><br><span class="line">            <span class="comment">//token存储方式</span></span><br><span class="line">            .tokenStore(tokenStore())</span><br><span class="line">            <span class="comment">//密码授权模式的授权管理器</span></span><br><span class="line">            .authenticationManager(authenticationManager)</span><br><span class="line">            <span class="comment">//允许的token请求类型</span></span><br><span class="line">            .allowedTokenEndpointRequestMethods(HttpMethod.GET, HttpMethod.POST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> </span>&#123;</span><br><span class="line">        security</span><br><span class="line">            <span class="comment">//允许客户端表单授权</span></span><br><span class="line">            .allowFormAuthenticationForClients();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义token存储方式为redis存储</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建用来添加模拟用户的类 WebSecurityConfigurer：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String secret = passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内存模拟生成两个用户信息</span></span><br><span class="line">        InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        manager.createUser(User</span><br><span class="line">            <span class="comment">//用户名</span></span><br><span class="line">            .withUsername(<span class="string">&quot;user_1&quot;</span>)</span><br><span class="line">            <span class="comment">//密码</span></span><br><span class="line">            .password(secret)</span><br><span class="line">            <span class="comment">//权限</span></span><br><span class="line">            .authorities(<span class="string">&quot;a:get&quot;</span>)</span><br><span class="line">            .build());</span><br><span class="line">        manager.createUser(User</span><br><span class="line">            .withUsername(<span class="string">&quot;user_2&quot;</span>)</span><br><span class="line">            .password(secret)</span><br><span class="line">            .authorities(<span class="string">&quot;b:get&quot;</span>)</span><br><span class="line">            .build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-Oauth2-客户端服务并注册到-eureka"><a href="#创建-Oauth2-客户端服务并注册到-eureka" class="headerlink" title="创建 Oauth2 客户端服务并注册到 eureka"></a>创建 Oauth2 客户端服务并注册到 eureka</h3><p>新建项目 client，pom 如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-oauth2-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 配置如下：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7654</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8765/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">oauth2:</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="comment">#从oauth2服务获取user信息接口</span></span><br><span class="line">      <span class="attr">user-info-uri:</span> <span class="string">http://localhost:5432/auth/user/current</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">      <span class="comment">#oauth2客户端id</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">client_2</span></span><br><span class="line">      <span class="comment">#oauth2客户端密钥</span></span><br><span class="line">      <span class="attr">client-secret:</span> <span class="number">123456</span></span><br><span class="line">      <span class="comment">#oauth2服务端获取token接口</span></span><br><span class="line">      <span class="attr">access-token-uri:</span> <span class="string">http://localhost:5432/auth/oauth/token</span></span><br><span class="line">      <span class="comment">#oauth2客户端请求授权类型</span></span><br><span class="line">      <span class="attr">grant-type:</span> <span class="string">client_credentials,password</span></span><br><span class="line">      <span class="comment">#oauth2客户端授权范围</span></span><br><span class="line">      <span class="attr">scope:</span> <span class="string">all</span></span><br></pre></td></tr></table></figure><p>在启动类添加注册服务注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ClientApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>oauth2 客户端配置类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.client.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.RequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.security.oauth2.client.feign.OAuth2FeignRequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.client.DefaultOAuth2ClientContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.client.OAuth2RestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableOAuth2Client;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Oauth2客户端配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableOAuth2Client</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2ClientConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConfigurationProperties(prefix = &quot;security.oauth2.client&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ClientCredentialsResourceDetails <span class="title">clientCredentialsResourceDetails</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ClientCredentialsResourceDetails();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestInterceptor <span class="title">oauth2FeignRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OAuth2FeignRequestInterceptor(<span class="keyword">new</span> DefaultOAuth2ClientContext(),</span><br><span class="line">        clientCredentialsResourceDetails());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> OAuth2RestTemplate <span class="title">clientCredentialsRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OAuth2RestTemplate(clientCredentialsResourceDetails());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源服务配置类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.client.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源服务配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfigurer</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http</span><br><span class="line">        <span class="comment">//配置访问控制</span></span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        <span class="comment">//不需要认证</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/actuator/**&quot;</span>).permitAll()</span><br><span class="line">        <span class="comment">//必须认证后才可以访问</span></span><br><span class="line">        .antMatchers(<span class="string">&quot;/a/**&quot;</span>, <span class="string">&quot;/b/**&quot;</span>).authenticated();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试资源接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.client.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/a&quot;)</span></span><br><span class="line">  <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;a:get&#x27;)&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/b&quot;)</span></span><br><span class="line">  <span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;b:get&#x27;)&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;b &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按照顺序启动 eureka，gateway，auth，client，并用 Postman 请求<a href="http://localhost:5432/auth/oauth/token?username=user_2&password=123456&grant_type=password&scope=all">http://localhost:5432/auth/oauth/token?username=user_2&amp;password=123456&amp;grant_type=password&amp;scope=all</a>，并在 Postman 的 Authorization 参数选择 Basic Auth 参数，并填写 oauth2 客户端 id 和密钥：<br><img src="01.jpg" alt="01.jpg"><br>请求之后返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;ae9baceb-c27a-4f9a-bf02-f13aa7c18f5f&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;994c5f1b-2732-452a-8f15-b92b62783deb&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">41220</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取到 access_token 之后用 Postman 请求<a href="http://localhost:5432/client/b">http://localhost:5432/client/b</a>，并在 Postman 的 Authorization 参数选择 Bearer Token 参数，并填写刚才获得的 access_token：<br><img src="02.jpg" alt="02.jpg"><br>获得结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure><p>之后用 Postman 请求<a href="http://localhost:5432/client/a">http://localhost:5432/client/a</a>，并在 Postman 的 Authorization 参数选择 Bearer Token 参数，并填写刚才获得的 access_token，得到结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;access_denied&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;error_description&quot;</span>: <span class="string">&quot;不允许访问&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到权限配置已经生效了，只有有对应 authorities 的用户才可以访问对应 authorities 的资源。</p><h2 id="用户和客户端信息和-token-存在数据库"><a href="#用户和客户端信息和-token-存在数据库" class="headerlink" title="用户和客户端信息和 token 存在数据库"></a>用户和客户端信息和 token 存在数据库</h2><p>前面是把用户和客户端信息放在内存的，实际项目当然不会这样做，token 存在 redis 是可以的就不做修改了，把用户和客户端信息存在数据库。<br>eureka 和 gateway 项目不需要修改。<br>首先在 mysql 数据库建表名为 oauth2，下载 sql 文件并导入（已经插入了部分用户信息和客户端信息）（**<a href="oauth2.sql">点击下载</a>**）。<br>其中 user，user_role，role，role_authority，authority 五张表可以自行定制，其他表是 Spring Security 官方推荐的表结构，没必要就尽量不做修改。<br>然后修改 auth 项目加入 mysql 驱动和 mybatis-plus 依赖，pom 文件修改如下“</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xyz.liuzhuoming<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-oauth2-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>auth<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 修改如下：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6543</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/oauth2?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;noAccessToProcedureBodies=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="comment">#允许覆盖已定义的bean</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8765/eureka/</span></span><br></pre></td></tr></table></figure><p>再修改授权配置类，主要是修改 tokenStore：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.configurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.ClientDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.DefaultTokenServices;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权服务配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfigurer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore tokenStore;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ClientDetailsService clientDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.withClientDetails(clientDetailsService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        DefaultTokenServices tokenServices = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">        <span class="comment">//token存储方式</span></span><br><span class="line">        tokenServices.setTokenStore(tokenStore);</span><br><span class="line">        <span class="comment">//是否允许token刷新</span></span><br><span class="line">        tokenServices.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//客户端Service</span></span><br><span class="line">        tokenServices.setClientDetailsService(clientDetailsService);</span><br><span class="line">        <span class="comment">//token有效时间（秒）</span></span><br><span class="line">        tokenServices.setAccessTokenValiditySeconds((<span class="keyword">int</span>) TimeUnit.MINUTES.toSeconds(<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">        endpoints</span><br><span class="line">            <span class="comment">//token存储方式</span></span><br><span class="line">            .tokenStore(tokenStore())</span><br><span class="line">            <span class="comment">//密码授权模式的授权管理器</span></span><br><span class="line">            .authenticationManager(authenticationManager)</span><br><span class="line">            <span class="comment">//用户Service</span></span><br><span class="line">            .userDetailsService(userDetailsService)</span><br><span class="line">            <span class="comment">//tokenService</span></span><br><span class="line">            .tokenServices(tokenServices);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> </span>&#123;</span><br><span class="line">        security</span><br><span class="line">            .allowFormAuthenticationForClients();</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//修改token存储方式为jdbc</span></span><br><span class="line"><span class="comment">//        return new JdbcTokenStore(dataSource);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientDetailsService <span class="title">clientDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置客户端信息存储方式为jdbc</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebSecurityConfigurer 类删除模拟用户方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加用户实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8630757683959992293L</span>;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@TableField</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@TableField</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Authority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加权限实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Authority</span> <span class="keyword">implements</span> <span class="title">GrantedAuthority</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1179377491735761716L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String authority;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authority;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建用户 Mapper：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.Authority;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名获取权限集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 权限集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Authority&gt; <span class="title">selectAuthoritiesByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;xyz.liuzhuoming.auth.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAuthoritiesByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">resultType</span>=<span class="string">&quot;xyz.liuzhuoming.auth.entity.Authority&quot;</span>&gt;</span></span><br><span class="line">    SELECT a.id,a.`name`,a.authority</span><br><span class="line">    FROM authority a</span><br><span class="line">    LEFT JOIN role_authority ra ON ra.authority_id=a.id</span><br><span class="line">    LEFT JOIN user_role ur ON ra.role_id=ur.role_id</span><br><span class="line">    LEFT JOIN `user` u ON ur.user_id=u.id</span><br><span class="line">    WHERE u.username=#&#123;username&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改用户 service 为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.Authority;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.entity.User;</span><br><span class="line"><span class="keyword">import</span> xyz.liuzhuoming.auth.mapper.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;userDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = <span class="keyword">new</span> LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        userLambdaQueryWrapper.eq(User::getUsername, username);</span><br><span class="line">        <span class="comment">//根据用户名查询用户查询</span></span><br><span class="line">        User user = userMapper.selectOne(userLambdaQueryWrapper);</span><br><span class="line">        <span class="comment">//根据用户名查询权限集合</span></span><br><span class="line">        List&lt;Authority&gt; authorityList = userMapper.selectAuthoritiesByUsername(username);</span><br><span class="line">        user.setAuthorities(<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">new</span> HashSet&lt;&gt;(authorityList)));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 auth 项目，进行测试，测试方法同上，请自行尝试，不再赘述。</p><h2 id="修改-token-类型为-JWT，并在-gateway-进行简单的权限校验"><a href="#修改-token-类型为-JWT，并在-gateway-进行简单的权限校验" class="headerlink" title="修改 token 类型为 JWT，并在 gateway 进行简单的权限校验"></a>修改 token 类型为 JWT，并在 gateway 进行简单的权限校验</h2><p>JWT 官网对 JWT 描述如下：</p><blockquote><p>JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA.</p></blockquote><blockquote><p>JSON Web 令牌（JWT）是一个开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于在各方之间作为 JSON 对象安全地传输信息。由于此信息是经过数字签名的，因此可以被验证和信任。可以使用秘密（使用 HMAC 算法）或使用 RSA 或 ECDSA 的公钥/私钥对对 JWT 进行签名。</p></blockquote><p>简单来讲就是个<strong>令牌标准</strong>。</p><h3 id="使用-keytool-进行-oauth2-授权服务和客户端的非对称加密"><a href="#使用-keytool-进行-oauth2-授权服务和客户端的非对称加密" class="headerlink" title="使用 keytool 进行 oauth2 授权服务和客户端的非对称加密"></a>使用 keytool 进行 oauth2 授权服务和客户端的非对称加密</h3><p><em>openSsl 可能 windows 会提示没有这个命令，所以可以在 linux 环境下生成 jks 密钥库文件和公钥。</em><br>jks 即 Java KeyStore（Java 密钥库）。<br>首先运行<code>keytool -genkeypair -alias jwt -keyalg RSA -dname &quot;CN=jwt,OU=j,O=wt,L=hz,S=zj,C=CH&quot; -keypass 654321 -keystore jwt.jks -storepass 654321</code>生成 jks 文件，其中<code>alias</code>参数意思是密钥库别名，<code>keyalg</code>加密方式，<code>dname</code>发行者信息（按顺序分别为姓名、组织机构名、组织名、城市名、省份名、国家名，可以删除<code>cname</code>参数及值来按顺序填入），<code>keypass</code>密钥密码，<code>keystore</code>密钥库文件名，<code>storepass</code>密钥库密码。会在当前文件夹生成 jwt.jks 文件（可能会提示转换行业标准之类的，可以转换也可以不转换，不影响接下来的操作），再然后运行<code>keytool -list -rfc --keystore jwt.jks | openssl x509 -inform pem -pubkey</code>从 jwt.jks 提取出密钥信息，类似：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtNIqpyseTONuqBVJfGyN</span><br><span class="line">guo74rDyxMHV8TAsLwrQpr/3YrW5ilETc9UjtA5L6ls9UctlgYf0dFwtLfiCdCei</span><br><span class="line">MP5GsBZYzKpUTAxcly7NkR96eDUUBRivh0+Qo3MRwTfCucCoxCkUJ67SvYkcwDQC</span><br><span class="line">H5d0CdfE12aFVNrdC/oG7J0S9N4YQwPVyEzNQdlN3SNfLKqQ6MmmrCHdxZ+IlN6f</span><br><span class="line">68zMMFCfcXIRC90UNpqYRS6lhrZhBc1apqtJiMmiQBdF0n1+nTrugUjA1+W0Sx9e</span><br><span class="line">hPwWSYY0GzU+e+yItGkUjRPMkB68/sX0tVgU2Z+rCWQm6Xcdy2Mq/ZWDiHrwAyuT</span><br><span class="line">5QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDOzCCAiOgAwIBAgIEXWTtbTANBgkqhkiG9w0BAQsFADBOMQswCQYDVQQGEwJD</span><br><span class="line">SDELMAkGA1UECBMCemoxCzAJBgNVBAcTAmh6MQswCQYDVQQKEwJ3dDEKMAgGA1UE</span><br><span class="line">CxMBajEMMAoGA1UEAxMDand0MB4XDTE5MTAyMjA1NDY0NloXDTIwMDEyMDA1NDY0</span><br><span class="line">NlowTjELMAkGA1UEBhMCQ0gxCzAJBgNVBAgTAnpqMQswCQYDVQQHEwJoejELMAkG</span><br><span class="line">A1UEChMCd3QxCjAIBgNVB0sTAWoxDDAKBgNVBAMTA2p3dDCCASIwDQYJKoZIhvcN</span><br><span class="line">AQEBBQADggEPADCCAQoCggEBALTSKqcrHkzjbqgVSXxsjYLqO+Kw8sTB1fEwLC8K</span><br><span class="line">0Ka/92K1uYpRE3PVI7QOS+pbPVHLZYGH9HRcLS34gnQnojD+RrAWWMyqVEwMXJcq</span><br><span class="line">zZEfeng1FAUYr4dPkKNzEcE3wrnAqMQpFCeu0r2JHMA0Ah+XdAnXxNdmhVTa3Qv6</span><br><span class="line">BuydEvTeGEMD1chMzUHZTd0jXyyqkOjJpqwh3cWfiJTen+vMzDBQn3FyEQvdFDaa</span><br><span class="line">mEUupYa2YQXNWqarSYjJokAXRdJ9fp067oFIwNfltEsfXoT8FkmGNBs1PnvsiLRp</span><br><span class="line">FI0TzJAevP7F9LVYFNmfqwlkJul3HctjKv2Vg4h68AMrk+UCAwEAAaMhMB8wHQYD</span><br><span class="line">VR0OBBYEFG9KighOWWVXffMRor4Js/Q5IpwRMA0GCSqGSIb3DQEBCwUAA4IBAQCT</span><br><span class="line">OYyEV7XAOaWfjGwEWBlTRD7x/HhNM0QiXdOmZFZ1CHl3PwzgFOG0urihM91WqreZ</span><br><span class="line">inbCKwOX/UnUjPc7bF4ighccZpHKv5GanmBXov0t0KuHjE4+6UWgVeZLjnNQZ8Hd</span><br><span class="line">GiY+Z8mj5PTQpikLVXtJOyCxDt2GW3BvBfzxB6ZPr7JaD1He6aApbb0WogjZh0M4</span><br><span class="line">dk31Xixy+wCuYSVrrrh4iscHEkufySkliKk3sseZMmUb1iyUtlTxIbJebpD1Yal9</span><br><span class="line">Qm8TCXI4vuslh4bi6HVBNHrlWf6J7ndCHV/barQ6uWVJtO7QAAgqLrFc8JP6Yxiv</span><br><span class="line">h19yWioGyQYXBkDDSSgM</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure><p>我们只需要其中的 public key 部分，即：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtNIqpyseTONuqBVJfGyN</span><br><span class="line">guo74rDyxMHV8TAsLwrQpr/3YrW5ilETc9UjtA5L6ls9UctlgYf0dFwtLfiCdCei</span><br><span class="line">MP5GsBZYzKpUTAxcly7NkR96eDUUBRivh0+Qo3MRwTfCucCoxCkUJ67SvYkcwDQC</span><br><span class="line">H5d0CdfE12aFVNrdC/oG7J0S9N4YQwPVyEzNQdlN3SNfLKqQ6MmmrCHdxZ+IlN6f</span><br><span class="line">68zMMFCfcXIRC90UNpqYRS6lhrZhBc1apqtJiMmiQBdF0n1+nTrugUjA1+W0Sx9e</span><br><span class="line">hPwWSYY0GzU+e+yItGkUjRPMkB68/sX0tVgU2Z+rCWQm6Xcdy2Mq/ZWDiHrwAyuT</span><br><span class="line">5QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>放到新建的 public.txt 文件中。<br>然后把 jwt.jks 放到 auth 项目的 resources 目录下，public.txt 放到 client 项目的 resources 目录下。</p><h3 id="修改-auth-项目的授权服务配置文件"><a href="#修改-auth-项目的授权服务配置文件" class="headerlink" title="修改 auth 项目的授权服务配置文件"></a>修改 auth 项目的授权服务配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.configurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.ClientDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.client.JdbcClientDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权服务配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfigurer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory redisConnectionFactory;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore tokenStore;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.withClientDetails(clientDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> </span>&#123;</span><br><span class="line">        endpoints</span><br><span class="line">            .tokenStore(tokenStore)</span><br><span class="line">            .authenticationManager(authenticationManager)</span><br><span class="line">            .userDetailsService(userDetailsService)</span><br><span class="line">            <span class="comment">//token生成器设置为jwt生成器</span></span><br><span class="line">            .accessTokenConverter(jwtAccessTokenConverter)</span><br><span class="line">            .tokenServices(tokenServices());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> </span>&#123;</span><br><span class="line">        security</span><br><span class="line">            .allowFormAuthenticationForClients()</span><br><span class="line">            .tokenKeyAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">            .checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientDetailsService <span class="title">clientDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后新建 JWT 配置文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.auth.configurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JwtAccessTokenConverter accessTokenConverter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        <span class="comment">//配置密钥库资源路径及密钥库密码</span></span><br><span class="line">        KeyStoreKeyFactory keyStoreKeyFactory =</span><br><span class="line">            <span class="keyword">new</span> KeyStoreKeyFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;jwt.jks&quot;</span>), <span class="string">&quot;654321&quot;</span>.toCharArray());</span><br><span class="line">        <span class="comment">//配置密钥别名</span></span><br><span class="line">        accessTokenConverter.setKeyPair(keyStoreKeyFactory.getKeyPair(<span class="string">&quot;jwt&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> accessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置tokenStore为jwt</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-client-项目的授权客户端配置文件"><a href="#修改-client-项目的授权客户端配置文件" class="headerlink" title="修改 client 项目的授权客户端配置文件"></a>修改 client 项目的授权客户端配置文件</h3><p>新增 JWT 配置文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xyz.liuzhuoming.client.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.FileCopyUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0-SNAPSHOT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JwtAccessTokenConverter <span class="title">accessTokenConverter</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        JwtAccessTokenConverter converter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        <span class="comment">//配置公钥资源路径</span></span><br><span class="line">        Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;public.txt&quot;</span>);</span><br><span class="line">        String publicKey = <span class="keyword">new</span> String(FileCopyUtils.copyToByteArray(resource.getInputStream()));</span><br><span class="line">        converter.setVerifierKey(publicKey);</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 auth 和 client 项目，用 Postman 请求<a href="http://localhost:5432/auth/oauth/token?username=user_2&password=123456&grant_type=password&scope=all">http://localhost:5432/auth/oauth/token?username=user_2&amp;password=123456&amp;grant_type=password&amp;scope=all</a>，并在 Postman 的 Authorization 参数选择 Basic Auth 参数，并填写 oauth2 客户端 id 和密钥，请求之后返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NzE3Mjc1MTIsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiYTpwb3N0IiwiYjpnZXQiLCJhOmdldCJdLCJqdGkiOiI0ZGI5NDVlMy04YWUyLTRiNmMtYWRmNi0zODM0MmUzNDQ4YWUiLCJjbGllbnRfaWQiOiJjbGllbnRfMiIsInNjb3BlIjpbInNlcnZlciJdfQ.OdeHQuS1IS_QTlYolBPPthXM3Y__X4i3f9r6Vh9BjMyiG_h6H8_wKERCRJuuWOAkIOYtOdwNXcYzpfq324IiZJlxUEQcwc3N9hQ_6xvJCyl2cvtv7RczQIZ8i1XcB2aWWY4jfYtFBgdrmS8zbYxWNghIKjiJPbuCE4uWyG52huNpRAC7K8G0tjO9CyEx6y0Q5Yckonb4AH9sr9ZMflr7mcp0wNVIwzsbj6YwwLfBybZiEwEKWOhpJJM8cp3FRosFzUN0amzoMmohTd5GW--Tdo3yf-_Z3WbMo0pXSSMeQwry7bDpzblv6IfkuwjNSr8SHFckcoj2xxYdog54vgG6dg&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbInNlcnZlciJdLCJhdGkiOiI0ZGI5NDVlMy04YWUyLTRiNmMtYWRmNi0zODM0MmUzNDQ4YWUiLCJleHAiOjE1NzQzMTc3MTIsImF1dGhvcml0aWVzIjpbImE6cG9zdCIsImI6Z2V0IiwiYTpnZXQiXSwianRpIjoiMDE2MGU3ODItYzUwYS00ZjhkLTgzY2YtM2EyNGE5YWJiNWQzIiwiY2xpZW50X2lkIjoiY2xpZW50XzIifQ.TVfQciMDlyDRU_aVU4ENyAbp9Xy5T5IlkSJaPJ8D1Bpaq4SCxoMsVehvPOLSsMm2Z03UDn7td0f9M2dfiHhT2QLhWcjZo7n2KBKNm3h0zpB-3Qyf-sfo_FB0B9tgfJ4wCLhcvZalPlFtRXJNPVrTpRRsZW-e-BYoHqIxuId_B_vPkzlB-313DoWSRa93Sn39tTnsKQaemBdkD7irZOSa9YE-O8pMNADxOD0ci38ya_xtiloVveXcVSiuWKbcblh-61JcYT-780xLa3KEqdPBTfTcj50nD9Is9RTQ2B8SCFQrmsTrjnm7QmXfe0f9SphGxKBW0M_9p6OaFRPFZ9eL4g&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">1799</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;4db945e3-8ae2-4b6c-adf6-38342e3448ae&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 access_token 已经是标准的 JWT 格式。<br>用 Postman 请求<a href="http://localhost:5432/client/b">http://localhost:5432/client/b</a>，并在 Postman 的 Authorization 参数选择 Bearer Token 参数，并填写刚才获得的 access_token，获得结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure><p>也就是说 JWT 作为 Oauth2 的 token 配置成功。<br>有兴趣的话可以在 gateway 添加简单的 JWT 有效性校验（有效期等），可以筛选掉部分非法请求，缺点就是因为 JWT 有效性自包含在 token 串内，所以无法主动注销 token，只能等待自动过期。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka </tag>
            
            <tag> Spring Cloud Gateway </tag>
            
            <tag> Spring Cloud Oauth2 </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控中心-HystrixDashboard+Turbine</title>
      <link href="/2019/09/18/Spring-Cloud-Greenwich-SR2-9/"/>
      <url>/2019/09/18/Spring-Cloud-Greenwich-SR2-9/</url>
      
        <content type="html"><![CDATA[<p>Hystrix Dashboard 的 Github README 对 Hystrix Dashboard 描述如下：</p><blockquote><p>This is a dashboard for monitoring applications using Hystrix.</p></blockquote><blockquote><p>这是一个使用 Hystrix 监控应用程序的仪表板。</p></blockquote><p>简单来讲就是<strong>监控仪表盘</strong>。</p><span id="more"></span><h2 id="创建-Hystrix-Dashboard-项目"><a href="#创建-Hystrix-Dashboard-项目" class="headerlink" title="创建 Hystrix Dashboard 项目"></a>创建 Hystrix Dashboard 项目</h2><p>创建 hystrix-dashboard 项目依赖继承 monitor-center 项目，pom.xml 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>monitor-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hystrix-dashboard<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 配置为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8070</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure><p>修改启动类 HystrixDashboardApplication 为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.hystrixdashboard;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> x-047</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(HystrixDashboardApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后启动 hystrix-dashboard 项目。<br><em>Hystrix Dashboard 顾名思义和 Hystrix 有关，即监控的项目中必须启用了 Hystrix 作为熔断，通过 Hystrix 收集并发送数据流，在本次示例里面只有 feign 项目符合条件。</em></p><h3 id="修改-feign-项目"><a href="#修改-feign-项目" class="headerlink" title="修改 feign 项目"></a>修改 feign 项目</h3><p>修改 feign 项目 application.yml，在 actuator 配置添加 hystrix.stream endpoint：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8020</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411/</span></span><br><span class="line">    <span class="attr">locator:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">httptrace,info,health,hystrix.stream</span></span><br></pre></td></tr></table></figure><p>之后重启 feign 项目，并访问<a href="http://localhost:8070/hystrix">http://localhost:8070/hystrix</a>，返回如下页面：<br><img src="01.jpg" alt="01.jpg"><br>在上面的输入框里输入<code>http://localhost:8020/actuator/hystrix.stream</code>，并点击 Monitor Stream 按钮，会跳转到 Hystrix Monitor 页面：<br><img src="02.jpg" alt="02.jpg"><br><em>有时候跳转之后页面显示为 loading 是因为被监控项目没有接收到请求的原因，手动请求一次就有显示了。</em><br>用 Postman 多次请求<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，然后会发现 Hystrix Monitor 已经显示出了请求的信息：<br><img src="03.jpg" alt="03.jpg"><br><em>如果不明白仪表盘的哪个数值代表的含义，可以把光标放到对应的数值上面，就会显示出对应的描述。</em></p><h1 id="Turbine"><a href="#Turbine" class="headerlink" title="Turbine"></a>Turbine</h1><p>Hystrix Dashboard 虽然表示的数值挺直观，但是一次只能监控一个服务的其中一个实例，不是很方便，需要和 Turbine 配合才能完成对多个服务的多个实例的监控。</p><p>Turbine 的 Github Wiki 对 Turbine 描述如下：</p><blockquote><p>Turbine is a tool for aggregating streams of Server-Sent Event (SSE) JSON data into a single stream. The targeted use case is metrics streams from instances in an SOA being aggregated for dashboards.</p></blockquote><blockquote><p>Turbine 是一种将服务器发送事件（SSE）JSON 数据流聚合到单个流中的工具。目标用例是来自正在为仪表板聚合的 SOA 中的实例的度量标准流。</p></blockquote><p>简单来讲就是<strong>数据流聚合</strong>。</p><h2 id="创建-Turbine-项目"><a href="#创建-Turbine-项目" class="headerlink" title="创建 Turbine 项目"></a>创建 Turbine 项目</h2><p>创建 turbine 项目依赖继承 monitor-center 项目，pom.xml 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>monitor-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>turbine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">info,health</span></span><br><span class="line"></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line">  <span class="comment">#需要监控的集群名称表达式</span></span><br><span class="line">  <span class="attr">clusterNameExpression:</span> <span class="string">new</span> <span class="string">String(&quot;default&quot;)</span></span><br><span class="line">  <span class="attr">aggregator:</span></span><br><span class="line">    <span class="comment">#需要监控的集群设置</span></span><br><span class="line">    <span class="attr">clusterConfig:</span> <span class="string">default</span></span><br><span class="line">  <span class="comment">#需要监控的服务名称</span></span><br><span class="line">  <span class="attr">appConfig:</span> <span class="string">feign</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>修改启动类为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.turbine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.EnableTurbine;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> x-047</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableTurbine</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurbineApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(TurbineApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，并再次访问<a href="http://localhost:8070/hystrix">http://localhost:8070/hystrix</a>，在输入框输入<code>http://localhost:8090/turbine.stream</code>并点击 Monitor Stream 按钮，会跳转到 Hystrix Monitor 页面：<br><img src="04.jpg" alt="04.jpg"><br>可以看到 host 表示的数值已经不是 1 了，具体数值跟启动的 feign 实例数量相同，比如我启动了两个 feign，在这里就显示 2。<br>证明可以成功聚合数据流。</p><p><em>多服务数据流的聚合很简单，请自行尝试。</em></p><h2 id="通过-RabbitMQ-中转-Hystrix-数据流到-Turbine"><a href="#通过-RabbitMQ-中转-Hystrix-数据流到-Turbine" class="headerlink" title="通过 RabbitMQ 中转 Hystrix 数据流到 Turbine"></a>通过 RabbitMQ 中转 Hystrix 数据流到 Turbine</h2><p>此时我们遇到了和搭建 Zipkin 时候类似的问题——服务过于耦合，Turbine 直接从注册中心接受各个服务传来的数据流，会给注册中心增加很大的负载，所以同样我们可以使用 RabbitMQ 来中转 Hystrix 数据流来解耦。<br>首先修改 feign 项目的 pom.xml：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>route-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>feign<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-hystrix-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后重启 feign 项目。<br>之后修改 turbine 项目的 pom.xml 为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>monitor-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>turbine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-turbine-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-hystrix-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 修改为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">info,health</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>启动类修改为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.turbine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.turbine.stream.EnableTurbineStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> x-047</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableTurbineStream</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurbineApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(TurbineApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启 turbine 项目。<br>接着访问 RabbitMQ 管理页面的 Exchanges 选项卡，<a href="http://localhost:15672/#/exchanges">http://localhost:15672/#/exchanges</a>：<br><img src="06.jpg" alt="06.jpg"><br>会看到已经生成了两个新的 Exchange，hystrixStreamOutput（Hystrix 发送数据流交换器），turbineStreamInput（Turbine 接收数据交换器），再打开 Queues 选项卡：<br><img src="07.jpg" alt="07.jpg"><br>会发现已经生成了一个新的 Queue，turbineStreamInput（Turbine 消息队列）。<br>但是当我们访问<a href="http://localhost:8070/hystrix">http://localhost:8070/hystrix</a>，在输入框输入<code>http://localhost:8090/turbine.stream</code>并点击 Monitor Stream 按钮，跳转到 Hystrix Monitor 页面之后却发现并没有获取到数据，即使多次使用 Postman 请求也没用。打开 Exchanges 选项卡的 hystrixStreamOutput 详情页之后可以看到：<br><img src="08.jpg" alt="08.jpg"><br>只有 Publish(In)没有 Publish(Out)，即消息在正确的产生却并没有被消费掉，点开 Bindings 按钮，可以看到下面列表是 no bindings，即消息生产者和消息消费者没有被正确的绑定导致的惨案：<br><img src="09.jpg" alt="09.jpg"><br>明白问题之后我们手动添加绑定关系，按如图所示填写绑定信息然后点击 Bind 按钮绑定：<br><img src="10.jpg" alt="10.jpg"><br>之后再次使用 Postman 请求多次<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>,并访问<a href="http://localhost:15672/#/exchanges">http://localhost:15672/#/exchanges</a>查看 Excahnges 选项卡的 hystrixStreamOutput 详情页可以发现消息已经被正确消费：<br><img src="12.jpg" alt="12.jpg"><br>访问<a href="http://localhost:8070/hystrix">http://localhost:8070/hystrix</a>，在输入框输入<code>http://localhost:8090/turbine.stream</code>并点击 Monitor Stream 按钮，跳转到 Hystrix Monitor 页面之后会发现聚合数据也已经正确显示了：<br><img src="11.jpg" alt="11.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hystrix </tag>
            
            <tag> Spring Boot Actuator </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> Hystrix Dashboard </tag>
            
            <tag> Turbine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控中心-Elasticsearch+Zipkin</title>
      <link href="/2019/09/18/Spring-Cloud-Greenwich-SR2-8/"/>
      <url>/2019/09/18/Spring-Cloud-Greenwich-SR2-8/</url>
      
        <content type="html"><![CDATA[<p>上一章虽然收集到了日志信息，但是在 Zipkin 重启之后收集到的日志会直接消失。<br>所以我们需要将日志信息进行持久化，这样 Zipkin 会从持久化仓库里面去取日志。可选的组件是 Mysql 或者 Elasticsearch 等。因为 Mysql 持久化太常见了，所以在这里我们选择 Elasticsearch（<del>然而同样很常见</del>）。</p><span id="more"></span><p>Elasticsearch 官网对 Elasticsearch 描述如下：</p><blockquote><p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。<br>通过 Elasticsearch，您能够执行及合并多种类型的搜索（结构化数据、非结构化数据、地理位置、指标），搜索方式随心而变。先从一个简单的问题出发，试试看能够从中发现些什么。找到与查询最匹配的 10 个文档是一回事。但如果面对的是十亿行日志，又该如何解读呢？Elasticsearch 聚合让您能够从大处着眼，探索数据的趋势和模式。</p></blockquote><p>简单来讲可以当作一个分布式的<strong>数据库</strong>来使用。</p><h2 id="下载并启动-Elasticsearch"><a href="#下载并启动-Elasticsearch" class="headerlink" title="下载并启动 Elasticsearch"></a>下载并启动 Elasticsearch</h2><p>访问<a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.3.zip">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.3.zip</a>下载 6.4.3 版的 Elasticsearch 并解压（Zipkin 不支持 7 及以上版本的 ElasticSearch，所以这里选用我们熟悉的 6.4.3 版）。</p><p>在 bin 目录下双击 elasticsearch.bat 启动 ElasticSearch，然后使用 Chrome 的<a href="https://chrome.google.com/webstore/detail/ffmkiejjmecolpfloofpjologoblkegm">ElasticSearch Head</a>扩展查看 ElasticSearch<strong>索引</strong>：<br><img src="01.jpg" alt="01.jpg"><br>可以看到并没有<strong>索引</strong>存在。</p><h2 id="重启-Zipkin"><a href="#重启-Zipkin" class="headerlink" title="重启 Zipkin"></a>重启 Zipkin</h2><p>依旧使用之前的 zipkin.jar 包，运行启动命令<code>java -jar zipkin.jar --zipkin.collector.rabbitmq.uri=amqp://guest:guest@localhost:5672 --STORAGE_TYPE=elasticsearch --ES_HOSTS=http://localhost:9200</code>。<br>其中 STORAGE_TYPE=elasticsearch 表明持久化组件是 ElasticSearch，ES_HOSTS 是 ElasticSearch 的通讯地址。<br>然后像之前一样用 Postman 请求<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，然后访问<a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a>，点击主页的<strong>查看</strong>按钮会显示已经统计到的日志列表：<br><img src="04.jpg" alt="02.jpg"><br>可以看到请求的链路日志已经统计在 Zipkin 里面了。<br>再查看 ElasticSearch<strong>索引</strong>：<br><img src="02.jpg" alt="04.jpg"><br>可以看到 ElasticSearch 的 Zipkin<strong>索引</strong>已经建立，查看<strong>数据浏览</strong>：<br><img src="03.jpg" alt="05.jpg"><br>可以看到<strong>数据浏览</strong>里面存的就是日志数据。<br>重启 Zipkin 服务可以看到请求的链路日志也并未丢失，也就是说日志持久化也 ok 了。<br><em>至于日志的分类和检索，请自行完成。</em></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> Zipkin </tag>
            
            <tag> Spring Cloud Sleuth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控中心-Sleuth+Zipkin</title>
      <link href="/2019/09/17/Spring-Cloud-Greenwich-SR2-7/"/>
      <url>/2019/09/17/Spring-Cloud-Greenwich-SR2-7/</url>
      
        <content type="html"><![CDATA[<p>Sleuth 官网对 Sleuth 描述如下：</p><blockquote><p>Spring Cloud Sleuth implements a distributed tracing solution for Spring Cloud, borrowing heavily from Dapper, Zipkin and HTrace. For most users Sleuth should be invisible, and all your interactions with external systems should be instrumented automatically. You can capture data simply in logs, or by sending it to a remote collector service.</p></blockquote><blockquote><p>Spring Cloud Sleuth 为 Spring Cloud 实现了分布式跟踪解决方案，大量借用 Dapper、Zipkin 和 HTrace。对于大多数用户，Sleuth 应该是不可见的，并且您与外部系统的所有交互都应自动进行检测。只需在日志中捕获数据，也可以将其发送到远程收集器服务。</p></blockquote><p>简单来讲官方对 Sleuth 的定位是<strong>捕获和发送日志</strong>。<br><em>我们用来和 Zipkin 结合使用。</em></p><span id="more"></span><p>Zipkin 的官网对 Zipkin 的描述如下：</p><blockquote><p>Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in service architectures. Features include both the collection and lookup of this data.</p></blockquote><blockquote><p>Zipkin 是一种分布式跟踪系统。它有助于收集解决服务体系结构中的延迟问题所需的计时数据。功能包括收集和查找此数据。</p></blockquote><p>简单来讲官方对 Zipkin 的定位是<strong>跟踪，收集和查找日志</strong>。</p><h2 id="通过-web-收集日志信息"><a href="#通过-web-收集日志信息" class="headerlink" title="通过 web 收集日志信息"></a>通过 web 收集日志信息</h2><p>从 Spring Boot 2.x 版本开始官方就建议使用官方编译的 Jar 包启动 Zipkin 服务了。<br>最新版下载地址是：<a href="https://search.maven.org/remote_content?g=io.zipkin&a=zipkin-server&v=LATEST&c=exec">https://search.maven.org/remote_content?g=io.zipkin&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec</a></p><p>下载完成后为方便可以改名为 zipkin.jar，然后在所在目录下运行 powershell 命令<code>java -jar zipkin.jar</code>，稍后访问<a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a>：<br><img src="01.jpg" alt="01.jpg"><br>但是这时候还没有日志来源，所以接下来我们改造之前的 producer-client 项目和 feign 项目，让他们通过 Sleuth 来发送日志到 Zipkin。</p><h3 id="producer-client-项目添加-Sleuth-和-Zipkin-依赖"><a href="#producer-client-项目添加-Sleuth-和-Zipkin-依赖" class="headerlink" title="producer-client 项目添加 Sleuth 和 Zipkin 依赖"></a>producer-client 项目添加 Sleuth 和 Zipkin 依赖</h3><p>修改 producer-client 项目的 pom.xml 为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>producer-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>producer-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 application.yml 为：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="comment">#是否开启sleuth</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#收集日志的比例，1.0=100%，默认0.1=10%</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="comment">#zipkin地址</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411/</span></span><br><span class="line">    <span class="attr">locator:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#启用通过服务发现查找主机名</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="comment">#日志收集方式为web</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">web</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">refresh,info,health</span></span><br></pre></td></tr></table></figure><p>然后重启 producer-client 项目。</p><h3 id="feign-项目添加-Sleuth-和-Zipkin-依赖"><a href="#feign-项目添加-Sleuth-和-Zipkin-依赖" class="headerlink" title="feign 项目添加 Sleuth 和 Zipkin 依赖"></a>feign 项目添加 Sleuth 和 Zipkin 依赖</h3><p>同 producer-client 项目，自行添加，不再赘述。<br>之后同样重启 feign 项目。</p><h3 id="发送及收集查询日志"><a href="#发送及收集查询日志" class="headerlink" title="发送及收集查询日志"></a>发送及收集查询日志</h3><p>像之前一样用 Postman 请求<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，然后访问<a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a>，点击主页的<strong>查看</strong>按钮会显示已经统计到的日志列表：<br><img src="02.jpg" alt="02.jpg"><br>可以看到请求的链路日志已经统计在 Zipkin 里面了，点击展开详情：<br><img src="03.jpg" alt="03.jpg"><br>即可以看到微服务里面的请求顺序和花费时间等详情。</p><h2 id="通过-RabbitMQ-收集日志信息"><a href="#通过-RabbitMQ-收集日志信息" class="headerlink" title="通过 RabbitMQ 收集日志信息"></a>通过 RabbitMQ 收集日志信息</h2><p>直接通过 web 方式收集日志会让服务和 Zipkin 服务过于耦合，所以我们可以使用 RabbitMQ 来中转收集到的日志信息来解耦。<br>首先关闭 Zipkin 服务，并运行<code>java -jar zipkin.jar --zipkin.collector.rabbitmq.uri=amqp://guest:guest@localhost:5672</code>命令启动 Zipkin 服务。<br>启动完成之后打开 RabbitMQ 的管理页面<a href="http://localhost:15672/">http://localhost:15672</a>，进入 Queue 选项卡，会发现已经添加了 zipkin 的队列：<br><img src="04.jpg" alt="04.jpg"><br>然后修改 producer-client 项目和 feign 项目。</p><h3 id="修改-producer-client-项目为通过-RabbitMQ-收集日志信息"><a href="#修改-producer-client-项目为通过-RabbitMQ-收集日志信息" class="headerlink" title="修改 producer-client 项目为通过 RabbitMQ 收集日志信息"></a>修改 producer-client 项目为通过 RabbitMQ 收集日志信息</h3><p>因为 producer-client 项目已经添加了 RabbitMQ 的依赖，所以不需要做改动。<br>修改 application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411/</span></span><br><span class="line">    <span class="attr">locator:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="comment">#使用rabbit方式发送日志</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">refresh,info,health</span></span><br></pre></td></tr></table></figure><p>之后重启项目。</p><h3 id="修改-feign-项目为通过-RabbitMQ-收集日志信息"><a href="#修改-feign-项目为通过-RabbitMQ-收集日志信息" class="headerlink" title="修改 feign 项目为通过 RabbitMQ 收集日志信息"></a>修改 feign 项目为通过 RabbitMQ 收集日志信息</h3><p>修改 pom.xml 为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>route-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>feign<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8020</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411/</span></span><br><span class="line">    <span class="attr">locator:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">rabbit</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>之后重启项目。</p><h3 id="发送及收集查询日志-1"><a href="#发送及收集查询日志-1" class="headerlink" title="发送及收集查询日志"></a>发送及收集查询日志</h3><p>和 web 方式步骤完全相同，自行尝试，不再赘述。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> Zipkin </tag>
            
            <tag> Spring Cloud Sleuth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包Github的项目上传到Maven中央仓库</title>
      <link href="/2019/09/16/%E4%B8%8A%E4%BC%A0jar%E5%88%B0maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/"/>
      <url>/2019/09/16/%E4%B8%8A%E4%BC%A0jar%E5%88%B0maven%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="创建-sonatype-帐号"><a href="#创建-sonatype-帐号" class="headerlink" title="创建 sonatype 帐号"></a>创建 sonatype 帐号</h2><p>访问<a href="https://issues.sonatype.org/secure/Dashboard.jspa">System Dashboard - Sonatype JIRA</a>，点击 Sign up 按钮创建账号。</p><span id="more"></span><h2 id="创建-issue-并完成审核"><a href="#创建-issue-并完成审核" class="headerlink" title="创建 issue 并完成审核"></a>创建 issue 并完成审核</h2><p>按提示创建完账号后登录，点击主页上面的<strong>新建</strong>按钮新建 issue：<br><img src="01.jpg" alt="01.jpg"><br>然后按提示填写 issue 描述，其中项目路径等信息填写为我们<strong>项目所在的 Github</strong>路径，groupId 填写为我们的<strong>Github 的 groupId</strong>（例如<code>com.github.xxxxxx</code>）：<br><img src="02.jpg" alt="02.jpg"><br>填写完成后点击新建，issue 就创建完成并自动跳转到该 issue 详情页面，issue 状态为<code>开放</code>，等待一小时左右人工审核完成之后，会修改 issue 状态为<code>Waiting for Response</code>并自动在 issue 的评论下面发送一条回复：<br><img src="03.jpg" alt="03.jpg"><br>即要求你在 Github 按照指定仓库名创建一个 public 的仓库证明该 Github 仓库所属人是你自己：<br><img src="14.jpg" alt="14.jpg"><br>按照提示创建完成后，点击 issue 详情页上面的 Respond 按钮完成 Github 所属人验证（忘记截图了，按钮大概位置如图所示）：<br><img src="04.jpg" alt="04.jpg"><br>之后 issue 状态会变成<code>开放</code>，并再次进行人工审核，在等待一小时左右之后，会收到另一条回复：<br><img src="05.jpg" alt="05.jpg"><br>即上传代码的提示和提醒你上传完成后在此评论表示已完成。</p><h2 id="修改-maven-及项目配置并打包上传到-Maven-中央仓库"><a href="#修改-maven-及项目配置并打包上传到-Maven-中央仓库" class="headerlink" title="修改 maven 及项目配置并打包上传到 Maven 中央仓库"></a>修改 maven 及项目配置并打包上传到 Maven 中央仓库</h2><h3 id="使用-gpg-生成密钥并上传到公共密钥库"><a href="#使用-gpg-生成密钥并上传到公共密钥库" class="headerlink" title="使用 gpg 生成密钥并上传到公共密钥库"></a>使用 gpg 生成密钥并上传到公共密钥库</h3><p>在<a href="https://www.gpg4win.org/">gpg4win</a>网站下载并安装 gpg4win，安装完成后最好重启电脑使 gpg 命令生效。<br>在 powershell 运行<code>gpg --gen-key</code>命令，并依次填写信息，确认弹出输入密钥密码的确认框：<br><img src="06.jpg" alt="06.jpg"><br>再次确认后会打印出密钥信息：<br><img src="07.jpg" alt="07.jpg"><br>将密钥上传到公共密钥库，<code> gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys xxxxxxxx</code>：<br><img src="08.jpg" alt="08.jpg"></p><h3 id="修改-maven-的配置文件-settings-xml"><a href="#修改-maven-的配置文件-settings-xml" class="headerlink" title="修改 maven 的配置文件 settings.xml"></a>修改 maven 的配置文件 settings.xml</h3><p><em>注意修改的 setting.xml 文件必须和自己 IntelliJ IDEA 的 maven 配置中保持一致。</em><br>修改自己的 settings.xml 文件，在 servers 标签内添加自己的 sonatype 帐号密码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sonatype帐号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>xxxxxxxx<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sonatype密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>xxxxxxxx<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 profiles 标签内添加 gpg 密钥信息：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gpg命令--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.executable</span>&gt;</span>gpg<span class="tag">&lt;/<span class="name">gpg.executable</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gpg密钥密码--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gpg.passphrase</span>&gt;</span>xxxxxxxx<span class="tag">&lt;/<span class="name">gpg.passphrase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改项目配置文件-pom-xml"><a href="#修改项目配置文件-pom-xml" class="headerlink" title="修改项目配置文件 pom.xml"></a>修改项目配置文件 pom.xml</h3><p>clone Github 的项目到本地并在 pom.xml 添加如下配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--省略--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>com.github.liuzhuoming23:pinyin4j-spring-boot-starter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>A Spring Boot Starter of https://github.com/belerweb/pinyin4j.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/liuzhuoming23/pinyin4j-spring-boot-starter<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>actable<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>liuzhuoming23<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">email</span>&gt;</span>416561115@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">organization</span>&gt;</span>liuzhuoming23<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/liuzhuoming23/pinyin4j-spring-boot-starter<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:git@github.com:liuzhuoming23/pinyin4j-spring-boot-starter.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:git@github.com:liuzhuoming23/pinyin4j-spring-boot-starter.git</span><br><span class="line">    <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/liuzhuoming23/pinyin4j-spring-boot-starter<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Snapshots Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Staging Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--源码打包插件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--javadoc打包插件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">docencoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">docencoding</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!--忽略doclint限制--&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">doclint</span>&gt;</span>none<span class="tag">&lt;/<span class="name">doclint</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--gpg打包插件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>sign-artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--省略--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--自动closed及release插件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nexus-staging-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">nexusUrl</span>&gt;</span>https://oss.sonatype.org/<span class="tag">&lt;/<span class="name">nexusUrl</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">autoReleaseAfterClose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">autoReleaseAfterClose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="打包并上传到-Maven-仓库"><a href="#打包并上传到-Maven-仓库" class="headerlink" title="打包并上传到 Maven 仓库"></a>打包并上传到 Maven 仓库</h3><p>_在上传之前先去<a href="https://oss.sonatype.org/#stagingRepositories">https://oss.sonatype.org/#stagingRepositories</a>，找到并 Drop/discard 所有<strong>自己</strong>提交但是报错的项目，否则可能导致上传失败。_<br>在 IntelliJ IDEA 的 Maven ToolBar 里找到运行输入框，并运行<code>mvn clean deploy -P release</code>：<br><img src="09.jpg" alt="09.jpg"><br><img src="10.jpg" alt="10.jpg"><br>在某个时刻会要求手动输入密钥密码，然后 IDEA 的 console 会打印各种打包日志等到出现如下图的日志时，说明打包和上传成功了：<br><img src="11.jpg" alt="11.jpg"><br>按照 issue 评论里的提醒，点击下面的<strong>备注</strong>按钮在 issue 评论里回复已完成，又是大概一小时左右会收到一条评论告诉你项目已同步到中央仓库，并且在若干时间后可以从 Maven 中央仓库引用此依赖，并且 issue 状态也变成了<code>已解决</code>：<br><img src="12.jpg" alt="12.jpg"><br><strong>至此，打包 Github 的项目为 Jar 包并上传到 Maven 中央仓库的流程已完成。</strong><br>几分钟后可以在<a href="https://oss.sonatype.org/#nexus-search">https://oss.sonatype.org/#nexus-search</a>搜索自己的依赖名称，会发现依赖已经上传成功了。<br><img src="13.jpg" alt="13.jpg"><br>两小时左右后可以在<a href="https://search.maven.org/">https://search.maven.org</a>搜索自己的依赖名称，会发现依赖已经同步成功了。<br><img src="15.jpg" alt="15.jpg"></p><h2 id="更新-Maven-中央仓库代码版本"><a href="#更新-Maven-中央仓库代码版本" class="headerlink" title="更新 Maven 中央仓库代码版本"></a>更新 Maven 中央仓库代码版本</h2><p>直接修改代码并修改项目 version，然后运行<code>mvn clean deploy -P release</code>等待上传完成即更新代码版本成功（<del>这次就快多了</del>）。</p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ol><li><a href="https://central.sonatype.org/pages/apache-maven.html">Apache Maven</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trie（字典树）</title>
      <link href="/2019/09/12/trie/"/>
      <url>/2019/09/12/trie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p></blockquote><span id="more"></span><h2 id="不携带数据的-Trie-简单实现"><a href="#不携带数据的-Trie-简单实现" class="headerlink" title="不携带数据的 Trie 简单实现"></a>不携带数据的 Trie 简单实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.trie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * trie</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@datetime</span> 2019/9/12 15:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * root trie node</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> TrieNode root = <span class="keyword">new</span> TrieNode(<span class="keyword">false</span>, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * put word in trie</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> word word</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    TrieNode node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node.nodes.containsKey(c)) &#123;</span><br><span class="line">        node.nodes.put(c, <span class="keyword">new</span> TrieNode(<span class="keyword">false</span>, <span class="keyword">new</span> HashMap&lt;&gt;()));</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.nodes.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    node.containsTail = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * the trie contains the word</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> word word</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> true:contains;false:not</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    TrieNode node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node.nodes.containsKey(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.nodes.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.containsTail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * remove data from trie</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> word word</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    TrieNode node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node.nodes.containsKey(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.nodes.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    node.containsTail = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * trie node</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@datetime</span> 2019/9/12 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * contains a word&#x27;s tail</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">boolean</span> containsTail;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * trie nodes</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Map&lt;Character, TrieNode&gt; nodes;</span><br><span class="line"></span><br><span class="line">  TrieNode(<span class="keyword">boolean</span> containsTail, HashMap&lt;Character, TrieNode&gt; nodes) &#123;</span><br><span class="line">    <span class="keyword">this</span>.containsTail = containsTail;</span><br><span class="line">    <span class="keyword">this</span>.nodes = nodes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TestCase"><a href="#TestCase" class="headerlink" title="TestCase"></a>TestCase</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.trie.Trie;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@datetime</span> 2019/9/12 17:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">    System.out.println(trie.contains(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    trie.put(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    System.out.println(trie.contains(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    trie.remove(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    System.out.println(trie.contains(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><ol><li>在存储空间比较拮据或者字符串重合度比较高的场景下可以使用 Trie（比如 汉字词组，英语单词 的匹配），否则使用 HashMap 就可以了；</li><li>绑定数据需要在 TrieNode 添加新属性并添加根据 word 获取数据的方法，<del>很简单就不演示了</del>，还是演示一下绑定数据和测试示例吧。</li></ol><h2 id="携带数据的-Trie-简单实现"><a href="#携带数据的-Trie-简单实现" class="headerlink" title="携带数据的 Trie 简单实现"></a>携带数据的 Trie 简单实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.trie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * trie</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@datetime</span> 2019/9/12 15:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * root trie node</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> TrieNode&lt;V&gt; root = <span class="keyword">new</span> TrieNode&lt;&gt;(<span class="keyword">false</span>, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * put word:data in trie</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> word word</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data data</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String word, V data)</span> </span>&#123;</span><br><span class="line">    TrieNode&lt;V&gt; node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node.nodes.containsKey(c)) &#123;</span><br><span class="line">        node.nodes.put(c, <span class="keyword">new</span> TrieNode&lt;V&gt;(<span class="keyword">false</span>, <span class="keyword">new</span> HashMap&lt;&gt;()));</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.nodes.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    node.containsTail = <span class="keyword">true</span>;</span><br><span class="line">    node.data = data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * get data by word from the trie</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> word word</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    TrieNode&lt;V&gt; node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node.nodes.containsKey(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.nodes.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.containsTail ? node.data : <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * the trie contains the word</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> word word</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> true:contains;false:not</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    TrieNode&lt;V&gt; node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node.nodes.containsKey(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.nodes.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.containsTail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * remove data from trie</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> word word</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">    TrieNode&lt;V&gt; node = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : word.toCharArray()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node.nodes.containsKey(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.nodes.get(c);</span><br><span class="line">    &#125;</span><br><span class="line">    node.containsTail = <span class="keyword">false</span>;</span><br><span class="line">    node.data = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * trie node</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@datetime</span> 2019/9/12 15:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * contains a word&#x27;s tail</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">boolean</span> containsTail;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * mount data</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  V data;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * trie nodes</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Map&lt;Character, TrieNode&lt;V&gt;&gt; nodes;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * just for construct root node</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> containsTail containsTail</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> nodes nodes</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  TrieNode(<span class="keyword">boolean</span> containsTail, HashMap&lt;Character, TrieNode&lt;V&gt;&gt; nodes) &#123;</span><br><span class="line">    <span class="keyword">this</span>.containsTail = containsTail;</span><br><span class="line">    <span class="keyword">this</span>.nodes = nodes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TestCase-1"><a href="#TestCase-1" class="headerlink" title="TestCase"></a>TestCase</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.trie.Trie;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 0.0.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@datetime</span> 2019/9/12 17:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Trie&lt;String[]&gt; trie = <span class="keyword">new</span> Trie&lt;&gt;();</span><br><span class="line">    System.out.println(trie.contains(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    trie.put(<span class="string">&quot;test&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;测试&quot;</span>&#125;);</span><br><span class="line">    System.out.println(trie.contains(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">    System.out.println(Arrays.toString(trie.get(<span class="string">&quot;test&quot;</span>)));</span><br><span class="line">    trie.put(<span class="string">&quot;test&quot;</span>, <span class="keyword">new</span> String[]&#123;<span class="string">&quot;@测试&quot;</span>, <span class="string">&quot;@Test&quot;</span>&#125;);</span><br><span class="line">    System.out.println(Arrays.toString(trie.get(<span class="string">&quot;test&quot;</span>)));</span><br><span class="line">    trie.remove(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    System.out.println(Arrays.toString(trie.get(<span class="string">&quot;test&quot;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">[测试]</span><br><span class="line">[@测试, @Test]</span><br><span class="line">null</span><br></pre></td></tr></table></figure><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ol><li><a href="https://zh.wikipedia.org/wiki/Trie">Trie - 维基百科，自由的百科全书</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控中心-Admin</title>
      <link href="/2019/08/28/Spring-Cloud-Greenwich-SR2-6/"/>
      <url>/2019/08/28/Spring-Cloud-Greenwich-SR2-6/</url>
      
        <content type="html"><![CDATA[<p>Admin 的官网对 Admin 的描述如下：</p><blockquote><p>codecentric’s Spring Boot Admin is a community project to manage and monitor your Spring Boot ® applications. The applications register with our Spring Boot Admin Client (via HTTP) or are discovered using Spring Cloud ® (e.g. Eureka, Consul). The UI is just a Vue.js application on top of the Spring Boot Actuator endpoints.</p></blockquote><blockquote><p>codecentric 的 Spring Boot Admin 是一个社区项目，管理和监控您的 Spring Boot ® 应用。应用程序向我们的 Spring Boot Admin Client 注册（通过 HTTP）或使用 SpringCloud®（例如 Eureka，Consul）发现。UI 只是 Spring Boot Actuator 端点上的 Vue.js 应用程序。</p></blockquote><p>简单来讲官方对 Admin 的定位是<strong>应用监控</strong>。</p><span id="more"></span><h2 id="创建-Admin-项目"><a href="#创建-Admin-项目" class="headerlink" title="创建 Admin 项目"></a>创建 Admin 项目</h2><p>创建 admin 项目依赖继承 monitor-center 项目，pom.xml 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>monitor-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot-admin.version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">spring-boot-admin.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在启动类 AdminApplication 添加注解<code>@EnableAdminServer</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.config.EnableAdminServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> x-047</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AdminApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 application.yml 添加配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8060</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>启动 admin 项目，并访问<a href="http://localhost:8060/">http://localhost:8060</a>，显示页面如下：<br><img src="01.jpg" alt="01.jpg"><br>可以很清楚地看到服务状态及基本信息，说明 admin 项目启动成功。<br>切换标签页到 WallBoard，显示页面为：<br><img src="02.jpg" alt="02.jpg"><br>其中<span style="background:green">绿色</span>代表服务实例全部 UP，<span style="background:yellow">黄色</span>代表服务实例部分 UP，<span style="background:gray">灰色</span>代表服务实例全部 DOWN。<br>详情可以点击相应服务实例图标查看，包括详情信息和 http 请求追踪及统计。<br>http 请求追踪需要项目开启 actuator 的 httptrace endpoint（添加不同 endpoint 还会显示其他菜单，自行尝试），比如在 gateway 项目 application.yml 开启 httptrace endpoint：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">500</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment">#      discovery:</span></span><br><span class="line">      <span class="comment">#        locator:</span></span><br><span class="line">      <span class="comment">#          enabled: true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">feign</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://FEIGN</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/feign/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PrintUriAndQuery=true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">3</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@hostnameKeyResolver&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">httptrace,info,health</span></span><br></pre></td></tr></table></figure><p>重启 gateway 项目，并多次请求<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，然后打开 admin 中 gateway 实例详情：<br><img src="03.jpg" alt="03.jpg"><br>可以看到 http 请求追踪信息已经统计成功了。<br><em>Admin 的信息相对 Eureka 稍有延迟，刷新几次就同步过来了。</em></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot Actuator </tag>
            
            <tag> Spring Boot Admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建自定义的Spring Boot Starter项目</title>
      <link href="/2019/08/12/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84Spring-Boot-Starter%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%85%83%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/08/12/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84Spring-Boot-Starter%E9%A1%B9%E7%9B%AE%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%85%83%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p><em>参照并简化了官网和官方提供的 starter（例如 spring-cloud-config-server）的部分代码。</em></p><span id="more"></span><h2 id="创建自己的-starter-项目"><a href="#创建自己的-starter-项目" class="headerlink" title="创建自己的 starter 项目"></a>创建自己的 starter 项目</h2><p>假定一个需求是在代码中引入一个自定义的 starter，作用是可以将传入的参数按照 application.yml 中配置的加密方式加密并返回（这种需求在实际开发中几乎不会存在）。</p><p>新建 maven 项目，命名为 encode-spring-boot-starter（以下简称为 starter），pom.xml 引入自动装配的依赖包 spring-boot-autoconfigure：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>encode-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>encode-spring-boot-starter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>其中 lombok 为简写 get/set，commons-codec 为提供字符串编码依赖的工具包。</em></p><h2 id="创建编码静态工厂"><a href="#创建编码静态工厂" class="headerlink" title="创建编码静态工厂"></a>创建编码静态工厂</h2><p>新建 util.EncodeUtil 接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming.starter.encode.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EncodeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">encode</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建三个实现类，util.Base64Util/util.Md5Util/util.NoneUtil：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming.starter.encode.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * base64</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Util</span> <span class="keyword">implements</span> <span class="title">EncodeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = text.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming.starter.encode.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * md5工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Md5Util</span> <span class="keyword">implements</span> <span class="title">EncodeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DigestUtils.md5Hex(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming.starter.encode.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * none</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoneUtil</span> <span class="keyword">implements</span> <span class="title">EncodeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 em.EncodeType 枚举类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming.starter.encode.em;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * encode type</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EncodeType</span> </span>&#123;</span><br><span class="line">    NONE,</span><br><span class="line">    MD5,</span><br><span class="line">    BASE64</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 factory.EncodeFactory：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming.starter.encode.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.em.EncodeType;</span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.util.Base64Util;</span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.util.EncodeUtil;</span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.util.Md5Util;</span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.util.NoneUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编码工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EncodeFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EncodeUtil <span class="title">getInstance</span><span class="params">(EncodeType type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> MD5:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Md5Util();</span><br><span class="line">            <span class="keyword">case</span> BASE64:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Base64Util();</span><br><span class="line">            <span class="keyword">case</span> NONE:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> NoneUtil();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">&quot;编码&#123;%s&#125;不存在&quot;</span>, type.name()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建自动装配类"><a href="#创建自动装配类" class="headerlink" title="创建自动装配类"></a>创建自动装配类</h2><p>首先新建.properties 配置映射类，properties.EncodeProperties：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming.starter.encode.properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.em.EncodeType;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * properties</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;encode&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> EncodeType DEFAULT_ENCODE_TYPE = EncodeType.NONE;</span><br><span class="line">    <span class="comment">//如果application.yml中没有这个配置，则使用默认配置</span></span><br><span class="line">    <span class="keyword">private</span> EncodeType type = DEFAULT_ENCODE_TYPE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建服务类 template.EncodeTemplate，作用是完成工厂类的装配和向外提供服务：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming.starter.encode.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.factory.EncodeFactory;</span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.properties.EncodeProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * template</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EncodeProperties encodeProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">current</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EncodeFactory.getInstance(encodeProperties.getType()).encode(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来创建自动装配类 conf.EncodeAutoConfiguration：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming.starter.encode.conf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.properties.EncodeProperties;</span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.template.EncodeTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动装配</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(EncodeProperties.class)</span></span><br><span class="line"><span class="comment">//如果class存在则进行自动装配</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(EncodeTemplate.class)</span></span><br><span class="line"><span class="comment">//如果配置参数符合条件则进行自动装配</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;vegetable.encode&quot;, value = &quot;enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VegetableAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EncodeProperties encodeProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//当项目中bean不存在时进行自动装配</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(EncodeTemplate.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EncodeTemplate <span class="title">encodeTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EncodeTemplate encodeTemplate = <span class="keyword">new</span> EncodeTemplate();</span><br><span class="line">        encodeTemplate.setEncodeProperties(encodeProperties);</span><br><span class="line">        <span class="keyword">return</span> encodeTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 src/main/resources/META-INF/spring.factories 文件，使自定义的自动装配类在系统启动的时候可以被 spring 加载到：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.github.liuzhuoming.starter.encode.conf.VegetableAutoConfiguration</span><br></pre></td></tr></table></figure><p><em>其中<code>\</code>代表换行，如果有多个自动装配类需要被读取，则用<code>,</code>分隔。</em><br>这样就完成了一个最基本的 starter 项目。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>首先 install 项目到本地 maven 仓库，然后新建一个 spring web 项目名称为 encode-spring-boot-starter-samples（以下简称为 samples），引入我们自定义的 encode-spring-boot-starter 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>encode-spring-boot-starter-samples<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>encode-spring-boot-starter-samples<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>encode-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 application.yml 添加自定义配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">encode:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">md5</span></span><br></pre></td></tr></table></figure><p>然后创建 controller.EncodeController 类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.starter.encode.sample.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming.starter.encode.template.EncodeTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * encode</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;encode&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EncodeTemplate encodeTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">(<span class="meta">@RequestParam</span> String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> encodeTemplate.current(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后启动 samples 项目，并访问<a href="http://localhost:8080/encode?str=test">http://localhost:8080/encode?str=test</a>，返回结果：<br><code>098f6bcd4621d373cade4e832627b4f6</code>。<br>修改 application.yml 的配置为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">encode:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure><p>之后重启 samples 项目，并访问<a href="http://localhost:8080/encode?str=test">http://localhost:8080/encode?str=test</a>，返回结果：<br><code>test</code>。<br>说明 starter 项目创建成功。</p><h2 id="配置元数据及参数约束"><a href="#配置元数据及参数约束" class="headerlink" title="配置元数据及参数约束"></a>配置元数据及参数约束</h2><p>上面我们成功创建了 starter 项目，但是 application.yml 在 IntelliJ IDEA 里面打开的话，会发现我们自定义的配置显示警告（黄底）:<br><img src="01.png" alt="01.png"><br>这是因为没有正确配置 additional-spring-configuration-metadata.json 的原因（添加 spring-boot-configuration-processor 依赖后，打包正确的话会在 src/main/resources/META-INF/目录下自动生成 additional-spring-configuration-metadata.json 配置文件）。从文件类型.json 可以看出这是一个近几年 IDE 或者编辑器常用的配置文件类型（例如 Postman，VSCode 等），在这里作用是辅助 IDE 识别 application.yml 里的参数及类型，方便做出提示和约束。<br>首先在 starter 项目的 pom.xml 文件添加 spring-boot-configuration-processor 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>encode-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>encode-spring-boot-starter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后重新 install 我们的 starter 项目，然后在 samples 项目里面刷新 maven 后打开 application.yml，会发现原来的警告已经消失了:<br><img src="02.png" alt="02.png"><br>并且修改参数会得到提示，例如 Boolean 类型必须是 false/true，枚举类必须是枚举元素名称等，要是参数值不符合约束，也会显示红色字体表示当前值不在约束的取值范围内，例如：<br><img src="03.png" alt="03.png"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>封装了 pinyin4j 的 starter 示例：<a href="https://github.com/liuzhuoming23/pinyin4j-spring-boot-starter.git">https://github.com/liuzhuoming23/pinyin4j-spring-boot-starter.git</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置中心-Bus</title>
      <link href="/2019/08/05/Spring-Cloud-Greenwich-SR2-5/"/>
      <url>/2019/08/05/Spring-Cloud-Greenwich-SR2-5/</url>
      
        <content type="html"><![CDATA[<p>Bus 的官方文档对 Bus 描述如下：</p><blockquote><p>Spring Cloud Bus links nodes of a distributed system with a lightweight message broker. This can then be used to broadcast state changes (e.g. configuration changes) or other management instructions. The only implementation currently is with an AMQP broker as the transport, but the same basic feature set (and some more depending on the transport) is on the roadmap for other transports.</p></blockquote><blockquote><p>Spring Cloud Bus 使用轻量级消息代理链接分布式系统的节点。然后，这可以用于广播状态改变（例如，配置改变）或其他管理指令。目前唯一的实现是使用 AMQP 代理作为传输，但是相同的基本功能集（以及一些更多取决于传输）是其他传输的路线图。</p></blockquote><p>简单来讲官方对 Bus 的定位是<strong>消息传输</strong>。<br><em>本 doom 利用 RabbitMQ 来实现消息总线的功能。</em></p><span id="more"></span><h1 id="添加-Bus-依赖"><a href="#添加-Bus-依赖" class="headerlink" title="添加 Bus 依赖"></a>添加 Bus 依赖</h1><h2 id="config-项目添加-Bus-依赖"><a href="#config-项目添加-Bus-依赖" class="headerlink" title="config 项目添加 Bus 依赖"></a>config 项目添加 Bus 依赖</h2><p>config 项目添加 spring-cloud-starter-bus-amqp 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>其中 spring-cloud-starter-stream-rabbit 依赖为指定实现消息总线的方式为 rabbitmq</em><br>application.yml 配置修改为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8040</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/liuzhuoming23/config-repo</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">username:</span></span><br><span class="line">          <span class="attr">password:</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="comment">#开启消息总线功能</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="comment">#rabbitmq host</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment">#rabbitmq port</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="comment">#rabbitmq 帐号</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="comment">#rabbitmq 密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="comment">#配置监控endpoint，其中bus-refresh为根据消息总线刷新配置的endpoint</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">bus-refresh,httptrace,info,health</span></span><br></pre></td></tr></table></figure><p>然后重启 config 项目，访问 rabbitmq 后台管理页面<a href="http://localhost:15672/">http://localhost:15672</a>,进入 Exchanges 选项卡，可以看到 Exchanges 里面已经增加了名为 springCloudBus 的 topic：<br><img src="01.jpg" alt="01.jpg"></p><h2 id="producer-client-项目添加-Bus-依赖"><a href="#producer-client-项目添加-Bus-依赖" class="headerlink" title="producer-client 项目添加 Bus 依赖"></a>producer-client 项目添加 Bus 依赖</h2><p>producer-client 项目 pom.xml 修改为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>producer-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>producer-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 修改为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">bus:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">refresh,info,health</span></span><br></pre></td></tr></table></figure><p>然后重启 8010 和 8011 两个项目，访问 rabbitmq 后台管理页面<a href="http://localhost:15672/">http://localhost:15672</a>,进入 Exchanges 选项卡，打开 springCloudBus 详情，可以看到 springCloudBus 主题下绑定了三个实例，其中一个为发布者，另外两个为订阅者（<del>不过我没分辨出哪个是哪个</del>）：<br><img src="02.jpg" alt="02.jpg"></p><h2 id="根据-Bus-刷新全部-producer-client-实例的动态配置"><a href="#根据-Bus-刷新全部-producer-client-实例的动态配置" class="headerlink" title="根据 Bus 刷新全部 producer-client 实例的动态配置"></a>根据 Bus 刷新全部 producer-client 实例的动态配置</h2><p>修改 git 里面的 config/producer-client-dev.yml 文件为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">国际巨星🍺xj</span></span><br></pre></td></tr></table></figure><p>使用 Postman 用 POST 请求访问<a href="http://localhost:8040/actuator/bus-refresh/">http://localhost:8040/actuator/bus-refresh/</a>,然后分别访问<a href="http://localhost:8010/port/test">http://localhost:8010/port/test</a>和<a href="http://localhost:8011/port/test">http://localhost:8011/port/test</a>，返回结果都是（因为根据消息总线刷新配置过程稍微久一点，所以在刷新之后个别实例配置并没有更新过来也是正常的，打印的端口都是 8010 的问题参照上一章）：<br><code>国际巨星🍺xj | test: client port | 8010</code><br>说明根据消息总线刷新全部实例成功。<br><em>在刷新配置的时候访问 rabbitmq 后台管理页面<a href="http://localhost:15672/">http://localhost:15672</a>，进入 Exchanges 选项卡，打开 springCloudBus 详情，会看到已经产生了消息数据的传递：</em><br><img src="03.jpg" alt="03.jpg"></p><h2 id="根据-Bus-刷新局部-producer-client-实例的动态配置"><a href="#根据-Bus-刷新局部-producer-client-实例的动态配置" class="headerlink" title="根据 Bus 刷新局部 producer-client 实例的动态配置"></a>根据 Bus 刷新局部 producer-client 实例的动态配置</h2><p>修改 git 里面的 config/producer-client-dev.yml 文件为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">战术后仰</span></span><br></pre></td></tr></table></figure><p>使用 Postman 用 POST 请求访问<a href="http://localhost:8040/actuator/bus-refresh/producer-client:8010">http://localhost:8040/actuator/bus-refresh/producer-client:8010</a>,然后访问<a href="http://localhost:8010/port/test">http://localhost:8010/port/test</a>，返回结果：<br><code>战术后仰 | 🐕: client port | 8010 | feign</code><br>看到 8010 实例的配置已经改变，然后访问<a href="http://localhost:8011/port/test">http://localhost:8011/port/test</a>，返回结果：<br><code>国际巨星🍺xj | 🐕: client port | 8010 | feign</code><br>看到 8011 实例的配置并未改变，也就证明局部刷新配置成功。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Spring Cloud Config </tag>
            
            <tag> Spring Boot Actuator </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> Spring Cloud Bus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置中心-Config</title>
      <link href="/2019/08/05/Spring-Cloud-Greenwich-SR2-4/"/>
      <url>/2019/08/05/Spring-Cloud-Greenwich-SR2-4/</url>
      
        <content type="html"><![CDATA[<p>Config 的 Github 页面 Readme 对 Config 描述如下：</p><blockquote><p>Spring Cloud Config provides server-side and client-side support for externalized configuration in a distributed system. With the Config Server, you have a central place to manage external properties for applications across all environments. The concepts on both client and server map identically to the Spring Environment and PropertySource abstractions, so they fit very well with Spring applications but can be used with any application running in any language. As an application moves through the deployment pipeline from dev to test and into production, you can manage the configuration between those environments and be certain that applications have everything they need to run when they migrate. The default implementation of the server storage backend uses git, so it easily supports labelled versions of configuration environments as well as being accessible to a wide range of tooling for managing the content. It is easy to add alternative implementations and plug them in with Spring configuration.</p></blockquote><blockquote><p>Spring Cloud Config 为分布式系统中的外部化配置提供服务器端和客户端支持。使用 Config Server，您可以在所有环境中管理应用程序的外部属性。客户端和服务器上的概念映射与 Spring Environment 和 PropertySource 抽象，因此它们非常适合 Spring 应用程序，但可以与任何语言运行的任何应用程序一起使用。当应用程序通过部署管道从开发到测试再到生产时，您可以管理这些环境之间的配置，并确保应用程序具有迁移时需要运行的所有内容。服务器存储后端的默认实现使用 git，因此它可以轻松支持配置环境的标签版本，以及可用于管理内容的各种工具。添加替代实现并使用 Spring 配置插入它们很容易。</p></blockquote><p>简单来讲（从名字看）官方对 Config 的定位是<strong>外部化配置支持</strong>。</p><span id="more"></span><h1 id="创建-Config-项目"><a href="#创建-Config-项目" class="headerlink" title="创建 Config 项目"></a>创建 Config 项目</h1><p>创建 config 项目依赖继承 config-server 项目，pom.xml 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml 配置为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8040</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment">#存放配置文件的git仓库地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/liuzhuoming23/config-repo</span></span><br><span class="line">          <span class="comment">#配置文件的存放路径（可以根据目录名存放不同项目的配置文件）</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">config</span></span><br><span class="line">          <span class="comment">#git账号密码，公共仓库不需要配置</span></span><br><span class="line">          <span class="attr">username:</span></span><br><span class="line">          <span class="attr">password:</span></span><br></pre></td></tr></table></figure><p><em>因为连接速度原因，这里选择了 gitee 作为配置仓库。</em><br>ConfigApplication 启动类添加 EnableConfigServer 注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gihub.liuzhuoming23.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> x-047</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>git 仓库的项目目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config</span><br><span class="line">        └─producer-client-dev.yml</span><br><span class="line">        └─producer-client-test.yml</span><br></pre></td></tr></table></figure><p>其中 producer-client-dev.yml 文件内容为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">🍺🍐🐮🍺🐎</span></span><br></pre></td></tr></table></figure><p>producer-client-test.yml 文件内容为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config.name:</span> <span class="string">🍺🍐🍺🍐🐮🍺</span></span><br></pre></td></tr></table></figure><p>启动项目，访问<a href="http://localhost:8040/producer-client/dev">http://localhost:8040/producer-client/dev</a>，返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;producer-client&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;profiles&quot;</span>: [<span class="string">&quot;dev&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0c998449b05236b778b072ec7bd28d1f09cfc5a1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;state&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;propertySources&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;https://gitee.com/liuzhuoming23/config-repo/config/producer-client-dev.yml&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;config.name&quot;</span>: <span class="string">&quot;🍺🍐🐮🍺🐎&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:8040/producer-client/test">http://localhost:8040/producer-client/test</a>，返回结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;producer-client&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;profiles&quot;</span>: [<span class="string">&quot;test&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;label&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;a124d99007d7ad0c849878ee1d8e9624a77368c3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;state&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;propertySources&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;https://gitee.com/liuzhuoming23/config-repo/config/producer-client-test.yml&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;source&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;config.name&quot;</span>: <span class="string">&quot;🍺🍐🍺🍐🐮🍺&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明项目配置成功。<br><em>可以看出读取哪个文件的配置是根据 url 的后面两段来匹配的，<code>http://localhost:8040/producer-client/test</code>匹配<code>producer-client-test</code>，<code>http://localhost:8040/producer-client/dev</code>匹配<code>producer-client-dev</code>，和 spring 的 profiles 十分类似，实际上在本 doom 里面就是当成 profiles 来使用的，producer-client 为服务名，test/dev 为 profiles。</em></p><h2 id="服务生产者获取外部配置"><a href="#服务生产者获取外部配置" class="headerlink" title="服务生产者获取外部配置"></a>服务生产者获取外部配置</h2><p>修改 config 项目的 pom.xml 文件，添加 spring-cloud-starter-netflix-eureka-client 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后把 config 服务注册到 eureka，即修改 application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8040</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/liuzhuoming23/config-repo</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">username:</span></span><br><span class="line">          <span class="attr">password:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>然后在 producer-client 项目的 pom.xml 添加 spring-cloud-starter-config 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>producer-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>producer-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 application.xml 同级新建 bootstrap.yml 文件，并添加内容：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">#服务名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">producer-client</span></span><br><span class="line">      <span class="comment">#profiles</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment">#分支/tag</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#是否从注册中心获取配置服务</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#配置服务名称</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p><em>注意这里的服务名称不能是@pom.artifactId@这种从 pom.xml 中获取参数值的方式，必须配置完整的项目名称。这与 bootstrap.xml 和 application.xml 的加载时机有关，不在此赘述，有兴趣自行了解。</em><br>修改 application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br></pre></td></tr></table></figure><p>在 controller.PortController 类添加可从配置中心获取的键名称：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.producerclient.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * port</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;port&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port:0&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.name:default&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">port</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config + <span class="string">&quot; | &quot;</span> + name + <span class="string">&quot;: client port | &quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照 eureka-&gt;config-&gt;producer-client 的顺序启动项目，并访问<a href="http://localhost:8010/port/test">http://localhost:8010/port/test</a>，返回结果：<br><code>🍺🍐🐮🍺🐎 | test: client port | 8010</code><br>说明服务生产者已经从配置中心获取到了配置。</p><h3 id="动态刷新外部配置"><a href="#动态刷新外部配置" class="headerlink" title="动态刷新外部配置"></a>动态刷新外部配置</h3><p>在 producer-client 项目的 controller.PortController 类添加添加@RefreshScope 注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.producerclient.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * port</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;port&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port:0&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.name:default&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">port</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config + <span class="string">&quot; | &quot;</span> + name + <span class="string">&quot;: client port | &quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="comment">#开启actuator监控，其中refresh意思是支持刷新配置</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">refresh,info,health</span></span><br></pre></td></tr></table></figure><p>重启 producer-client 项目，并访问<a href="http://localhost:8010/port/test">http://localhost:8010/port/test</a>，返回结果：<br><code>🍺🍐🐮🍺🐎 | test: client port | 8010</code><br>然后修改 git 里面的 config/producer-client-dev.yml 文件为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">🍺🍐🙅‍</span></span><br></pre></td></tr></table></figure><p>在 Postman 用 POST 请求访问<a href="http://localhost:8010/actuator/refresh">http://localhost:8010/actuator/refresh</a>刷新配置，然后再访问<a href="http://localhost:8010/port/test">http://localhost:8010/port/test</a>，返回结果：<br><code>🍺🍐🙅‍ | test: client port | 8010</code><br>说明动态刷新外部配置成功。<br><em>很多博客有说到利用 git 服务的 Webhook 来实现提交 git 更新自动刷新外部配置，其实就是把<a href="http://localhost:8010/actuator/refresh">http://localhost:8010/actuator/refresh</a>这个刷新地址绑定在 WebHook 上。不过因为内网 doom，没办法进行测试。</em></p><h4 id="服务生产者集群刷新外部配置"><a href="#服务生产者集群刷新外部配置" class="headerlink" title="服务生产者集群刷新外部配置"></a>服务生产者集群刷新外部配置</h4><p>启动 8010 和 8011 的两个服务生产者实例，并修改 git 里面的 config/producer-client-dev.yml 文件为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">🍺🍐🍺🍐</span></span><br></pre></td></tr></table></figure><p>在 Postman 用 POST 请求访问<a href="http://localhost:8010/actuator/refresh">http://localhost:8010/actuator/refresh</a>刷新 8010 端口服务的配置，然后再访问<a href="http://localhost:8010/port/test">http://localhost:8010/port/test</a>，返回结果：<br><code>🍺🍐🍺🍐 | test: client port | 8011</code><br>然后再直接访问<a href="http://localhost:8011/port/test">http://localhost:8011/port/test</a>，返回结果：<br><code>🍺🍐🙅‍ | test: client port | 8011</code><br>可见并未按照服务来刷新整个集群的配置。<br>之后在 Postman 用 POST 请求访问<a href="http://localhost:8011/actuator/refresh">http://localhost:8011/actuator/refresh</a>刷新 8011 端口服务的配置，然后再访问<a href="http://localhost:8011/port/test">http://localhost:8011/port/test</a>，返回结果：<br><code>🍺🍐🍺🍐 | test: client port | 8011</code><br>可见刷新哪个实例的 refresh endpoint，哪个实例的配置才会更新。<br><em>在集群实例比较少的时候似乎还凑合。要是集群实例比较多这样一个个刷新配置就十分的麻烦，集群扩增后也要手动添加新的刷新地址，并且因为需要请求的刷新地址比较多，也很难做到利用 git 服务的 WebHook 来自动刷新配置，甚至有漏刷新的可能。所以不建议在线上服务使用。</em><br><strong><em>要是注意观察，可以发现在第一次刷新 8010 端口服务的时候返回的是<code>🍺🍐🍺🍐 | test: client port | 8011</code>，而并不是我们期待的<code>🍺🍐🍺🍐 | test: client port | 8010</code>，看上去似乎是 config 服务将同一个服务后启动的实例的本地配置保存到了动态配置中，并在动态刷新外部配置的时候一并刷新到了其他实例的配置里。虽然目前还未造成影响，但是这个特性也许会在没有使用消息总线的情况下让一些类似于灰度更新的需求变得更加难以实现。</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Spring Cloud Config </tag>
            
            <tag> Spring Boot Actuator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由中心-Gateway</title>
      <link href="/2019/07/25/Spring-Cloud-Greenwich-SR2-3/"/>
      <url>/2019/07/25/Spring-Cloud-Greenwich-SR2-3/</url>
      
        <content type="html"><![CDATA[<p>Gateway 的 Github 页面 Readme 对 Gateway 描述如下：</p><blockquote><p>This project provides an API Gateway built on top of the Spring Ecosystem, including: Spring 5, Spring Boot 2 and Project Reactor. Spring Cloud Gateway aims to provide a simple, yet effective way to route to APIs and provide cross cutting concerns to them such as: security, monitoring/metrics, and resiliency.</p></blockquote><blockquote><p>该项目提供了一个建立在 Spring Ecosystem 之上的 API 网关，包括：Spring 5，Spring Boot 2 和 Project Reactor。Spring Cloud Gateway 旨在提供一种简单而有效的方式来路由到 API，并为他们提供横切关注点，例如：安全性，监控/指标和弹性。</p></blockquote><p>简单来讲（从名字看）官方对 Gateway 的定位是<strong>api 网关</strong>。</p><span id="more"></span><h2 id="创建-Gateway-项目"><a href="#创建-Gateway-项目" class="headerlink" title="创建 Gateway 项目"></a>创建 Gateway 项目</h2><p>创建 gateway 项目依赖继承 route-server 项目，pom.xml 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>route-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>切记不要添加 spring-boot-starter-web 依赖，不然会报错<code>No qualifying bean of type &#39;org.springframework.core.convert.ConversionService&#39; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Qualifier(value=webFluxConversionService)&#125;</code>，找了大半天才找到这个问题。<del>然而启动项目就有请勿添加 spring-boot-starter-web 依赖的提示，是我没看见。</del></em><br>application.yml 配置为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment">#是否开启默认路由方式（按照注册到Eureka的实例名自动创建路由）</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>这样就创建了用 Eureka 注册的服务实例名称为路由名称的路由，即图中圈起来的名称：<br><img src="02.jpg" alt="02.jpg"><br>启动项目，访问<a href="http://localhost:8030/FEIGN/port/%F0%9F%90%95">http://localhost:8030/FEIGN/port/🐕</a>，返回结果：<br><code>🐕: client port | 8011 | feign</code><br>说明默认路由创建成功。</p><h2 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h2><p>默认路由名称是按照在 Eureka 里面注册的实例名称来分配的，Eureka 实例名称全大写，所以路由名称也是全大写，不太符合平时全小写的习惯，要解决这个问题可以使用自定义路由。</p><h3 id="基于-yml-的配置方式"><a href="#基于-yml-的配置方式" class="headerlink" title="基于 yml 的配置方式"></a>基于 yml 的配置方式</h3><p>屏蔽默认路由，添加自定义路由，即修改 gateway 项目的 application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"><span class="comment">#      discovery:</span></span><br><span class="line"><span class="comment">#        locator:</span></span><br><span class="line"><span class="comment">#          enabled: true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">          <span class="comment">#路由名称，自定义</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">feign</span></span><br><span class="line">          <span class="comment">#需要转发到的服务名称</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://FEIGN</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="comment">#向gateway请求的路径</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/feign/**</span></span><br><span class="line">          <span class="comment">#过滤器工厂配置</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment">#gateway向注册的服务请求的路径需要消除的前缀数量（此处是删除`/feign`）（示例：当请求http://gateway.com/feign/test.html时会转发到FEIGN/test.html）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p><em>配置里面的 filters.StripPrefix 参数对应的是 StripPrefixGatewayFilterFactory，即 gateway 自定义过滤器工厂，关于过滤器工厂后面再说，总之它的作用是，根据配置的数字删除 gateway 转发到注册服务时候 url 的前缀数量，比如向 gateway 发起请求为<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，这个值配置为 1 的话，gateway 向注册的服务发起的请求就成了<a href="http://feign/port/%F0%9F%90%95">lb://FEIGN/port/🐕</a>，这个值配置为 2 的话，gateway 向注册的服务发起的请求就成了<a href="http://feign/%F0%9F%90%95">lb://FEIGN/🐕</a>。</em><br>重启服务，访问<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，返回结果：<br><code>🐕: client port | 8011 | feign</code><br>说明自定义路由创建成功。</p><h3 id="基于-Spring-配置类的配置方式"><a href="#基于-Spring-配置类的配置方式" class="headerlink" title="基于 Spring 配置类的配置方式"></a>基于 Spring 配置类的配置方式</h3><p>先把上一步修改的 application.yml 内有关路由的配置注释掉，因为这两种方式本质上其实是同一种配置方式，参数相同的话实现的功能完全等价，相同 id 的路由应该会导致不可控的错误：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line"><span class="comment">#  cloud:</span></span><br><span class="line"><span class="comment">#    gateway:</span></span><br><span class="line"><span class="comment">#      discovery:</span></span><br><span class="line"><span class="comment">#        locator:</span></span><br><span class="line"><span class="comment">#          enabled: true</span></span><br><span class="line"><span class="comment">#      routes:</span></span><br><span class="line"><span class="comment">#        - id: feign</span></span><br><span class="line"><span class="comment">#          uri: lb://FEIGN</span></span><br><span class="line"><span class="comment">#          predicates:</span></span><br><span class="line"><span class="comment">#            - Path=/feign/**</span></span><br><span class="line"><span class="comment">#          filters:</span></span><br><span class="line"><span class="comment">#            - StripPrefix=1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>创建 route.RouteLocators 类，内容为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.route;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteLocators</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">serviceFeignRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes().route(r -&gt;</span><br><span class="line">            r.path(<span class="string">&quot;/feign/**&quot;</span>)</span><br><span class="line">                .filters(</span><br><span class="line">                    f -&gt; f.stripPrefix(<span class="number">1</span>)</span><br><span class="line">                )</span><br><span class="line">                .uri(<span class="string">&quot;lb://FEIGN&quot;</span>)</span><br><span class="line">                .id(<span class="string">&quot;feign&quot;</span>)</span><br><span class="line">        ).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，访问<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，返回结果：<br><code>🐕: client port | 8010 | feign</code><br>说明自定义路由创建成功。<br><em>虽然基于配置类的路由方式在入参方式方面更自由一点（比如动态传入 responseHeader 参数等），但是我更喜欢基于 yml 的配置方式，因为 yml 和配置中心组合使用可以实现自由切换路由配置的功能。</em></p><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><h3 id="自定义局部过滤器"><a href="#自定义局部过滤器" class="headerlink" title="自定义局部过滤器"></a>自定义局部过滤器</h3><p>假定一个需要在 console 中打印请求 uri 和 query 参数的需求（这种需求在实际开发中几乎不会存在），就可以在过滤器中完成。<br>首先创建 filter.PrintUriAndQueryGatewayFilter 类（注意规范命名，不然后面可能会出现不可控错误）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印请求uri和query参数局部过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintUriAndQueryGatewayFilter</span> <span class="keyword">implements</span> <span class="title">GatewayFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chain</span><br><span class="line">            .filter(exchange)</span><br><span class="line">            .then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">                    System.out.println(exchange.getRequest().getURI().getRawPath() + <span class="string">&quot;?&quot;</span></span><br><span class="line">                        + exchange.getRequest().getURI().getRawQuery());</span><br><span class="line">                &#125;)</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>其中实现接口 GatewayFilter 表明这个类是一个 gateway 局部过滤器，Ordered 接口为定义过滤器的优先度，Ordered.LOWEST_PRECEDENCE 为最低优先度。</em><br>因为过滤器无法使用 yml 配置，所以此处选择修改配置类 RouteLocators：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.route;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.gateway.filter.PrintUriAndQueryGatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteLocators</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">serviceFeignRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes().route(r -&gt;</span><br><span class="line">            r.path(<span class="string">&quot;/feign/**&quot;</span>)</span><br><span class="line">                .filters(</span><br><span class="line">                    f -&gt; f.stripPrefix(<span class="number">1</span>)</span><br><span class="line">                        .filter(<span class="keyword">new</span> PrintUriAndQueryGatewayFilter())</span><br><span class="line">                )</span><br><span class="line">                .uri(<span class="string">&quot;lb://FEIGN&quot;</span>)</span><br><span class="line">                .id(<span class="string">&quot;feign&quot;</span>)</span><br><span class="line">        ).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，并请求<a href="http://localhost:8030/feign/port/liuzhuoming?age=14&id=1">http://localhost:8030/feign/port/liuzhuoming?age=14&amp;id=1</a>，IntelliJ IDEA 的 console 打印出日志：<br><code>/port/liuzhuoming?age=14&amp;id=1</code><br>说明自定义过滤器配置成功。</p><h4 id="自定义局部过滤器工厂"><a href="#自定义局部过滤器工厂" class="headerlink" title="自定义局部过滤器工厂"></a>自定义局部过滤器工厂</h4><p>上面的 PrintUriAndQueryGatewayFilter 过滤器虽然可以正常使用，但是只能在路由配置类使用，并不能在 yml 配置，感觉和我习惯有悖，解决办法就是创建自定义过滤器工厂。<br>这次使用 yml 配置路由。首先创建 filter.factory.PrintUriAndQueryGatewayFilterFactory 类（注意规范命名，不然后面可能会出现不可控错误）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.filter.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.gateway.filter.PrintUriAndQueryGatewayFilter;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印请求uri和query参数局部过滤器工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintUriAndQueryGatewayFilterFactory</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">    <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">PrintUriAndQueryGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrintUriAndQueryGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(<span class="string">&quot;enabled&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!config.isEnabled()) &#123;</span><br><span class="line">                <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PrintUriAndQueryGatewayFilter().filter(exchange, chain);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否开启打印</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> enabled;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.enabled = enabled;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>其中 Config 为自定义参数类，其中包含了一个叫 enabled 的 boolean 类型参数。shortcutFieldOrder 方法为定义参数列表。（参照内置过滤器工厂）</em><br>在 config.SpringCloudConfig 类添加 PrintUriAndQueryGatewayFilterFactory 的 bean：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.gateway.filter.factory.PrintUriAndQueryGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring cloud config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">KeyResolver <span class="title">hostnameKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PrintUriAndQueryGatewayFilterFactory <span class="title">printUriAndQueryGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PrintUriAndQueryGatewayFilterFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 application.yml 添加自定义过滤器工厂配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"><span class="comment">#      discovery:</span></span><br><span class="line"><span class="comment">#        locator:</span></span><br><span class="line"><span class="comment">#          enabled: true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">feign</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://FEIGN</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/feign/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">            <span class="comment">#自定义过滤器工厂，其中的true即Config类的enabled参数的值</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PrintUriAndQuery=true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启项目，并请求<a href="http://localhost:8030/feign/port/liuzhuoming?age=14&id=1">http://localhost:8030/feign/port/liuzhuoming?age=14&amp;id=1</a>，IntelliJ IDEA 的 console 打印出日志：<br><code>/port/liuzhuoming?age=14&amp;id=1</code><br>说明自定义过滤器工厂配置成功。</p><h3 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h3><p>全局过滤器和局部过滤器类似，唯一区别是全局过滤器无需在路由配置即可全局生效。<br>假定一个根据 requestHeader 是否存在 Authorization 字段来决定返回数居还是返回 401 错误的需求（这种需求在实际开发中几乎不会存在），就可以在全局过滤器中完成。<br>创建 filter.AuthorizationGlobalFilter 类（注意规范命名，不然后面可能会出现不可控错误）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求权限全局过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String token = Objects</span><br><span class="line">                .requireNonNull(exchange.getRequest().getHeaders().get(<span class="string">&quot;Authorization&quot;</span>)).get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">                <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.HIGHEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注意这里实现的是全局过滤器的 GlobalFilter 接口，不是局部过滤器的 GatewayFilter 接口。</em><br>在 config.SpringCloudConfig 注入全局过滤器的 bean：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.gateway.filter.AuthorizationGlobalFilter;</span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.gateway.filter.factory.PrintUriAndQueryGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring cloud config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">KeyResolver <span class="title">hostnameKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PrintUriAndQueryGatewayFilterFactory <span class="title">printUriAndQueryGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PrintUriAndQueryGatewayFilterFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">AuthorizationGlobalFilter <span class="title">authorizationGlobalFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AuthorizationGlobalFilter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，并在 Postman 直接请求接口<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，返回结果：<br><code>401 Unauthorized</code><br>在 Postman 的 Headers 添加字段 Authorization=1234，再次请求<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，返回结果：<br><code>🐕: client port | 8011 | feign</code><br>说明全局过滤器配置成功。</p><h2 id="内置过滤器工厂"><a href="#内置过滤器工厂" class="headerlink" title="内置过滤器工厂"></a>内置过滤器工厂</h2><h3 id="截取请求-uri-前缀的过滤器工厂-StripPrefixGatewayFilterFactory"><a href="#截取请求-uri-前缀的过滤器工厂-StripPrefixGatewayFilterFactory" class="headerlink" title="截取请求 uri 前缀的过滤器工厂-StripPrefixGatewayFilterFactory"></a>截取请求 uri 前缀的过滤器工厂-StripPrefixGatewayFilterFactory</h3><p>之前已经简单说过这个过滤器的作用，因为作用很简单，不再作详细说明。</p><h3 id="基于令牌桶算法做限流的过滤器工厂-RequestRateLimiterGatewayFilterFactory"><a href="#基于令牌桶算法做限流的过滤器工厂-RequestRateLimiterGatewayFilterFactory" class="headerlink" title="基于令牌桶算法做限流的过滤器工厂-RequestRateLimiterGatewayFilterFactory"></a>基于令牌桶算法做限流的过滤器工厂-RequestRateLimiterGatewayFilterFactory</h3><p>这里可以自定义限流 key，示例为基于 hostname 拦截，并且过滤器配置在 yml 中，如果是习惯配置在配置类里面的，也很简单，可以自行研究。<br>创建 config.SpringCloudConfig 配置类，在其中初始化 KeyResolver 的 bean：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.gateway.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring cloud config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">KeyResolver <span class="title">hostnameKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>其中 Mono 为 reactor 响应式编程库自带的类型，有兴趣可以自行了解，在此不作赘述。</em><br>默认限流基于 redis，所以首先开启本地 redis，然后修改 pom.xml 添加 spring-boot-starter-data-redis 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>route-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>gateway<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在路由的过滤器配置里添加 RequestRateLimiter 过滤器工厂配置，修改 application.yml 为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">500</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line"><span class="comment">#      discovery:</span></span><br><span class="line"><span class="comment">#        locator:</span></span><br><span class="line"><span class="comment">#          enabled: true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">feign</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://FEIGN</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/feign/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">            <span class="comment">#过滤器工厂名称（推断是根据工厂类名来匹配，RequestRateLimiter-&gt;RequestRateLimiterGatewayFilterFactory，即删除后面的GatewayFilterFactory）</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="comment">#过滤器工厂参数集合</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="comment">#每秒新增令牌数量</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span></span><br><span class="line">                <span class="comment">#令牌桶最大容量</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">3</span></span><br><span class="line">                <span class="comment">#自定义key解析器的bean名称，即在config.SpringCloudConfig配置的bean名称</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@hostnameKeyResolver&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>重启项目，连续并快速地访问<a href="http://localhost:8030/feign/port/%F0%9F%90%95">http://localhost:8030/feign/port/🐕</a>，在开始的几次正常返回数据后很快就会返回我们期待的结果：<br><code>429 Too Many Requests</code><br>等待几秒再次访问，数据又会变回正常，说明限流成功。并且在此时查询 redis，会发现多了两个类似 request_rate_limiter.{0:0:0:0:0:0:0:1}.timestamp 和 request_rate_limiter.{0:0:0:0:0:0:0:1}.tokens 的 key，如图：<br><img src="03.jpg" alt="03.jpg"></p><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="CORS-跨域处理"><a href="#CORS-跨域处理" class="headerlink" title="CORS 跨域处理"></a>CORS 跨域处理</h3><p>新建跨域测试 html 文件，cors.html：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      $.get(<span class="string">&quot;http://localhost:8030/feign/port/%F0%9F%90%95&quot;</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(r);</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即直接请求接口并在浏览器 console 打印返回信息（需要提前先在 SpringCloudConfig 类把 token 验证的全局过滤器 AuthorizationGlobalFilter 的 bean 注释掉）。<br>之后打开浏览器控制台并打开 cors.html，会发现 console 提示：<br><img src="04.jpg" alt="04.jpg"><br>即跨域请求已被阻止。通常解决方式是创建跨域处理的过滤器，但是 Gateway 可以在 yml 中以更简单的方式实现。修改 gateway 项目的 application.yml，添加 globalcors 配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8030</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">500</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment">#      discovery:</span></span><br><span class="line">      <span class="comment">#        locator:</span></span><br><span class="line">      <span class="comment">#          enabled: true</span></span><br><span class="line">      <span class="comment">#全局CORS配置</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="comment">#CORS配置类</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="comment">#需要跨域处理的路径</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="comment">#允许的请求来源</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="comment">#允许的请求类型（GET，POST等）</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="comment">#允许的请求头</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">            <span class="comment">#是否允许携带凭证</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">feign</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://FEIGN</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/feign/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">PrintUriAndQuery=true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">              <span class="attr">args:</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span></span><br><span class="line">                <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">3</span></span><br><span class="line">                <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@hostnameKeyResolver&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">httptrace,info,health</span></span><br></pre></td></tr></table></figure><p><em>这里的配置和 org.springframework.web.cors.CorsConfiguration 类里面的属性一一对应。</em><br>重启 gateway 项目并刷新 cors.html 页面，console 显示结果：<br><img src="05.jpg" alt="05.jpg"><br>说明跨域处理成功。</p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ol><li><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories">Spring Cloud GateWay 官方文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务间调用-Feign</title>
      <link href="/2019/07/25/Spring-Cloud-Greenwich-SR2-2/"/>
      <url>/2019/07/25/Spring-Cloud-Greenwich-SR2-2/</url>
      
        <content type="html"><![CDATA[<p>Feign 的 Github 页面 Readme 对 Feign 描述如下：</p><blockquote><h2 id="Feign-makes-writing-java-http-clients-easier"><a href="#Feign-makes-writing-java-http-clients-easier" class="headerlink" title="Feign makes writing java http clients easier"></a>Feign makes writing java http clients easier</h2><p>Feign is a Java to HTTP client binder inspired by Retrofit, JAXRS-2.0, and WebSocket. Feign’s first goal was reducing the complexity of binding Denominator uniformly to HTTP APIs regardless of ReSTfulness.</p></blockquote><blockquote><h2 id="Feign-使得编写-java-http-客户端变得更容易"><a href="#Feign-使得编写-java-http-客户端变得更容易" class="headerlink" title="Feign 使得编写 java http 客户端变得更容易"></a>Feign 使得编写 java http 客户端变得更容易</h2><p>Feign 是一个受到 Retrofit，JAXRS-2.0 和 WebSocket 启发的 Java 到 HTTP 客户端绑定器。Feign 的第一个目标是降低将 Denominator 统一绑定到 HTTP API 的复杂性，无论 ReSTfulness 如何。</p></blockquote><p>简单来说官方对 Feign 的定位是<strong>Http 请求绑定</strong>。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Feign </tag>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注册中心-Eureka</title>
      <link href="/2019/07/25/Spring-Cloud-Greenwich-SR2-1/"/>
      <url>/2019/07/25/Spring-Cloud-Greenwich-SR2-1/</url>
      
        <content type="html"><![CDATA[<p>Eureka 的 Github 项目 Wiki 对 Eureka 描述如下：</p><blockquote><h2 id="What-is-Eureka"><a href="#What-is-Eureka" class="headerlink" title="What is Eureka?"></a>What is Eureka?</h2><p>Eureka is a REST (Representational State Transfer) based service that is primarily used in the AWS cloud for locating services for the purpose of load balancing and failover of middle-tier servers. We call this service, the Eureka Server. Eureka also comes with a Java-based client component,the Eureka Client, which makes interactions with the service much easier. The client also has a built-in load balancer that does basic round-robin load balancing. At Netflix, a much more sophisticated load balancer wraps Eureka to provide weighted load balancing based on several factors like traffic, resource usage, error conditions etc to provide superior resiliency.</p></blockquote><blockquote><h2 id="什么是-Eureka？"><a href="#什么是-Eureka？" class="headerlink" title="什么是 Eureka？"></a>什么是 Eureka？</h2><p>Eureka 是一种基于 REST（Representational State Transfer）的服务，主要用于 AWS 云，用于定位服务，以实现中间层服务器的负载平衡和故障转移。我们将此服务称为 Eureka Server。Eureka 还附带了一个基于 Java 的客户端组件 Eureka Client，它使与服务的交互变得更加容易。客户端还有一个内置的负载均衡器，可以进行基本的循环负载均衡。在 Netflix，一个更复杂的负载均衡器包含 Eureka 基于流量，资源使用，错误条件等多种因素提供加权负载平衡，以提供卓越的弹性。</p></blockquote><p>简单来说官方对 Eureka 的定位是<strong>定位服务，负载均衡，故障转移</strong>。</p><span id="more"></span><h2 id="创建-Eureka-项目"><a href="#创建-Eureka-项目" class="headerlink" title="创建 Eureka 项目"></a>创建 Eureka 项目</h2><p>创建 eureka 项目依赖继承 discovery-center 项目，pom.xml 内容为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>discovery-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在启动类 EurekaController 添加注解<code>@EnableEurekaServer</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 application.yml 添加配置：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#服务端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#服务名称（使用项目名称）</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment">#服务实例hostname</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#是否注册到eureka（单节点设置false）</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#是否获取注册信息（单节点设置false）</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#注册服务地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>启动项目，访问<a href="http://localhost:8000/">http://localhost:8000</a>，显示页面如下：<br><img src="01.jpg" alt="01.jpg"><br>说明注册中心启动成功了。</p><h2 id="注册中心集群"><a href="#注册中心集群" class="headerlink" title="注册中心集群"></a>注册中心集群</h2><p><em>因为没有多服务器环境，而且貌似注册中心集群不支持多个 localhost 相互注册，所以请自行实验。</em></p><h1 id="服务生产者"><a href="#服务生产者" class="headerlink" title="服务生产者"></a>服务生产者</h1><h2 id="创建服务生产者"><a href="#创建服务生产者" class="headerlink" title="创建服务生产者"></a>创建服务生产者</h2><p>创建 producer-client 项目继承 server-center 项目，pom.xml 内容为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>producer-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>producer-client<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 spring-boot-starter-actuator 依赖作用是项目健康监控，加上这个依赖后可以在开启 endpoint 后获取项目的对应信息，其和 Spring Admin 和 Eureka 等都有很好的集成，感兴趣的可以单独去学习，在此只为辅助完成项目搭建，具体不作赘述。<br>在 controller 目录新建 PortController，内容为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.producerclient.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * port</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;port&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port:0&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">port</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;: client port | &quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml 配置为：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#服务注册地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>启动项目，再次访问<a href="http://localhost:8000/">http://localhost:8000</a>，可以看到 producer-client 实例已经注册进去了：<br><img src="02.jpg" alt="02.jpg"><br>访问<a href="http://localhost:8010/port/%F0%9F%90%92">http://localhost:8010/port/🐒</a>，返回数据为：<br><code>🐒: client port | 8010</code></p><h2 id="服务生产者集群"><a href="#服务生产者集群" class="headerlink" title="服务生产者集群"></a>服务生产者集群</h2><p>在 IntelliJ IDEA 的 Run/Debug Configurations 修改 ProducerClientApplication 启动类启动方式为并行启动（即可以开启多个实例）：<br><img src="03.jpg" alt="03.jpg"><br>然后修改 producer-client 项目的 application.yml 的端口为 8081：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#服务注册地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>并再次启动，启动方式是在已经启动一个实例的情况下点击右上角的三角启动按钮（可以注意到启动按钮右下角多了一个小绿点表示已开启并行启动），之后可以在 Euraka 管理页面看到：<br><img src="04.jpg" alt="04.jpg"><br>说明服务生产者集群注册成功（x-047 为计算机名称，localhost 为本机 ip（本 doom 只运行于本地））。<br><em>这里遇到个 bug 就是在项目依赖包含 devtool 的时候开启 IntelliJ IDEA 并行启动，在启动第二个并行实例的时候就会报错端口已被占用，所以请删除 devtool 依赖再启动第二个并行实例</em></p><h1 id="注册中心开启-Spring-Security-认证"><a href="#注册中心开启-Spring-Security-认证" class="headerlink" title="注册中心开启 Spring Security 认证"></a>注册中心开启 Spring Security 认证</h1><h2 id="注册中心配置修改"><a href="#注册中心配置修改" class="headerlink" title="注册中心配置修改"></a>注册中心配置修改</h2><p>因为 Eureka 管理中心可以看到所有注册到注册中心的服务基本情况，所以需要添加认证防止被随意访问。<br>首先在 eureka 项目添加 spring-cloud-starter-security 依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>discovery-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 application.yml 添加基本认证：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="comment">#基本认证账户名</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">      <span class="comment">#基本认证密码</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p>并在项目中添加 config.WebSecurityConfig 配置类，继承 WebSecurityConfigurerAdapter 类并重写 configure 方法（主要用于关闭默认开启的 csrf 校验，避免服务无法注册）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.eureka.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 安全认证配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable()</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin().and()</span><br><span class="line">            .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新启动项目，并访问<a href="http://localhost:8000/">http://localhost:8000</a>，可以看到基本认证已经添加了：<br><img src="05.jpg" alt="05.jpg"><br>输入在 application.yml 配置的账号密码 admin:admin 就可以登录了，之后页面内容和未添加认证没区别，不再赘述。</p><h2 id="服务生产者配置修改"><a href="#服务生产者配置修改" class="headerlink" title="服务生产者配置修改"></a>服务生产者配置修改</h2><p>在注册中心添加认证后，尝试启动服务生产者，会报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server</span><br></pre></td></tr></table></figure><p>需要在服务生产者的 application.yml 的注册中心地址添加账号密码认证：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8010</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">@pom.artifactId@</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://admin:admin@localhost:8000/eureka/</span></span><br></pre></td></tr></table></figure><p>就可以成功注册到注册中心了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eureka </tag>
            
            <tag> Spring Cloud Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前言</title>
      <link href="/2019/07/25/Spring-Cloud-Greenwich-SR2-0/"/>
      <url>/2019/07/25/Spring-Cloud-Greenwich-SR2-0/</url>
      
        <content type="html"><![CDATA[<p>前段时间看完了几个不同版本的 Spring Cloud 教程，趁着还有些记忆，把学习过程中遇到的问题和细节记录下来，包括<strong>Spring Cloud 版本更新导致的依赖/配置不可使用</strong>，免得以后犯同样的错误。<br>我自己理解的微服务就是根据服务拆分和集群提高系统可用性，以在可控的程度上减少服务故障造成的损失，整个文章系列都是基于这个理念来写的，微服务的其他特性不会有所体现。<br>如果不做特殊说明，以后相关文章的必需组件和项目结构都以本文为准，往后章节都以上一章节代码为基础，默认每个项目都使用 yml 做项目配置，默认添加 spring-boot-starter-actuator 系统监控依赖。<br><strong>目前写文目的仅限于自己搭建 doom 学习，偏实用，对原理一知半解，如果用于线上环境基本上是 100%要出问题的。</strong></p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h2 id="使用服务-组件版本及端口"><a href="#使用服务-组件版本及端口" class="headerlink" title="使用服务/组件版本及端口"></a>使用服务/组件版本及端口</h2><table><thead><tr><th>组件</th><th>版本</th><th>端口</th></tr></thead><tbody><tr><td>RabbitMQ</td><td>3.7.15</td><td>连接端口 5672<br/>管理页面端口 15672<br/>密码 guest:guest</td></tr><tr><td>Zipkin</td><td>2.16.2</td><td>连接端口/管理页面端口 9411</td></tr><tr><td>Redis</td><td>unknown</td><td>连接端口 6379<br/>密码为空</td></tr><tr><td>Mysql</td><td>5.7</td><td>连接端口 3306<br/>密码 root:root</td></tr><tr><td>Spring Cloud</td><td>Hoxton.RELEASE</td><td></td></tr><tr><td>Spring Cloud Alibaba</td><td>0.9.0.RELEASE</td><td></td></tr><tr><td>Spring Boot</td><td>2.2.2.RELEASE</td><td>Spring Boot Security 密码统一为 admin:admin</td></tr><tr><td>JDK</td><td>8</td><td></td></tr></tbody></table><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><table><thead><tr><th>组件</th><th>作用</th></tr></thead><tbody><tr><td>Eureka</td><td>服务发现、注册</td></tr><tr><td>Feign+Hystrix</td><td>服务间调用，熔断保护</td></tr><tr><td>Spring Cloud Gateway</td><td>网关（限流，请求过滤，请求分发）</td></tr><tr><td>HystrixDashboard+Turbine</td><td>熔断监控聚合可视化</td></tr><tr><td>Spring Cloud Config+Git</td><td>配置中心</td></tr><tr><td>RabbitMQ</td><td>消息中间件</td></tr><tr><td>Elasticsearch</td><td>日志持久化</td></tr><tr><td>Sleuth</td><td>日志收集</td></tr><tr><td>Zipkin</td><td>日志追踪</td></tr><tr><td>Hystrix Dashboard+Turbine</td><td>熔断仪表盘</td></tr></tbody></table><h2 id="创建父项目"><a href="#创建父项目" class="headerlink" title="创建父项目"></a>创建父项目</h2><p>以后的子模块统一继承此项目下面的子项目，自行在子项目的 modules 标签中添加子模块名称，以后不再作说明。父项目命名为 cloud，pom.xml 内容为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-maven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建二级父项目"><a href="#创建二级父项目" class="headerlink" title="创建二级父项目"></a>创建二级父项目</h2><h3 id="注册中心（discovery-center）"><a href="#注册中心（discovery-center）" class="headerlink" title="注册中心（discovery-center）"></a>注册中心（discovery-center）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>discovery-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>discovery-center<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>discovery-center<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>config-center<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>route-center<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>monitor-center<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置中心（config-center）"><a href="#配置中心（config-center）" class="headerlink" title="配置中心（config-center）"></a>配置中心（config-center）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>config-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>config-center<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="监控中心（monitor-center）"><a href="#监控中心（monitor-center）" class="headerlink" title="监控中心（monitor-center）"></a>监控中心（monitor-center）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>monitor-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>monitor-center<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="路由中心（route-center）"><a href="#路由中心（route-center）" class="headerlink" title="路由中心（route-center）"></a>路由中心（route-center）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>route-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>route-center<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="服务提供中心（server-center）"><a href="#服务提供中心（server-center）" class="headerlink" title="服务提供中心（server-center）"></a>服务提供中心（server-center）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.liuzhuoming23<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>server-center<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Cloud<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bloom filter（布隆过滤器）</title>
      <link href="/2019/07/16/bloom-filter/"/>
      <url>/2019/07/16/bloom-filter/</url>
      
        <content type="html"><![CDATA[<blockquote><p>布隆过滤器（英语：Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p></blockquote><p>可以理解为把每个 string（或者其他类型数据）通过特定的 hash 方法（通常是用 8 个不同的质数种子）生成 8 个不同的 hashCode 然后存入 BitSet，在判断某段 string 是否已存在的时候，按照相同的方法生成 8 个 hashCode，只要这 8 个 HashCode 都存在于 BitSet 则 string 验证成功（因为 hash 冲突的原因，也有可能 8 个 hashCode 都验证成功但是其实 string 是不相等的，如果 hash 方法选择得当这种情况出现的概率是很小的），如果生成的 8 个 hashCode 中至少一个 hashCode 不存在于 BitSet 则 string 验证失败，因此为了减少 hash 冲突，hash 算法的选择至关重要。<br>示例 hash 方法使用 FNV hash1 算法，而且因为 BitSet 只接受 0 和正整数所以对 hash 结果求绝对值。<br>采用 BitSet 数据结构是为了节省存储空间，BitSet 数据结构是用 bit 位数的状态表示某数字是否存在（比如第 124 个 bit 状态为 1 则表示 123 这个数字存在（位数从 0 开始）），所以只支持 0 和正整数，而 BitSet 的 length 指的是当前已存储的最大数字的 bit 位数（即存储的最大数字+1）（logical size），BitSet 的 size 指的是 BitSet 的当前占用容量的最大 bit 位数（默认最小容量为 64 位，存储数字大于等于 64 之后按照存储的数字区间每次容量扩大为该数字所在最小的 2^n 的大小，即存储数字是 64 的话容量扩大为 128，存储数字为 511 的话容量就扩大为 512）（number of bits of space），都无法表示当前存储数字的数量，不过可以间接使用<code>bitSet.stream().toArray().length</code>来实现。<br><em>因为<strong>Bloom filter</strong>不要求存储元数据，同时因为在数据量巨大的时候可能会验证错误，所以适用于验证的元数据占用存储空间比较大，并且验证正确率要求不是 100%的场景。</em></p><span id="more"></span><h2 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.bloomfilterdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bloom filter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] DEFAULT_SEEDS = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BitSet bitSet = <span class="keyword">new</span> BitSet();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] seeds;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BloomFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        seeds = DEFAULT_SEEDS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * build object based on seed string</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seed seed string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BloomFilter</span><span class="params">(String seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.seeds = seeds(seed);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            seeds = DEFAULT_SEEDS;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * parse seeds from seed string</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seed seed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] seeds(String seed) <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        MessageDigest md5Digest = MessageDigest.getInstance(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] digest = md5Digest.digest(seed.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOfRange(digest, <span class="number">4</span>, <span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> seed : seeds) &#123;</span><br><span class="line">                bitSet.set(hash(value, seed), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * contains</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> t:contains f:not contains</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> tf = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> seed : seeds) &#123;</span><br><span class="line">            tf = bitSet.get(hash(value, seed));</span><br><span class="line">            <span class="keyword">if</span> (!tf) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seed  seed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(String value, <span class="keyword">int</span> seed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(FNVHash1(value) ^ FNVHash1(String.valueOf(seed)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fnv hash1算法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hash</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FNVHash1</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> prime = <span class="number">16777619</span>;</span><br><span class="line">        <span class="keyword">long</span> hash = <span class="number">2166136261L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length(); i++) &#123;</span><br><span class="line">            hash = (hash ^ data.charAt(i)) * prime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) hash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.bloomfilterdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * bloom filter test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BFTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String value1 = <span class="string">&quot;liuzhuoming23@live.com&quot;</span>;</span><br><span class="line">        String value2 = <span class="string">&quot;liuzhuoming23.github.io&quot;</span>;</span><br><span class="line">        String value3 = <span class="string">&quot;test@qq.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">        BloomFilter bloomFilter = <span class="keyword">new</span> BloomFilter();</span><br><span class="line">        bloomFilter.add(value1);</span><br><span class="line">        bloomFilter.add(value2);</span><br><span class="line"></span><br><span class="line">        System.out.println(bloomFilter.contains(value1));</span><br><span class="line">        System.out.println(bloomFilter.contains(value3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ol><li><a href="%5B34%5D(https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8)">布隆过滤器 - 维基百科，自由的百科全书</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA集成Docker插件</title>
      <link href="/2019/07/12/Docker_Idea/"/>
      <url>/2019/07/12/Docker_Idea/</url>
      
        <content type="html"><![CDATA[<p>运行环境</p><table><thead><tr><th></th><th>version</th></tr></thead><tbody><tr><td>Windows 10</td><td>1903(18362.239)</td></tr><tr><td>Docker</td><td>2.0.0.3 (31259)</td></tr><tr><td>IntelliJ IDEA</td><td>2019.1 (Ultimate Edition)</td></tr><tr><td>JDK</td><td>openjdk:8-jre-alpine</td></tr></tbody></table><span id="more"></span><h2 id="Docker-integration"><a href="#Docker-integration" class="headerlink" title="Docker integration"></a>Docker integration</h2><p>IDEA 在 2018.1 之后某个版本里已经把 Docker integration 集成到默认插件里，所以不需要手动下载安装。如果 IDEA 为之前版本，可以在<code>菜单栏-File-Settings-Plugins</code>里面搜索<code>Docker integration</code>并安装重启 IDEA。<br><strong>部分 xml 有所省略。</strong></p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="IDEA-连接本地-Docker"><a href="#IDEA-连接本地-Docker" class="headerlink" title="IDEA 连接本地 Docker"></a>IDEA 连接本地 Docker</h4><ul><li>在 Docker 的<code>Settings-General</code>设置<code>Expose daemon on tcp://localhost:2375 whthout TLS</code>为选中</li><li>在<code>菜单栏-File-Settings-Build, Execution, Deployment-Docker</code>里面新增 Docker 来凝结配置并设置<code>TCP socket</code>选项内的<code>Engine API URL</code>为<code>tcp://localhost:2375</code>（默认值）</li></ul><h4 id="IDEA，Dockerfile-配置"><a href="#IDEA，Dockerfile-配置" class="headerlink" title="IDEA，Dockerfile 配置"></a>IDEA，Dockerfile 配置</h4><h5 id="IDEA-Dockerfile-设置"><a href="#IDEA-Dockerfile-设置" class="headerlink" title="IDEA Dockerfile 设置"></a>IDEA Dockerfile 设置</h5><ul><li>查看 IDEA 下方的<code>Toolbar</code>有没有<code>Docker</code>的功能标签,如果没有<code>Docker</code>功能标签，在<code>菜单栏-View-Tool Windows-Docker</code>手动打开</li><li>在<code>运行设置</code>里面新增配置<code>Dockerfile设置</code>，<code>Dockerfile设置</code>需要设置的基础参数为<code>Image tag</code>（镜像标签（名称）），<code>Container name</code>（容器名称），<code>Bind ports</code>（映射端口）<ul><li><code>映射端口</code>设置方式为：<code>Host port</code>为请求需要的端口号（本机），<code>Container port</code>为容器里面项目开启的端口（虚拟机，需要和项目里面的<code>application.yml</code>配置的<code>server.port</code>端口一致）</li></ul></li></ul><h5 id="Dockerfile-配置"><a href="#Dockerfile-配置" class="headerlink" title="Dockerfile 配置"></a>Dockerfile 配置</h5><p>在项目根目录创建 Dockerfile 文件（无后缀名）:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定基础镜像，在其上进行定制</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre-alpine</span><br><span class="line"><span class="comment">#维护者信息</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> liuzhuoming &lt;liuzhuoming23@live.com&gt;</span><br><span class="line"><span class="comment">#设置时区为上海</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add tzdata \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt;/etc/timezone \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk del tzdata</span></span><br><span class="line"><span class="comment">#这里的/tmp目录就会在运行时自动挂载为匿名卷，任何向/tmp中写入的信息都不会记录进容器存储层</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="comment">#复制上下文目录下的target/weekly-report.jar到容器里</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> target/weekly-report.jar weekly-report.jar</span></span><br><span class="line"><span class="comment">#声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8076</span></span><br><span class="line"><span class="comment">#指定容器启动程序及参数</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;weekly-report.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h5 id="pom-xml-配置"><a href="#pom-xml-配置" class="headerlink" title="pom.xml 配置"></a>pom.xml 配置</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weekly-report<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="利用-Dockerfile-构建镜像"><a href="#利用-Dockerfile-构建镜像" class="headerlink" title="利用 Dockerfile 构建镜像"></a>利用 Dockerfile 构建镜像</h3><ul><li>用 maven 打包项目，并生成 jar 文件（注意 jar 文件名称和上面<code>Dockerfile</code>文件里面<code>target/weekly-report.jar</code>文件名称一致）</li><li>打开 Dockerfile 文件并点击<code>Build Image for &#39;Dockerfile&#39;</code>，等待直到控制台输出编译成功日志，并在 Docker 的 Images 新增了一个名为<code>liuzhuoming23/weekly-report:latest</code>的镜像，证明镜像构建成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Successfully built 905d3cc4a895</span><br><span class="line"></span><br><span class="line">Successfully tagged liuzhuoming23/weekly-report:latest</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;liuzhuoming23/weekly-report Dockerfile: Dockerfile&#x27;</span> has been deployed successfully.</span><br></pre></td></tr></table></figure><h3 id="利用-Dockerfile-运行容器"><a href="#利用-Dockerfile-运行容器" class="headerlink" title="利用 Dockerfile 运行容器"></a>利用 Dockerfile 运行容器</h3><ul><li>用 maven 打包项目，并生成 jar 文件（同上<code>利用Dockerfile构建镜像</code>）</li><li>打开 Dockerfile 文件并点击<code>Run &#39;Dockerfile&#39;</code>，可以看到构建镜像之后项目直接在 docker 里面开始打印运行日志</li><li>在浏览器输入<code>http://localhost:18080/weekly-report/</code>（这里的端口号和上面在<code>IDEA Dockerfile设置-端口设置-Host port</code>里面的配置一致），就可以看见项目已经运行起来了</li></ul><h3 id="推送镜像到远程仓库"><a href="#推送镜像到远程仓库" class="headerlink" title="推送镜像到远程仓库"></a>推送镜像到远程仓库</h3><p>在生成的镜像上面右键并选择<code>Push Image...</code>，配置并选择自己的 Docker 远程仓库地址和镜像 tag（个人理解就是镜像名称）就可以了，不过因为这边没有 Docker 远程仓库，所以并没有实际尝试。</p><h2 id="dockerfile-maven-plugin"><a href="#dockerfile-maven-plugin" class="headerlink" title="dockerfile-maven-plugin"></a>dockerfile-maven-plugin</h2><p>本节代码基于上节<code>Docker integration</code>基础上进行修改。<br>修改部分 pom.xml 配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>weekly-report<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;plugin&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/plugin&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>target/$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后在 maven 命令运行<code>clean package dockerfile:build -DskipTests</code>就可以快速生成镜像并自动发布到远程仓库。<br>优点大概是省略了配置 IDEA-Dockerfile 设置的时间。</p><h2 id="docker-maven-plugin"><a href="#docker-maven-plugin" class="headerlink" title="docker-maven-plugin"></a>docker-maven-plugin</h2><p>本节代码基于上节<code>dockerfile-maven-plugin</code>基础上进行修改。</p><blockquote><p><code>docker-maven-plugin</code>和<code>dockerfile-maven-plugin</code>的关系大概就是<code>dockerfile-maven-plugin</code>要写 Dockerfile 文件，而<code>docker-maven-plugin</code>不需要（其实只是换个地方写 Dockerfile 文件的配置，工作总量并没有减少甚至因为 xml 的语法限制等配置还更显得繁琐，而且似乎停止维护了，所以还是建议使用<code>dockerfile-maven-plugin</code>）</p></blockquote><p>删除项目根目录下面的 Dockerfile 文件，并修改部分 pom.xml 配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;plugin&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">        &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;dockerfile-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.4.10&lt;/version&gt;</span></span><br><span class="line"><span class="comment">            &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">                &lt;repository&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;&lt;/repository&gt;</span></span><br><span class="line"><span class="comment">                &lt;buildArgs&gt;</span></span><br><span class="line"><span class="comment">                    &lt;JAR_FILE&gt;target/$&#123;project.build.finalName&#125;.jar&lt;/JAR_FILE&gt;</span></span><br><span class="line"><span class="comment">                &lt;/buildArgs&gt;</span></span><br><span class="line"><span class="comment">            &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">        &lt;/plugin&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定基础镜像，在其上进行定制 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>openjdk:8-jre-alpine<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 维护者信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maintainer</span>&gt;</span></span><br><span class="line">                    liuzhuoming</span><br><span class="line">                <span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置时区为上海 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">runs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- xml里面的&amp;&amp;需要用&lt;![CDATA[]]&gt;包括，不然打包会报错 --&gt;</span></span><br><span class="line">                        &lt;![CDATA[ apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt;/etc/timezone &amp;&amp; apk del tzdata ]]&gt;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">runs</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这种写多个&lt;run&gt;的方式是错误的，会产生多个层，平时在Dockerfile里面也尽量把所有RUN命令写在同一个RUN关键字下面用&amp;&amp;连接 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- &lt;runs&gt;</span></span><br><span class="line"><span class="comment">                    &lt;run&gt;</span></span><br><span class="line"><span class="comment">                        apk add tzdata</span></span><br><span class="line"><span class="comment">                    &lt;/run&gt;</span></span><br><span class="line"><span class="comment">                    &lt;run&gt;</span></span><br><span class="line"><span class="comment">                        cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="comment">                    &lt;/run&gt;</span></span><br><span class="line"><span class="comment">                    &lt;run&gt;</span></span><br><span class="line"><span class="comment">                        echo &quot;Asia/Shanghai&quot; &gt;/etc/timezone</span></span><br><span class="line"><span class="comment">                    &lt;/run&gt;</span></span><br><span class="line"><span class="comment">                    &lt;run&gt;</span></span><br><span class="line"><span class="comment">                        apk del tzdata</span></span><br><span class="line"><span class="comment">                    &lt;/run&gt;</span></span><br><span class="line"><span class="comment">                &lt;/runs&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里的/tmp目录就会在运行时自动挂载为匿名卷，任何向/tmp中写入的信息都不会记录进容器存储层 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">volumes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">volume</span>&gt;</span></span><br><span class="line">                        /tmp</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">volume</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">volumes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exposes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">expose</span>&gt;</span>8076<span class="tag">&lt;/<span class="name">expose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exposes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定容器启动程序及参数 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>然后在 maven 命令运行<code>clean package docker:build -DskipTests</code>就可以快速生成镜像并自动发布到远程仓库。<br>优点大概是省略了配置 IDEA-Dockerfile 设置的时间。</p><h2 id="代码-git-仓库"><a href="#代码-git-仓库" class="headerlink" title="代码 git 仓库"></a>代码 git 仓库</h2><p><a href="https://github.com/maozhijie19/weekly-report.git">weekly-report | github</a></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> IntelliJ IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot集成Elasticsearch</title>
      <link href="/2019/07/09/Elasticsearch/"/>
      <url>/2019/07/09/Elasticsearch/</url>
      
        <content type="html"><![CDATA[<ol><li>spring-boot-starter-data-elasticsearch 目前最新版是 3.1.9.RELEASE，不支持 Elasticsearch（下文简称 ES）7.0.x，在下载了多个版本尝试之后，选择 ES6.4.3 版本；</li><li>以下操作均默认已开启 ES 和安装 IK 分词器并全部采用默认配置，默认已了解 ES 的索引的定义、作用以及索引和数据之间的映射关系；</li><li>无特殊说明的话，运行代码都是写在 ESTest 测试类中；</li><li>因为个人增删改查顺序不完全一样，数据查询出来结果可能和示例不是完全一致，属于正常情况，请按照自己的结果做后续测试。</li></ol><p><strong><em>等待 Spring Boot 集成 Elasticsearch7.0.x 之后的 Rest Api，故不再更新。</em></strong></p><span id="more"></span><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><table><thead><tr><th></th><th>version</th></tr></thead><tbody><tr><td>Spring Boot</td><td>2.1.6.RELEASE</td></tr><tr><td>Elasticsearch</td><td>6.4.3</td></tr><tr><td>IK Analysis for Elasticsearch</td><td>6.4.3</td></tr></tbody></table><h2 id="修改-pom-xml"><a href="#修改-pom-xml" class="headerlink" title="修改 pom.xml"></a>修改 pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改-application-yml"><a href="#修改-application-yml" class="headerlink" title="修改 application.yml"></a>修改 application.yml</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="comment">#默认端口9300</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="string">localhost:9300</span></span><br><span class="line">      <span class="comment">#默认名称elasticsearch</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span></span><br></pre></td></tr></table></figure><h2 id="创建映射实体类"><a href="#创建映射实体类" class="headerlink" title="创建映射实体类"></a>创建映射实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.esdemo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * product</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;product&quot;, type = &quot;docs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2872972075927095189L</span>;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="meta">@Field(type = FieldType.Double)</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="meta">@Field(index = false, type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建-service-接口"><a href="#创建-service-接口" class="headerlink" title="创建 service 接口"></a>创建 service 接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.esdemo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.esdemo.domain.Product;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * product repository</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Product</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.liuzhuoming23.esdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.liuzhuoming23.esdemo.service.ProductRepository;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.ElasticsearchTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzhuoming</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductRepository productRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> products 产品信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(Iterable&lt;Product&gt; products)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Product product : products) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&gt;&gt;&gt;&quot;</span> + product);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询并打印结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryBuilder QueryBuilder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">searchAndPrintln</span><span class="params">(QueryBuilder queryBuilder)</span> </span>&#123;</span><br><span class="line">        NativeSearchQueryBuilder builder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">        builder.withQuery(queryBuilder);</span><br><span class="line">        <span class="keyword">this</span>.println(<span class="keyword">this</span>.productRepository.search(builder.build()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES-基本操作"><a href="#ES-基本操作" class="headerlink" title="ES 基本操作"></a>ES 基本操作</h2><h3 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h3><p>必要，不先进行这一步下面的步骤将毫无意义，重要性类似于 mysql 插入数据前先创建表：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    elasticsearchTemplate.createIndex(Product.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据增删改查操作"><a href="#数据增删改查操作" class="headerlink" title="数据增删改查操作"></a>数据增删改查操作</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//插入单条数据</span></span><br><span class="line">    Product product = <span class="keyword">new</span> Product(<span class="number">1L</span>, <span class="string">&quot;小米手机8&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">2399.00</span>, <span class="string">&quot;https://liuzhuoming23.github.io/images/avatar.jpg&quot;</span>);</span><br><span class="line">    productRepository.save(product);</span><br><span class="line">    <span class="comment">//插入数据列表（为方便后面查询更为直观，这里的id最好是乱序）</span></span><br><span class="line">    List&lt;Product&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Product(<span class="number">4L</span>, <span class="string">&quot;小米手机MIX2&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">6499.00</span>, <span class="string">&quot;https://liuzhuoming23.github.io/images/avatar.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Product(<span class="number">2L</span>, <span class="string">&quot;坚果手机R1&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;锤子&quot;</span>, <span class="number">3699.00</span>, <span class="string">&quot;https://liuzhuoming23.github.io/images/avatar.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Product(<span class="number">3L</span>, <span class="string">&quot;华为META10&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="number">4499.00</span>, <span class="string">&quot;https://liuzhuoming23.github.io/images/avatar.jpg&quot;</span>));</span><br><span class="line">    productRepository.saveAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据id删除单条数据</span></span><br><span class="line">    productRepository.deleteById(<span class="number">1L</span>);</span><br><span class="line">    <span class="comment">//根据实体类删除单条数据</span></span><br><span class="line">    Product product = <span class="keyword">new</span> Product(<span class="number">1L</span>, <span class="string">&quot;小米手机9&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">3399.00</span>, <span class="string">&quot;https://liuzhuoming23.github.io/images/avatar.jpg&quot;</span>);</span><br><span class="line">    productRepository.delete(product);</span><br><span class="line">    <span class="comment">//根据集合删除多条数据</span></span><br><span class="line">    List&lt;Product&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Product(<span class="number">2L</span>, <span class="string">&quot;坚果手机R1&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;锤子&quot;</span>, <span class="number">3699.00</span>, <span class="string">&quot;https://liuzhuoming23.github.io/images/avatar.jpg&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Product(<span class="number">3L</span>, <span class="string">&quot;华为META10&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="number">4499.00</span>, <span class="string">&quot;https://liuzhuoming23.github.io/images/avatar.jpg&quot;</span>));</span><br><span class="line">    productRepository.deleteAll(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//更新单条数据（保持实体类id和需修改的数据id一致）</span></span><br><span class="line">    Product product = <span class="keyword">new</span> Product(<span class="number">1L</span>, <span class="string">&quot;小米手机9&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="number">3399.00</span>,</span><br><span class="line">        <span class="string">&quot;https://liuzhuoming23.github.io/images/avatar.jpg&quot;</span>);</span><br><span class="line">    productRepository.save(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><h5 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.println(productRepository.findAll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=2, title=坚果手机R1, category=手机, brand=锤子, price=3699.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=4, title=小米手机MIX2, category=手机, brand=小米, price=6499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=1, title=小米手机8, category=手机, brand=小米, price=2399.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=3, title=华为META10, category=手机, brand=华为, price=4499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h6 id="基础查询排序"><a href="#基础查询排序" class="headerlink" title="基础查询排序"></a>基础查询排序</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllAndSortByIdDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.println(productRepository.findAll(Sort.by(<span class="string">&quot;id&quot;</span>).descending()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=4, title=小米手机MIX2, category=手机, brand=小米, price=6499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=3, title=华为META10, category=手机, brand=华为, price=4499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=2, title=坚果手机R1, category=手机, brand=锤子, price=3699.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=1, title=小米手机8, category=手机, brand=小米, price=2399.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h6 id="基础查询分页"><a href="#基础查询分页" class="headerlink" title="基础查询分页"></a>基础查询分页</h6><p>分页从第 0 页开始。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllForPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pageNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.println(<span class="keyword">this</span>.productRepository.findAll(PageRequest.of(pageNum, pageSize)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=2, title=坚果手机R1, category=手机, brand=锤子, price=3699.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=4, title=小米手机MIX2, category=手机, brand=小米, price=6499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h5 id="JPA-方式的查询构建"><a href="#JPA-方式的查询构建" class="headerlink" title="JPA 方式的查询构建"></a>JPA 方式的查询构建</h5><p>在 ProductRepository 接口添加如下接口方法，JPA 会根据实体类的字段和常用查询描述（比如 And、Or、By、Between 等）自动补全方法名称并实现构造相应 sql 的功能：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Product&gt; <span class="title">findByPriceBetween</span><span class="params">(<span class="keyword">double</span> min, <span class="keyword">double</span> max)</span></span>;</span><br></pre></td></tr></table></figure><p>在 ESTest 测试类添加测试代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPriceBetween</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.println(productRepository.findByPriceBetween(<span class="number">3000D</span>, <span class="number">5000D</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=2, title=坚果手机R1, category=手机, brand=锤子, price=3699.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=3, title=华为META10, category=手机, brand=华为, price=4499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h6 id="JPA-方式查询排序"><a href="#JPA-方式查询排序" class="headerlink" title="JPA 方式查询排序"></a>JPA 方式查询排序</h6><p>ProductRepository 接口 findByPriceBetween 方法添加 Sort 参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Product&gt; <span class="title">findByPriceBetween</span><span class="params">(<span class="keyword">double</span> min, <span class="keyword">double</span> max, Sort sort)</span></span>;</span><br></pre></td></tr></table></figure><p>在 ESTest 测试类添加测试代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPriceBetweenSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.println(productRepository.findByPriceBetween(<span class="number">3000D</span>, <span class="number">5000D</span>, Sort.by(<span class="string">&quot;id&quot;</span>).descending()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=3, title=华为META10, category=手机, brand=华为, price=4499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=2, title=坚果手机R1, category=手机, brand=锤子, price=3699.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h5 id="NativeSearchQueryBuilder-QueryBuilders-基础查询（termQuery，matchQuery，fuzzyQuery）"><a href="#NativeSearchQueryBuilder-QueryBuilders-基础查询（termQuery，matchQuery，fuzzyQuery）" class="headerlink" title="NativeSearchQueryBuilder+QueryBuilders 基础查询（termQuery，matchQuery，fuzzyQuery）"></a>NativeSearchQueryBuilder+QueryBuilders 基础查询（termQuery，matchQuery，fuzzyQuery）</h5><h6 id="查询条件不分词匹配"><a href="#查询条件不分词匹配" class="headerlink" title="查询条件不分词匹配"></a>查询条件不分词匹配</h6><p>不会对查询条件进行分词，查询条件必须完全匹配被 ES 的分词器分词后的词语。比如”小米手机”根据 IK 分词后成为[“小米”,”手机”]，这时候查询条件写”小米手机”是查不到任何匹配结果的，必须用”小米”或者”手机”查询才有匹配结果）（并非类似 sql 的模糊查询，而是基于关键字的完全匹配查询）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryBuilder queryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.searchAndPrintln(queryBuilder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=4, title=小米手机MIX2, category=手机, brand=小米, price=6499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=1, title=小米手机8, category=手机, brand=小米, price=2399.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h6 id="多查询条件不分词匹配"><a href="#多查询条件不分词匹配" class="headerlink" title="多查询条件不分词匹配"></a>多查询条件不分词匹配</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termsQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryBuilder queryBuilder = QueryBuilders.termsQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.searchAndPrintln(queryBuilder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=2, title=坚果手机R1, category=手机, brand=锤子, price=3699.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=4, title=小米手机MIX2, category=手机, brand=小米, price=6499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=1, title=小米手机8, category=手机, brand=小米, price=2399.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h6 id="查询条件分词匹配"><a href="#查询条件分词匹配" class="headerlink" title="查询条件分词匹配"></a>查询条件分词匹配</h6><p>会将查询条件进行分词，比如”小米手机”可能会被 IK 分词为[“小米”,”手机”]，这时候匹配到的就是 ES 里面被分词器分词后完全匹配”小米”或者”手机”的数据：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryBuilder queryBuilder = QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米手机&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.searchAndPrintln(queryBuilder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=1, title=小米手机8, category=手机, brand=小米, price=2399.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=4, title=小米手机MIX2, category=手机, brand=小米, price=6499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=2, title=坚果手机R1, category=手机, brand=锤子, price=3699.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h6 id="查询条件分词匹配多字段"><a href="#查询条件分词匹配多字段" class="headerlink" title="查询条件分词匹配多字段"></a>查询条件分词匹配多字段</h6><p>注意 multiMatchQuery 方法的查询条件写在参数第一位和其它方法都不一样，推测应该是为了方便传入不定长数组的字段做的妥协。而且应该只能字段类型是 text 才能分词匹配，如果是 keyword 类型将会根据查询条件不分词匹配（比如 brand 字段匹配”小米 8”不分词匹配将查询不到任何结果）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiMatchQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryBuilder queryBuilder = QueryBuilders.multiMatchQuery(<span class="string">&quot;小米8&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;brand&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.searchAndPrintln(queryBuilder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=1, title=小米手机8, category=手机, brand=小米, price=2399.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=4, title=小米手机MIX2, category=手机, brand=小米, price=6499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h6 id="查询条件模糊匹配"><a href="#查询条件模糊匹配" class="headerlink" title="查询条件模糊匹配"></a>查询条件模糊匹配</h6><p>感觉是介于 查询条件不分词 和 查询条件分词 之间的完全匹配查询方式，但是匹配符<code>*</code>不能用，不是很明确如何正常使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fuzzyQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    QueryBuilder queryBuilder = QueryBuilders.fuzzyQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;米手机&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.searchAndPrintln(queryBuilder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=1, title=小米手机8, category=手机, brand=小米, price=2399.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=2, title=坚果手机R1, category=手机, brand=锤子, price=3699.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;Product(id=4, title=小米手机MIX2, category=手机, brand=小米, price=6499.0, images=https://liuzhuoming23.github.io/images/avatar.jpg)</span></span><br></pre></td></tr></table></figure><h5 id="NativeSearchQueryBuilder-QueryBuilders-高级查询"><a href="#NativeSearchQueryBuilder-QueryBuilders-高级查询" class="headerlink" title="NativeSearchQueryBuilder + QueryBuilders 高级查询"></a>NativeSearchQueryBuilder + QueryBuilders 高级查询</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TODO</span></span><br></pre></td></tr></table></figure><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ol><li><a href="https://blog.csdn.net/chen_2890/article/details/83895646">SpringBoot 整合 Elasticsearch - 君临天下 - CSDN 博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql游标的完（jian）整（dan）使用</title>
      <link href="/2018/10/05/Mysql%E6%B8%B8%E6%A0%87%E7%9A%84%E5%AE%8C%EF%BC%88jian%EF%BC%89%E6%95%B4%EF%BC%88dan%EF%BC%89%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/05/Mysql%E6%B8%B8%E6%A0%87%E7%9A%84%E5%AE%8C%EF%BC%88jian%EF%BC%89%E6%95%B4%EF%BC%88dan%EF%BC%89%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>今天遇到业务需求是根据组织机构统计数据，原统计的存储过程写在一个 200 多行的存储过程里面，并使用 Mysql 的事件调用，需要作为查询条件的组织机构 code 写在一张表里面。<br>解决方案有两个：</p><ol><li>后端处理：在后端查询到全部组织机构 code 之后，使用 java 的任务调度（quertz，Spring 的任务调度等）遍历 code 集合进行处理</li><li>数据库处理：在存储过程里查询到全部组织机构 code 之后，赋值到 Mysql 的游标遍历处理，并使用 Mysql 事件进行定时调用存储过程</li></ol><p>这里讲讲第二种。</p><span id="more"></span><p>原需求业务比较庞大做示例不太直观，所以我们首先假设有一个需求是从 t0 表把全部 id 和 name 转存到 t1 表的 id 和 name，其中 t0、t1 表都是有一个自增主键 id 并且只有一个非主键字段 name 的表，那么代码如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`root`@`<span class="operator">%</span>` <span class="keyword">PROCEDURE</span> `test`()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- 定义变量name_和id_用来接收从游标获取到的结果</span></span><br><span class="line"><span class="keyword">DECLARE</span> name_ <span class="type">VARCHAR</span>(<span class="number">25</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> id_ <span class="type">INT</span>(<span class="number">12</span>);</span><br><span class="line"><span class="comment">-- 定义结束标记变量（相当于java的boolean flag=true这样的）</span></span><br><span class="line"><span class="keyword">DECLARE</span> flag_ <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表得到结果集赋值给names_游标（相当于java的迭代器）</span></span><br><span class="line"><span class="keyword">DECLARE</span> names_ <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> name_,id_ <span class="keyword">FROM</span> t0;</span><br><span class="line"><span class="comment">-- 如果查询不到结果（即游标遍历结束）给flag变量赋值为1</span></span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">NOT</span> FOUND <span class="keyword">SET</span> flag_<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启游标</span></span><br><span class="line"><span class="keyword">OPEN</span> names_;</span><br><span class="line"><span class="comment">-- 获取游标第一条结果并赋值到name_和id_变量（注意参数的先后顺序需和赋值给游标时完全一致）</span></span><br><span class="line"><span class="keyword">FETCH</span> names_ <span class="keyword">INTO</span> name_,id_;</span><br><span class="line"><span class="comment">-- 判断flag_变量值不是1的话进行循环</span></span><br><span class="line">WHILE flag_ <span class="operator">!=</span> <span class="number">1</span> DO</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 业务操作开始</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (id,`name`)<span class="keyword">VALUES</span>(id_,name_);</span><br><span class="line">            <span class="comment">-- 业务操作结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取游标下一条结果并赋值到name_和id_变量</span></span><br><span class="line"><span class="keyword">FETCH</span> names_ <span class="keyword">INTO</span> name_,id_;</span><br><span class="line"><span class="comment">-- 结束循环</span></span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="comment">-- 关闭游标</span></span><br><span class="line"><span class="keyword">CLOSE</span> names_;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>运行上面的 Sql 创建存储过程，然后运行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CALL</span> test;</span><br></pre></td></tr></table></figure><p>调用存储过程，之后去 t1 表就可以看见数据已经转存过去了。</p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
